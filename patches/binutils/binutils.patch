diff -uNr a/debian/control b/debian/control
--- a/debian/control	2023-05-10 20:34:43.000000000 +0800
+++ b/debian/control	2023-05-29 15:23:22.000000000 +0800
@@ -381,6 +381,32 @@
 Description: GNU binary utilities, for arm-linux-gnueabi target (debug symbols)
  This package provides debug symbols for binutils-arm-linux-gnueabi.
 
+Package: binutils-loongarch64-linux-gnu
+Priority: optional
+Architecture: loong64 amd64 i386 x32 arm64 
+Multi-Arch: allowed
+Depends: binutils-common (= ${binary:Version}),
+  ${shlibs:Depends}, ${extraDepends}
+Suggests: binutils-doc (= ${source:Version})
+Provides: 
+Breaks: binutils (<< 2.29-6), binutils-dev (<< 2.38.50.20220609-2)
+Replaces: binutils (<< 2.29-6), binutils-dev (<< 2.38.50.20220609-2)
+Description: GNU binary utilities, for loongarch64-linux-gnu target
+ This package provides GNU assembler, linker and binary utilities
+ for the loongarch64-linux-gnu target.
+ .
+ You don't need this package unless you plan to cross-compile programs
+ for loongarch64-linux-gnu and loongarch64-linux-gnu is not your native platform.
+
+Package: binutils-loongarch64-linux-gnu-dbg
+Section: debug
+Priority: optional
+Architecture: loong64 amd64 i386 x32 arm64 
+Multi-Arch: foreign
+Depends: binutils-loongarch64-linux-gnu (= ${binary:Version})
+Description: GNU binary utilities, for loongarch64-linux-gnu target (debug symbols)
+ This package provides debug symbols for binutils-loongarch64-linux-gnu.
+
 Package: binutils-powerpc64le-linux-gnu
 Priority: optional
 Architecture: ppc64el amd64 i386 x32 ppc64 arm64
diff -uNr a/debian/patches/series b/debian/patches/series
--- a/debian/patches/series	2023-05-01 21:53:06.000000000 +0800
+++ b/debian/patches/series	2023-05-29 15:34:28.000000000 +0800
@@ -40,3 +40,5 @@
 perl-shebang.diff
 
 link-jansson.diff
+#support-loong64-link-relaxation.patch
+support-loongarch-vector.patch
diff -uNr a/debian/patches/support-loong64-link-relaxation.patch b/debian/patches/support-loong64-link-relaxation.patch
--- a/debian/patches/support-loong64-link-relaxation.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/support-loong64-link-relaxation.patch	2023-05-29 15:32:49.000000000 +0800
@@ -0,0 +1,4192 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ binutils (2.40.50.20230510-1) experimental; urgency=medium
+ .
+   * New upstream snapshot, taken from the trunk.
+   * Pass -ffile-prefix-map to CFLAGS and CXXFLAGS (Vagrant Cascadian).
+     Closes: #1033959.
+   * Build a hurd-amd64 package (Samuel Thibault). Closes: #1035773.
+Author: Matthias Klose <doko@debian.org>
+Bug-Debian: https://bugs.debian.org/1033959
+Bug-Debian: https://bugs.debian.org/1035773
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-05-29
+
+--- /dev/null
++++ binutils-2.40.50.20230510/1.patch
+@@ -0,0 +1,36 @@
++diff --git a/bfd/elfnn-loongarch.c b/bfd/elfnn-loongarch.c
++index b0f9b6ec69e..3fb74edb45c 100644
++--- a/bfd/elfnn-loongarch.c
+++++ b/bfd/elfnn-loongarch.c
++@@ -980,7 +980,7 @@ loongarch_elf_adjust_dynamic_symbol (struct bfd_link_info *info,
++      (although we could actually do it here).  */
++   if (h->type == STT_FUNC || h->type == STT_GNU_IFUNC || h->needs_plt)
++     {
++-      if (h->plt.refcount < 0
+++      if (h->plt.refcount <= 0
++ 	  || (h->type != STT_GNU_IFUNC
++ 	      && (SYMBOL_REFERENCES_LOCAL (info, h)
++ 		  || (ELF_ST_VISIBILITY (h->other) != STV_DEFAULT
++@@ -993,8 +993,6 @@ loongarch_elf_adjust_dynamic_symbol (struct bfd_link_info *info,
++ 	  h->plt.offset = MINUS_ONE;
++ 	  h->needs_plt = 0;
++ 	}
++-      else
++-	h->needs_plt = 1;
++ 
++       return true;
++     }
++diff --git a/ld/testsuite/ld-elf/shared.exp b/ld/testsuite/ld-elf/shared.exp
++index db9d71398de..1eef9f45667 100644
++--- a/ld/testsuite/ld-elf/shared.exp
+++++ b/ld/testsuite/ld-elf/shared.exp
++@@ -504,7 +504,8 @@ run_ld_link_tests [list \
++ # but that is just an optimization so don't complain loudly.
++ setup_xfail *-*-*
++ clear_xfail alpha-*-* bfin-*-linux* csky-*-* frv-*-* hppa*-*-* i?86-*-*
++-clear_xfail ia64-*-* microblaze-*-* powerpc*-*-* x86_64-*-* xtensa-*-*
+++clear_xfail ia64-*-* loongarch*-*-* microblaze-*-* powerpc*-*-* x86_64-*-*
+++clear_xfail xtensa-*-*
++ run_ld_link_tests {
++     {"pr22374 function pointer initialization"
++ 	"" "tmpdir/pr22374.so" "" "pr22374a.s"
+--- binutils-2.40.50.20230510.orig/bfd/bfd-in2.h
++++ binutils-2.40.50.20230510/bfd/bfd-in2.h
+@@ -7332,6 +7332,14 @@ assembler and not (currently) written to
+   BFD_RELOC_LARCH_TLS_GD_HI20,
+   BFD_RELOC_LARCH_32_PCREL,
+   BFD_RELOC_LARCH_RELAX,
++  BFD_RELOC_LARCH_DELETE,
++  BFD_RELOC_LARCH_ALIGN,
++  BFD_RELOC_LARCH_PCREL20_S2,
++  BFD_RELOC_LARCH_CFA,
++  BFD_RELOC_LARCH_ADD6,
++  BFD_RELOC_LARCH_SUB6,
++  BFD_RELOC_LARCH_ADD_ULEB128,
++  BFD_RELOC_LARCH_SUB_ULEB128,
+   BFD_RELOC_UNUSED };
+ typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;
+ 
+--- binutils-2.40.50.20230510.orig/bfd/elfnn-loongarch.c
++++ binutils-2.40.50.20230510/bfd/elfnn-loongarch.c
+@@ -27,6 +27,7 @@
+ #include "objalloc.h"
+ #include "elf/loongarch.h"
+ #include "elfxx-loongarch.h"
++#include "opcode/loongarch.h"
+ 
+ static bool
+ loongarch_info_to_howto_rela (bfd *abfd, arelent *cache_ptr,
+@@ -93,6 +94,10 @@ struct loongarch_elf_link_hash_table
+ 
+   /* The max alignment of output sections.  */
+   bfd_vma max_alignment;
++
++  /* The data segment phase, don't relax the section
++     when it is exp_seg_relro_adjust.  */
++  int *data_segment_phase;
+ };
+ 
+ /* Get the LoongArch ELF linker hash table from a link_info structure.  */
+@@ -772,8 +777,8 @@ loongarch_elf_check_relocs (bfd *abfd, s
+ 
+ 	  break;
+ 
+-	case R_LARCH_B21:
+ 	case R_LARCH_B16:
++	case R_LARCH_B21:
+ 	case R_LARCH_B26:
+ 	  if (h != NULL)
+ 	    {
+@@ -972,15 +977,19 @@ loongarch_elf_adjust_dynamic_symbol (str
+ 
+   /* Make sure we know what is going on here.  */
+   BFD_ASSERT (dynobj != NULL
+-	      && (h->needs_plt || h->type == STT_GNU_IFUNC || h->is_weakalias
+-		  || (h->def_dynamic && h->ref_regular && !h->def_regular)));
++	      && (h->needs_plt
++		  || h->type == STT_GNU_IFUNC
++		  || h->is_weakalias
++		  || (h->def_dynamic
++		      && h->ref_regular
++		      && !h->def_regular)));
+ 
+   /* If this is a function, put it in the procedure linkage table.  We
+      will fill in the contents of the procedure linkage table later
+      (although we could actually do it here).  */
+   if (h->type == STT_FUNC || h->type == STT_GNU_IFUNC || h->needs_plt)
+     {
+-      if (h->plt.refcount < 0
++      if (h->plt.refcount <= 0
+ 	  || (h->type != STT_GNU_IFUNC
+ 	      && (SYMBOL_REFERENCES_LOCAL (info, h)
+ 		  || (ELF_ST_VISIBILITY (h->other) != STV_DEFAULT
+@@ -993,8 +1002,6 @@ loongarch_elf_adjust_dynamic_symbol (str
+ 	  h->plt.offset = MINUS_ONE;
+ 	  h->needs_plt = 0;
+ 	}
+-      else
+-	h->needs_plt = 1;
+ 
+       return true;
+     }
+@@ -1886,7 +1893,7 @@ loongarch_reloc_rewrite_imm_insn (const
+   int bits = bfd_get_reloc_size (howto) * 8;
+   uint32_t insn = bfd_get (bits, input_bfd, contents + rel->r_offset);
+ 
+-  if (!loongarch_adjust_reloc_bitsfield(howto, &reloc_val))
++  if (!loongarch_adjust_reloc_bitsfield (input_bfd, howto, &reloc_val))
+     return bfd_reloc_overflow;
+ 
+   insn = (insn & (uint32_t)howto->src_mask)
+@@ -2006,42 +2013,73 @@ perform_relocation (const Elf_Internal_R
+       bfd_put (bits, input_bfd, value, contents + rel->r_offset);
+       break;
+ 
++    /* LoongArch only has add/sub reloc pair, not has set/sub reloc pair.
++       Because set/sub reloc pair not support multi-thread. While add/sub
++       reloc pair process order not affect the final result.
++
++       For add/sub reloc, the original value will be involved in the
++       calculation. In order not to add/sub extra value, we write 0 to symbol
++       address at assembly time.
++
++       add/sub reloc bits determined by the value after symbol subtraction,
++       not symbol value.
++
++       add/sub reloc save part of the symbol value, so we only need to
++       save howto->dst_mask bits.  */
++    case R_LARCH_ADD6:
++    case R_LARCH_SUB6:
++      {
++	bfd_vma word = bfd_get (howto->bitsize, input_bfd,
++				contents + rel->r_offset);
++	word = (word & ~howto->dst_mask) | (value & howto->dst_mask);
++	bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);
++	r = bfd_reloc_ok;
++	break;
++      }
++
++    /* Not need to read the original value, just write the new value.  */
+     case R_LARCH_ADD8:
+     case R_LARCH_ADD16:
+     case R_LARCH_ADD24:
+     case R_LARCH_ADD32:
+     case R_LARCH_ADD64:
+-      r = loongarch_check_offset (rel, input_section);
+-      if (r != bfd_reloc_ok)
+-	break;
+-
+-      opr1 = bfd_get (bits, input_bfd, contents + rel->r_offset);
+-      bfd_put (bits, input_bfd, opr1 + value, contents + rel->r_offset);
+-      break;
+-
+     case R_LARCH_SUB8:
+     case R_LARCH_SUB16:
+     case R_LARCH_SUB24:
+     case R_LARCH_SUB32:
+     case R_LARCH_SUB64:
+-      r = loongarch_check_offset (rel, input_section);
+-      if (r != bfd_reloc_ok)
++      {
++	/* Because add/sub reloc is processed separately,
++	   so the high bits is invalid.  */
++	bfd_vma word = value & howto->dst_mask;
++	bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);
++	r = bfd_reloc_ok;
+ 	break;
++      }
+ 
+-      opr1 = bfd_get (bits, input_bfd, contents + rel->r_offset);
+-      bfd_put (bits, input_bfd, opr1 - value, contents + rel->r_offset);
+-      break;
++    case R_LARCH_ADD_ULEB128:
++    case R_LARCH_SUB_ULEB128:
++      {
++	unsigned int len = 0;
++	/* Before write uleb128, first read it to get it's length.  */
++	_bfd_read_unsigned_leb128 (input_bfd, contents + rel->r_offset, &len);
++	loongarch_write_unsigned_leb128 (contents + rel->r_offset, len, value);
++	r = bfd_reloc_ok;
++	break;
++      }
+ 
+     /* For eh_frame and debug info.  */
+     case R_LARCH_32_PCREL:
+-      value -= sec_addr (input_section) + rel->r_offset;
+-      value += rel->r_addend;
+-      bfd_vma word = bfd_get (howto->bitsize, input_bfd,
+-			      contents + rel->r_offset);
+-      word = (word & ~howto->dst_mask) | (value & howto->dst_mask);
+-      bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);
+-      r = bfd_reloc_ok;
+-      break;
++      {
++	value -= sec_addr (input_section) + rel->r_offset;
++	value += rel->r_addend;
++	bfd_vma word = bfd_get (howto->bitsize, input_bfd,
++				contents + rel->r_offset);
++	word = (word & ~howto->dst_mask) | (value & howto->dst_mask);
++	bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);
++	r = bfd_reloc_ok;
++	break;
++      }
+ 
+     /* New reloc type.
+        R_LARCH_B16 ~ R_LARCH_TLS_GD_HI20.  */
+@@ -2080,6 +2118,7 @@ perform_relocation (const Elf_Internal_R
+     case R_LARCH_TLS_LD_HI20:
+     case R_LARCH_TLS_GD_PC_HI20:
+     case R_LARCH_TLS_GD_HI20:
++    case R_LARCH_PCREL20_S2:
+       r = loongarch_check_offset (rel, input_section);
+       if (r != bfd_reloc_ok)
+ 	break;
+@@ -2246,9 +2285,9 @@ loongarch_reloc_is_fatal (struct bfd_lin
+ 
+ #define RELOCATE_CALC_PC32_HI20(relocation, pc) 	\
+   ({							\
+-    bfd_vma lo = (relocation) & ((bfd_vma)0xfff);	\
++    bfd_vma __lo = (relocation) & ((bfd_vma)0xfff);	\
+     pc = pc & (~(bfd_vma)0xfff);			\
+-    if (lo > 0x7ff)					\
++    if (__lo > 0x7ff)					\
+       {							\
+ 	relocation += 0x1000;				\
+       } 						\
+@@ -2258,8 +2297,8 @@ loongarch_reloc_is_fatal (struct bfd_lin
+ 
+ #define RELOCATE_CALC_PC64_HI32(relocation, pc)  	\
+   ({							\
+-    bfd_vma lo = (relocation) & ((bfd_vma)0xfff);	\
+-    if (lo > 0x7ff)					\
++    bfd_vma __lo = (relocation) & ((bfd_vma)0xfff);	\
++    if (__lo > 0x7ff)					\
+       { 						\
+ 	relocation -= 0x100000000;      		\
+       }  						\
+@@ -2524,29 +2563,49 @@ loongarch_elf_relocate_section (bfd *out
+ 	  relocation += rel->r_addend;
+ 	  break;
+ 
++	case R_LARCH_ADD6:
+ 	case R_LARCH_ADD8:
+ 	case R_LARCH_ADD16:
+ 	case R_LARCH_ADD24:
+ 	case R_LARCH_ADD32:
+ 	case R_LARCH_ADD64:
++	  {
++	    bfd_vma old_value = bfd_get (howto->bitsize, input_bfd,
++					 contents + rel->r_offset);
++	    relocation = old_value + relocation + rel->r_addend;
++	    break;
++	  }
++
++	case R_LARCH_SUB6:
+ 	case R_LARCH_SUB8:
+ 	case R_LARCH_SUB16:
+ 	case R_LARCH_SUB24:
+ 	case R_LARCH_SUB32:
+ 	case R_LARCH_SUB64:
+-	  if (resolved_dynly)
+-	    fatal = (loongarch_reloc_is_fatal
+-		     (info, input_bfd, input_section, rel, howto,
+-		      bfd_reloc_undefined, is_undefweak, name,
+-		      "Can't be resolved dynamically.  "
+-		      "If this procedure is hand-written assembly,\n"
+-		      "there must be something like '.dword sym1 - sym2' "
+-		      "to generate these relocs\n"
+-		      "and we can't get known link-time address of "
+-		      "these symbols."));
+-	  else
+-	    relocation += rel->r_addend;
+-	  break;
++	  {
++	    bfd_vma old_value = bfd_get (howto->bitsize, input_bfd,
++					  contents + rel->r_offset);
++	    relocation = old_value - relocation - rel->r_addend;
++	    break;
++	  }
++
++	case R_LARCH_ADD_ULEB128:
++	case R_LARCH_SUB_ULEB128:
++	  {
++	    /* Get the value and length of the uleb128 data.  */
++	    unsigned int len = 0;
++	    bfd_vma old_value = _bfd_read_unsigned_leb128 (input_bfd,
++				    contents + rel->r_offset, &len);
++
++	    if (R_LARCH_ADD_ULEB128 == ELFNN_R_TYPE (rel->r_info))
++	      relocation = old_value + relocation + rel->r_addend;
++	    else if (R_LARCH_SUB_ULEB128 == ELFNN_R_TYPE (rel->r_info))
++	      relocation = old_value - relocation - rel->r_addend;
++
++	    bfd_vma mask = (1 << (7 * len)) - 1;
++	    relocation &= mask;
++	    break;
++	  }
+ 
+ 	case R_LARCH_TLS_DTPREL32:
+ 	case R_LARCH_TLS_DTPREL64:
+@@ -3086,6 +3145,15 @@ loongarch_elf_relocate_section (bfd *out
+ 
+ 	  break;
+ 
++	case R_LARCH_PCREL20_S2:
++	  unresolved_reloc = false;
++	  if (h && h->plt.offset != MINUS_ONE)
++	    relocation = sec_addr (plt) + h->plt.offset;
++	  else
++	    relocation += rel->r_addend;
++	  relocation -= pc;
++	  break;
++
+ 	case R_LARCH_PCALA_HI20:
+ 	  unresolved_reloc = false;
+ 	  if (h && h->plt.offset != MINUS_ONE)
+@@ -3111,15 +3179,15 @@ loongarch_elf_relocate_section (bfd *out
+ 	  else
+ 	    relocation += rel->r_addend;
+ 
+-	  relocation &= 0xfff;
+-	  /* Signed extend.  */
+-	  relocation = (relocation ^ 0x800) - 0x800;
+-
+ 	  /* For 2G jump, generate pcalau12i, jirl.  */
+ 	  /* If use jirl, turns to R_LARCH_B16.  */
+ 	  uint32_t insn = bfd_get (32, input_bfd, contents + rel->r_offset);
+ 	  if ((insn & 0x4c000000) == 0x4c000000)
+ 	    {
++	      relocation &= 0xfff;
++	      /* Signed extend.  */
++	      relocation = (relocation ^ 0x800) - 0x800;
++
+ 	      rel->r_info = ELFNN_R_INFO (r_symndx, R_LARCH_B16);
+ 	      howto = loongarch_elf_rtype_to_howto (input_bfd, R_LARCH_B16);
+ 	    }
+@@ -3255,13 +3323,12 @@ loongarch_elf_relocate_section (bfd *out
+ 		    + (idx * GOT_ENTRY_SIZE)
+ 		    - sec_addr (htab->elf.sgot);
+ 		}
++
+ 	      relocation = got_off + sec_addr (got);
+ 	    }
+ 
+-	  if (r_type == R_LARCH_GOT_PC_LO12)
+-	    relocation &= (bfd_vma)0xfff;
+-	  else if (r_type == R_LARCH_GOT64_PC_LO20
+-		   || r_type == R_LARCH_GOT64_PC_HI12)
++	  if (r_type == R_LARCH_GOT64_PC_HI12
++	      || r_type == R_LARCH_GOT64_PC_LO20)
+ 	    RELOCATE_CALC_PC64_HI32 (relocation, pc);
+ 
+ 	  break;
+@@ -3419,15 +3486,16 @@ loongarch_elf_relocate_section (bfd *out
+ 	  if ((tls_type & GOT_TLS_GD) && (tls_type & GOT_TLS_IE))
+ 	    relocation += 2 * GOT_ENTRY_SIZE;
+ 
+-	  if (r_type == R_LARCH_TLS_IE_PC_LO12)
+-	    relocation &= (bfd_vma)0xfff;
+-	  else if (r_type == R_LARCH_TLS_IE64_PC_LO20
+-		   || r_type == R_LARCH_TLS_IE64_PC_HI12)
++	  if (r_type == R_LARCH_TLS_IE64_PC_LO20
++	      || r_type == R_LARCH_TLS_IE64_PC_HI12)
+ 	    RELOCATE_CALC_PC64_HI32 (relocation, pc);
+ 
+ 	  break;
+ 
+ 	case R_LARCH_RELAX:
++	case R_LARCH_ALIGN:
++	  r = bfd_reloc_continue;
++	  unresolved_reloc = false;
+ 	  break;
+ 
+ 	default:
+@@ -3518,6 +3586,409 @@ loongarch_elf_relocate_section (bfd *out
+   return !fatal;
+ }
+ 
++static bool
++loongarch_relax_delete_bytes (bfd *abfd,
++			  asection *sec,
++			  bfd_vma addr,
++			  size_t count,
++			  struct bfd_link_info *link_info)
++{
++  unsigned int i, symcount;
++  bfd_vma toaddr = sec->size;
++  struct elf_link_hash_entry **sym_hashes = elf_sym_hashes (abfd);
++  Elf_Internal_Shdr *symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
++  unsigned int sec_shndx = _bfd_elf_section_from_bfd_section (abfd, sec);
++  struct bfd_elf_section_data *data = elf_section_data (sec);
++  bfd_byte *contents = data->this_hdr.contents;
++
++  /* Actually delete the bytes.  */
++  sec->size -= count;
++  memmove (contents + addr, contents + addr + count, toaddr - addr - count);
++
++  /* Adjust the location of all of the relocs.  Note that we need not
++     adjust the addends, since all PC-relative references must be against
++     symbols, which we will adjust below.  */
++  for (i = 0; i < sec->reloc_count; i++)
++    if (data->relocs[i].r_offset > addr && data->relocs[i].r_offset < toaddr)
++      data->relocs[i].r_offset -= count;
++
++  /* Adjust the local symbols defined in this section.  */
++  for (i = 0; i < symtab_hdr->sh_info; i++)
++    {
++      Elf_Internal_Sym *sym = (Elf_Internal_Sym *) symtab_hdr->contents + i;
++      if (sym->st_shndx == sec_shndx)
++	{
++	  /* If the symbol is in the range of memory we just moved, we
++	     have to adjust its value.  */
++	  if (sym->st_value > addr && sym->st_value <= toaddr)
++	    sym->st_value -= count;
++
++	  /* If the symbol *spans* the bytes we just deleted (i.e. its
++	     *end* is in the moved bytes but its *start* isn't), then we
++	     must adjust its size.
++
++	     This test needs to use the original value of st_value, otherwise
++	     we might accidentally decrease size when deleting bytes right
++	     before the symbol.  But since deleted relocs can't span across
++	     symbols, we can't have both a st_value and a st_size decrease,
++	     so it is simpler to just use an else.  */
++	  else if (sym->st_value <= addr
++		   && sym->st_value + sym->st_size > addr
++		   && sym->st_value + sym->st_size <= toaddr)
++	    sym->st_size -= count;
++	}
++    }
++
++  /* Now adjust the global symbols defined in this section.  */
++  symcount = ((symtab_hdr->sh_size / sizeof (ElfNN_External_Sym))
++	      - symtab_hdr->sh_info);
++
++  for (i = 0; i < symcount; i++)
++    {
++      struct elf_link_hash_entry *sym_hash = sym_hashes[i];
++
++      /* The '--wrap SYMBOL' option is causing a pain when the object file,
++	 containing the definition of __wrap_SYMBOL, includes a direct
++	 call to SYMBOL as well. Since both __wrap_SYMBOL and SYMBOL reference
++	 the same symbol (which is __wrap_SYMBOL), but still exist as two
++	 different symbols in 'sym_hashes', we don't want to adjust
++	 the global symbol __wrap_SYMBOL twice.
++
++	 The same problem occurs with symbols that are versioned_hidden, as
++	 foo becomes an alias for foo@BAR, and hence they need the same
++	 treatment.  */
++      if (link_info->wrap_hash != NULL
++	  || sym_hash->versioned != unversioned)
++	{
++	  struct elf_link_hash_entry **cur_sym_hashes;
++
++	  /* Loop only over the symbols which have already been checked.  */
++	  for (cur_sym_hashes = sym_hashes; cur_sym_hashes < &sym_hashes[i];
++	       cur_sym_hashes++)
++	    {
++	      /* If the current symbol is identical to 'sym_hash', that means
++		 the symbol was already adjusted (or at least checked).  */
++	      if (*cur_sym_hashes == sym_hash)
++		break;
++	    }
++	  /* Don't adjust the symbol again.  */
++	  if (cur_sym_hashes < &sym_hashes[i])
++	    continue;
++	}
++
++      if ((sym_hash->root.type == bfd_link_hash_defined
++	   || sym_hash->root.type == bfd_link_hash_defweak)
++	  && sym_hash->root.u.def.section == sec)
++	{
++	  /* As above, adjust the value if needed.  */
++	  if (sym_hash->root.u.def.value > addr
++	      && sym_hash->root.u.def.value <= toaddr)
++	    sym_hash->root.u.def.value -= count;
++
++	  /* As above, adjust the size if needed.  */
++	  else if (sym_hash->root.u.def.value <= addr
++		   && sym_hash->root.u.def.value + sym_hash->size > addr
++		   && sym_hash->root.u.def.value + sym_hash->size <= toaddr)
++	    sym_hash->size -= count;
++	}
++    }
++
++  return true;
++}
++
++/* Relax pcalau12i,addi.d => pcaddi.  */
++static bool
++loongarch_relax_pcala_addi (bfd *abfd, asection *sec,
++		       Elf_Internal_Rela *rel_hi, bfd_vma symval)
++{
++  bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;
++  Elf_Internal_Rela *rel_lo = rel_hi + 2;
++  uint32_t pca = bfd_get (32, abfd, contents + rel_hi->r_offset);
++  uint32_t add = bfd_get (32, abfd, contents + rel_lo->r_offset);
++  uint32_t rd = pca & 0x1f;
++  bfd_vma pc = sec_addr (sec) + rel_hi->r_offset;
++  const uint32_t addi_d = 0x02c00000;
++  const uint32_t pcaddi = 0x18000000;
++
++  /* Is pcalau12i + addi.d insns?  */
++  if ((ELFNN_R_TYPE (rel_lo->r_info) != R_LARCH_PCALA_LO12)
++      || (ELFNN_R_TYPE ((rel_lo + 1)->r_info) != R_LARCH_RELAX)
++      || (ELFNN_R_TYPE ((rel_hi + 1)->r_info) != R_LARCH_RELAX)
++      || (rel_hi->r_offset + 4 != rel_lo->r_offset)
++      || ((add & addi_d) != addi_d)
++      /* Is pcalau12i $rd + addi.d $rd,$rd?  */
++      || ((add & 0x1f) != rd)
++      || (((add >> 5) & 0x1f) != rd)
++      /* Can be relaxed to pcaddi?  */
++      || (symval & 0x3) /* 4 bytes align.  */
++      || ((bfd_signed_vma)(symval - pc) < (bfd_signed_vma)(int32_t)0xffe00000)
++      || ((bfd_signed_vma)(symval - pc) > (bfd_signed_vma)(int32_t)0x1ffffc))
++    return false;
++
++  pca = pcaddi | rd;
++  bfd_put (32, abfd, pca, contents + rel_hi->r_offset);
++
++  /* Adjust relocations.  */
++  rel_hi->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel_hi->r_info),
++				 R_LARCH_PCREL20_S2);
++  rel_lo->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel_hi->r_info),
++				 R_LARCH_DELETE);
++
++  return true;
++}
++
++/* Relax pcalau12i,ld.d => pcalau12i,addi.d.  */
++static bool
++loongarch_relax_pcala_ld (bfd *abfd, asection *sec,
++		Elf_Internal_Rela *rel_hi)
++{
++  bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;
++  Elf_Internal_Rela *rel_lo = rel_hi + 2;
++  uint32_t pca = bfd_get (32, abfd, contents + rel_hi->r_offset);
++  uint32_t ld = bfd_get (32, abfd, contents + rel_lo->r_offset);
++  uint32_t rd = pca & 0x1f;
++  const uint32_t ld_d = 0x28c00000;
++  uint32_t addi_d = 0x02c00000;
++
++  if ((ELFNN_R_TYPE (rel_lo->r_info) != R_LARCH_GOT_PC_LO12)
++      || (ELFNN_R_TYPE ((rel_lo + 1)->r_info) != R_LARCH_RELAX)
++      || (ELFNN_R_TYPE ((rel_hi + 1)->r_info) != R_LARCH_RELAX)
++      || (rel_hi->r_offset + 4 != rel_lo->r_offset)
++      || ((ld & 0x1f) != rd)
++      || (((ld >> 5) & 0x1f) != rd)
++      || ((ld & ld_d) != ld_d))
++    return false;
++
++  addi_d = addi_d | (rd << 5) | rd;
++  bfd_put (32, abfd, addi_d, contents + rel_lo->r_offset);
++
++  rel_hi->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel_hi->r_info),
++				 R_LARCH_PCALA_HI20);
++  rel_lo->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel_lo->r_info),
++				 R_LARCH_PCALA_LO12);
++  return true;
++}
++
++/* Called by after_allocation to set the information of data segment
++   before relaxing.  */
++
++void
++bfd_elfNN_loongarch_set_data_segment_info (struct bfd_link_info *info,
++				     int *data_segment_phase)
++{
++  struct loongarch_elf_link_hash_table *htab = loongarch_elf_hash_table (info);
++  htab->data_segment_phase = data_segment_phase;
++}
++
++/* Implement R_LARCH_ALIGN by deleting excess alignment NOPs.
++   Once we've handled an R_LARCH_ALIGN, we can't relax anything else.  */
++static bool
++loongarch_relax_align (bfd *abfd, asection *sec,
++			asection *sym_sec,
++			struct bfd_link_info *link_info,
++			Elf_Internal_Rela *rel,
++			bfd_vma symval)
++{
++  bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;
++  bfd_vma alignment = 1, pos;
++  while (alignment <= rel->r_addend)
++    alignment *= 2;
++
++  symval -= rel->r_addend;
++  bfd_vma aligned_addr = ((symval - 1) & ~(alignment - 1)) + alignment;
++  bfd_vma nop_bytes = aligned_addr - symval;
++
++  /* Once we've handled an R_LARCH_ALIGN, we can't relax anything else.  */
++  sec->sec_flg0 = true;
++
++  /* Make sure there are enough NOPs to actually achieve the alignment.  */
++  if (rel->r_addend < nop_bytes)
++    {
++      _bfd_error_handler
++	(_("%pB(%pA+%#" PRIx64 "): %" PRId64 " bytes required for alignment "
++	   "to %" PRId64 "-byte boundary, but only %" PRId64 " present"),
++	 abfd, sym_sec, (uint64_t) rel->r_offset,
++	 (int64_t) nop_bytes, (int64_t) alignment, (int64_t) rel->r_addend);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
++    }
++
++  /* Delete the reloc.  */
++  rel->r_info = ELFNN_R_INFO (0, R_LARCH_NONE);
++
++  /* If the number of NOPs is already correct, there's nothing to do.  */
++  if (nop_bytes == rel->r_addend)
++    return true;
++
++  /* Write as many LOONGARCH NOPs as we need.  */
++  for (pos = 0; pos < (nop_bytes & -4); pos += 4)
++    bfd_putl32 (LARCH_NOP, contents + rel->r_offset + pos);
++
++  /* Delete the excess NOPs.  */
++  return loongarch_relax_delete_bytes (abfd, sec, rel->r_offset + nop_bytes,
++				   rel->r_addend - nop_bytes, link_info);
++}
++
++static bool
++loongarch_elf_relax_section (bfd *abfd, asection *sec,
++			       struct bfd_link_info *info,
++			       bool *again)
++{
++  struct loongarch_elf_link_hash_table *htab = loongarch_elf_hash_table (info);
++  Elf_Internal_Shdr *symtab_hdr = &elf_symtab_hdr (abfd);
++  struct bfd_elf_section_data *data = elf_section_data (sec);
++  Elf_Internal_Rela *relocs;
++  *again = false;
++
++  if (bfd_link_relocatable (info)
++      || sec->sec_flg0
++      || (sec->flags & SEC_RELOC) == 0
++      || sec->reloc_count == 0
++      || elf_seg_map (info->output_bfd) == NULL
++      || (info->disable_target_specific_optimizations
++	  && info->relax_pass == 0)
++      /* The exp_seg_relro_adjust is enum phase_enum (0x4),
++	 and defined in ld/ldexp.h.  */
++      || *(htab->data_segment_phase) == 4)
++    return true;
++
++  if (data->relocs)
++    relocs = data->relocs;
++  else if (!(relocs = _bfd_elf_link_read_relocs (abfd, sec, NULL, NULL,
++						 info->keep_memory)))
++    return true;
++
++  if (!data->this_hdr.contents
++      && !bfd_malloc_and_get_section (abfd, sec, &data->this_hdr.contents))
++    return true;
++
++  if (symtab_hdr->sh_info != 0
++      && !symtab_hdr->contents
++      && !(symtab_hdr->contents =
++	   (unsigned char *) bfd_elf_get_elf_syms (abfd, symtab_hdr,
++						   symtab_hdr->sh_info,
++						   0, NULL, NULL, NULL)))
++    return true;
++
++      data->relocs = relocs;
++
++  for (unsigned int i = 0; i < sec->reloc_count; i++)
++    {
++      Elf_Internal_Rela *rel = relocs + i;
++      asection *sym_sec;
++      bfd_vma symval;
++      unsigned long r_symndx = ELFNN_R_SYM (rel->r_info);
++      bool local_got = false;
++      char symtype;
++      struct elf_link_hash_entry *h = NULL;
++
++      if (r_symndx < symtab_hdr->sh_info)
++	{
++	  Elf_Internal_Sym *sym = (Elf_Internal_Sym *)symtab_hdr->contents
++				    + r_symndx;
++	  if (ELF_ST_TYPE (sym->st_info) == STT_GNU_IFUNC)
++	    continue;
++
++	  if (sym->st_shndx == SHN_UNDEF)
++	    {
++	      sym_sec = sec;
++	      symval = rel->r_offset;
++	    }
++	  else
++	    {
++	      sym_sec = elf_elfsections (abfd)[sym->st_shndx]->bfd_section;
++	      symval = sym->st_value;
++	    }
++	  symtype = ELF_ST_TYPE (sym->st_info);
++	}
++      else
++	{
++	  r_symndx = ELFNN_R_SYM (rel->r_info) - symtab_hdr->sh_info;
++	  h = elf_sym_hashes (abfd)[r_symndx];
++
++	  while (h->root.type == bfd_link_hash_indirect
++		 || h->root.type == bfd_link_hash_warning)
++	    h = (struct elf_link_hash_entry *) h->root.u.i.link;
++
++	  /* Disable the relaxation for ifunc.  */
++	  if (h != NULL && h->type == STT_GNU_IFUNC)
++	    continue;
++
++	  if ((h->root.type == bfd_link_hash_defined
++		    || h->root.type == bfd_link_hash_defweak)
++		   && h->root.u.def.section != NULL
++		   && h->root.u.def.section->output_section != NULL)
++	    {
++	      symval = h->root.u.def.value;
++	      sym_sec = h->root.u.def.section;
++	    }
++	  else
++	    continue;
++
++	  if (h && bfd_link_executable (info)
++	      && SYMBOL_REFERENCES_LOCAL (info, h))
++	    local_got = true;
++	  symtype = h->type;
++	}
++
++      if (sym_sec->sec_info_type == SEC_INFO_TYPE_MERGE
++	   && (sym_sec->flags & SEC_MERGE))
++	{
++	   if (symtype == STT_SECTION)
++	     symval += rel->r_addend;
++
++	   symval = _bfd_merged_section_offset (abfd, &sym_sec,
++				elf_section_data (sym_sec)->sec_info,
++				symval);
++
++	   if (symtype != STT_SECTION)
++	     symval += rel->r_addend;
++	}
++      else
++	symval += rel->r_addend;
++
++      symval += sec_addr (sym_sec);
++
++      switch (ELFNN_R_TYPE (rel->r_info))
++	{
++	case R_LARCH_ALIGN:
++	  if (2 == info->relax_pass)
++	    loongarch_relax_align (abfd, sec, sym_sec, info, rel, symval);
++	  break;
++	case R_LARCH_DELETE:
++	  if (info->relax_pass == 1)
++	    {
++	      loongarch_relax_delete_bytes (abfd, sec, rel->r_offset, 4, info);
++	      rel->r_info = ELFNN_R_INFO (0, R_LARCH_NONE);
++	    }
++	  break;
++	case R_LARCH_PCALA_HI20:
++	  if (info->relax_pass == 0)
++	    {
++	      if (i + 4 > sec->reloc_count)
++		break;
++	      loongarch_relax_pcala_addi (abfd, sec, rel, symval);
++	    }
++	  break;
++	case R_LARCH_GOT_PC_HI20:
++	  if (local_got)
++	    {
++	      if (i + 4 > sec->reloc_count)
++		break;
++	      if (loongarch_relax_pcala_ld (abfd, sec, rel))
++		{
++		  loongarch_relax_pcala_addi (abfd, sec, rel, symval);
++		}
++	    }
++	  break;
++	default:
++	  break;
++	}
++    }
++
++  return true;
++}
++
+ /* Finish up dynamic symbol handling.  We set the contents of various
+    dynamic sections here.  */
+ 
+@@ -4151,5 +4622,6 @@ elf_loongarch64_hash_symbol (struct elf_
+ #define elf_backend_grok_prstatus loongarch_elf_grok_prstatus
+ #define elf_backend_grok_psinfo loongarch_elf_grok_psinfo
+ #define elf_backend_hash_symbol elf_loongarch64_hash_symbol
++#define bfd_elfNN_bfd_relax_section loongarch_elf_relax_section
+ 
+ #include "elfNN-target.h"
+--- binutils-2.40.50.20230510.orig/bfd/elfxx-loongarch.c
++++ binutils-2.40.50.20230510/bfd/elfxx-loongarch.c
+@@ -34,7 +34,7 @@ typedef struct loongarch_reloc_howto_typ
+   /* The first must be reloc_howto_type!  */
+   reloc_howto_type howto;
+   bfd_reloc_code_real_type bfd_type;
+-  bool (*adjust_reloc_bits)(reloc_howto_type *, bfd_vma *);
++  bool (*adjust_reloc_bits)(bfd *, reloc_howto_type *, bfd_vma *);
+   const char *larch_reloc_type_name;
+ } loongarch_reloc_howto_type;
+ 
+@@ -52,13 +52,23 @@ typedef struct loongarch_reloc_howto_typ
+   { EMPTY_HOWTO (C), BFD_RELOC_NONE, NULL, NULL }
+ 
+ static bool
+-reloc_bits (reloc_howto_type *howto, bfd_vma *val);
++reloc_bits (bfd *abfd, reloc_howto_type *howto, bfd_vma *val);
+ static bool
+-reloc_bits_b16 (reloc_howto_type *howto, bfd_vma *fix_val);
++reloc_bits_pcrel20_s2 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val);
+ static bool
+-reloc_bits_b21 (reloc_howto_type *howto, bfd_vma *fix_val);
++reloc_bits_b16 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val);
+ static bool
+-reloc_bits_b26 (reloc_howto_type *howto, bfd_vma *val);
++reloc_bits_b21 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val);
++static bool
++reloc_bits_b26 (bfd *abfd, reloc_howto_type *howto, bfd_vma *val);
++
++static bfd_reloc_status_type
++loongarch_elf_add_sub_reloc (bfd *, arelent *, asymbol *, void *,
++			      asection *, bfd *, char **);
++
++static bfd_reloc_status_type
++loongarch_elf_add_sub_reloc_uleb128 (bfd *, arelent *, asymbol *, void *,
++				      asection *, bfd *, char **);
+ 
+ /* This does not include any relocation information, but should be
+    good enough for GDB or objdump to read the file.  */
+@@ -521,175 +531,185 @@ static loongarch_reloc_howto_type loonga
+ 	 reloc_bits,				/* adjust_reloc_bits */
+ 	 NULL),					/* larch_reloc_type_name */
+ 
++  /* 8-bit in-place addition, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_ADD8,		/* type (47).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 1,					/* size.  */
+ 	 8,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_ADD8",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_ADD8,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xff,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD8,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 16-bit in-place addition, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_ADD16,		/* type (48).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 2,					/* size.  */
+ 	 16,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_ADD16",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_ADD16,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD16,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 24-bit in-place addition, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_ADD24,		/* type (49).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 3,					/* size.  */
+ 	 24,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_ADD24",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_ADD24,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD24,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 32-bit in-place addition, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_ADD32,		/* type (50).  */
+ 	 0,					/* rightshift.  */
+ 	 4,					/* size.  */
+ 	 32,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_ADD32",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_ADD32,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffffffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD32,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 64-bit in-place addition, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_ADD64,		/* type (51).  */
+ 	 0,					/* rightshift.  */
+ 	 8,					/* size.  */
+ 	 64,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_ADD64",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_ADD64,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 ALL_ONES,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD64,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 8-bit in-place subtraction, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_SUB8,		/* type (52).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 1,					/* size.  */
+ 	 8,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_SUB8",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_SUB8,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xff,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB8,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 16-bit in-place subtraction, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_SUB16,		/* type (53).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 2,					/* size.  */
+ 	 16,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_SUB16",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_SUB16,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB16,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 24-bit in-place subtraction, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_SUB24,		/* type (54).  */
+ 	 0,					/* rightshift.  */
+-	 4,					/* size.  */
++	 3,					/* size.  */
+ 	 24,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_SUB24",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_SUB24,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB24,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 32-bit in-place subtraction, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_SUB32,		/* type (55).  */
+ 	 0,					/* rightshift.  */
+ 	 4,					/* size.  */
+ 	 32,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_SUB32",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_SUB32,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0xffffffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB32,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
++  /* 64-bit in-place subtraction, for local label subtraction.  */
+   LOONGARCH_HOWTO (R_LARCH_SUB64,		/* type (56).  */
+ 	 0,					/* rightshift.  */
+ 	 8,					/* size.  */
+ 	 64,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
+-	 bfd_elf_generic_reloc,			/* special_function.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
+ 	 "R_LARCH_SUB64",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 ALL_ONES,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_SUB64,			/* bfd_reloc_code_real_type */
+-	 NULL,					/* adjust_reloc_bits */
+-	 NULL),					/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 ALL_ONES,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB64,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
+ 
+   LOONGARCH_HOWTO (R_LARCH_GNU_VTINHERIT,	/* type (57).  */
+ 	 0,					/* rightshift.  */
+@@ -742,12 +762,12 @@ static loongarch_reloc_howto_type loonga
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_B16",				/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0x3fffc00,				/* src_mask */
+-	 0x3fffc00,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_B16,			/* bfd_reloc_code_real_type */
+-	 reloc_bits_b16,			/* adjust_reloc_bits */
+-	 "b16"),				/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0x3fffc00,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_B16,			/* bfd_reloc_code_real_type.  */
++	 reloc_bits_b16,			/* adjust_reloc_bits.  */
++	 "b16"),				/* larch_reloc_type_name.  */
+ 
+   LOONGARCH_HOWTO (R_LARCH_B21,			/* type (65).  */
+ 	 2,					/* rightshift.  */
+@@ -759,12 +779,12 @@ static loongarch_reloc_howto_type loonga
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_B21",				/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0xfc0003e0,				/* src_mask */
+-	 0xfc0003e0,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_B21,			/* bfd_reloc_code_real_type */
+-	 reloc_bits_b21,			/* adjust_reloc_bits */
+-	 "b21"),				/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0x3fffc1f,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_B21,			/* bfd_reloc_code_real_type.  */
++	 reloc_bits_b21,			/* adjust_reloc_bits.  */
++	 "b21"),				/* larch_reloc_type_name.  */
+ 
+   LOONGARCH_HOWTO (R_LARCH_B26,			/* type (66).  */
+ 	 2,					/* rightshift.  */
+@@ -776,12 +796,12 @@ static loongarch_reloc_howto_type loonga
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_B26",				/* name.  */
+ 	 false,					/* partial_inplace.  */
+-	 0,					/* src_mask */
+-	 0x03ffffff,				/* dst_mask */
+-	 false,					/* pcrel_offset */
+-	 BFD_RELOC_LARCH_B26,			/* bfd_reloc_code_real_type */
+-	 reloc_bits_b26,			/* adjust_reloc_bits */
+-	 "b26"),				/* larch_reloc_type_name */
++	 0,					/* src_mask.  */
++	 0x03ffffff,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_B26,			/* bfd_reloc_code_real_type.  */
++	 reloc_bits_b26,			/* adjust_reloc_bits.  */
++	 "b26"),				/* larch_reloc_type_name.  */
+ 
+   LOONGARCH_HOWTO (R_LARCH_ABS_HI20,		/* type (67).  */
+ 	 12,					/* rightshift.  */
+@@ -1078,7 +1098,7 @@ static loongarch_reloc_howto_type loonga
+ 	 12,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 10,					/* bitpos.  */
+-	 complain_overflow_signed,		/* complain_on_overflow.  */
++	 complain_overflow_unsigned,		/* complain_on_overflow.  */
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_TLS_LE_LO12",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+@@ -1146,7 +1166,7 @@ static loongarch_reloc_howto_type loonga
+ 	 12,					/* bitsize.  */
+ 	 false,					/* pc_relative.  */
+ 	 10,					/* bitpos.  */
+-	 complain_overflow_unsigned,		/* complain_on_overflow.  */
++	 complain_overflow_signed,		/* complain_on_overflow.  */
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_TLS_IE_PC_LO12",		/* name.  */
+ 	 false,					/* partial_inplace.  */
+@@ -1191,7 +1211,7 @@ static loongarch_reloc_howto_type loonga
+ 	 reloc_bits,				/* adjust_reloc_bits */
+ 	 "ie64_pc_hi12"),			/* larch_reloc_type_name */
+ 
+-  LOONGARCH_HOWTO (R_LARCH_TLS_IE_HI20,	/* type (91).  */
++  LOONGARCH_HOWTO (R_LARCH_TLS_IE_HI20,		/* type (91).  */
+ 	 12,					/* rightshift.  */
+ 	 4,					/* size.  */
+ 	 20,					/* bitsize.  */
+@@ -1327,13 +1347,14 @@ static loongarch_reloc_howto_type loonga
+ 	 reloc_bits,				/* adjust_reloc_bits */
+ 	 "gd_hi20"),				/* larch_reloc_type_name */
+ 
++  /* 32-bit PC relative.  */
+   LOONGARCH_HOWTO (R_LARCH_32_PCREL,		/* type (99).  */
+ 	 0,					/* rightshift.  */
+ 	 4,					/* size.  */
+ 	 32,					/* bitsize.  */
+ 	 true,					/* pc_relative.  */
+ 	 0,					/* bitpos.  */
+-	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 complain_overflow_signed,		/* complain_on_overflow.  */
+ 	 bfd_elf_generic_reloc,			/* special_function.  */
+ 	 "R_LARCH_32_PCREL",			/* name.  */
+ 	 false,					/* partial_inplace.  */
+@@ -1344,6 +1365,7 @@ static loongarch_reloc_howto_type loonga
+ 	 NULL,					/* adjust_reloc_bits */
+ 	 NULL),					/* larch_reloc_type_name */
+ 
++  /* The paired relocation may be relaxed.  */
+   LOONGARCH_HOWTO (R_LARCH_RELAX,		/* type (100).  */
+ 	 0,					/* rightshift */
+ 	 1,					/* size */
+@@ -1361,6 +1383,158 @@ static loongarch_reloc_howto_type loonga
+ 	 NULL,					/* adjust_reloc_bits */
+ 	 NULL),					/* larch_reloc_type_name */
+ 
++  /* Delete relaxed instruction.  */
++  LOONGARCH_HOWTO (R_LARCH_DELETE,		/* type (101).  */
++	 0,					/* rightshift.  */
++	 0,					/* size.  */
++	 0,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 bfd_elf_generic_reloc,			/* special_function.  */
++	 "R_LARCH_DELETE",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_DELETE,		/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* Indicates an alignment statement.  The addend field encodes how many
++     bytes of NOPs follow the statement.  The desired alignment is the
++     addend rounded up to the next power of two.  */
++  LOONGARCH_HOWTO (R_LARCH_ALIGN,		/* type (102).  */
++	 0,					/* rightshift.  */
++	 0,					/* size.  */
++	 0,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 bfd_elf_generic_reloc,			/* special_function.  */
++	 "R_LARCH_ALIGN",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ALIGN,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* pcala_hi20 + pcala_lo12 relaxed to pcrel20_s2.  */
++  LOONGARCH_HOWTO (R_LARCH_PCREL20_S2,		/* type (103).  */
++	 2,					/* rightshift.  */
++	 4,					/* size.  */
++	 20,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 5,					/* bitpos.  */
++	 complain_overflow_signed,		/* complain_on_overflow.  */
++	 bfd_elf_generic_reloc,			/* special_function.  */
++	 "R_LARCH_PCREL20_S2",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0x1ffffe0,				/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_PCREL20_S2,		/* bfd_reloc_code_real_type.  */
++	 reloc_bits_pcrel20_s2,			/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* Canonical Frame Address.  */
++  LOONGARCH_HOWTO (R_LARCH_CFA,			/* type (104).  */
++	 0,					/* rightshift.  */
++	 0,					/* size.  */
++	 0,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 bfd_elf_generic_reloc,			/* special_function.  */
++	 "R_LARCH_CFA",				/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_CFA,			/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* 6-bit in-place addition, for local label subtraction
++     to calculate DW_CFA_advance_loc.  */
++  LOONGARCH_HOWTO (R_LARCH_ADD6,		/* type (105).  */
++	 0,					/* rightshift.  */
++	 1,					/* size.  */
++	 8,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
++	 "R_LARCH_ADD6",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0x3f,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD6,			/* bfd_reloc_code_real_type.  */
++	 reloc_bits,				/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* 6-bit in-place subtraction, for local label subtraction
++     to calculate DW_CFA_advance_loc.  */
++  LOONGARCH_HOWTO (R_LARCH_SUB6,		/* type (106).  */
++	 0,					/* rightshift.  */
++	 1,					/* size.  */
++	 8,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc,		/* special_function.  */
++	 "R_LARCH_SUB6",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0x3f,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB6,			/* bfd_reloc_code_real_type.  */
++	 reloc_bits,				/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* The length of unsigned-leb128 is variable, just assume the
++     size is one byte here.
++     uleb128 in-place addition, for local label subtraction.  */
++  LOONGARCH_HOWTO (R_LARCH_ADD_ULEB128,		/* type (107).  */
++	 0,					/* rightshift.  */
++	 1,					/* size.  */
++	 0,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc_uleb128,	/* special_function.  */
++	 "R_LARCH_ADD_ULEB128",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_ADD_ULEB128,		/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
++  /* The length of unsigned-leb128 is variable, just assume the
++     size is one byte here.
++     uleb128 in-place subtraction, for local label subtraction.  */
++  LOONGARCH_HOWTO (R_LARCH_SUB_ULEB128,		/* type (108).  */
++	 0,					/* rightshift.  */
++	 1,					/* size.  */
++	 0,					/* bitsize.  */
++	 false,					/* pc_relative.  */
++	 0,					/* bitpos.  */
++	 complain_overflow_dont,		/* complain_on_overflow.  */
++	 loongarch_elf_add_sub_reloc_uleb128,	/* special_function.  */
++	 "R_LARCH_SUB_ULEB128",			/* name.  */
++	 false,					/* partial_inplace.  */
++	 0,					/* src_mask.  */
++	 0,					/* dst_mask.  */
++	 false,					/* pcrel_offset.  */
++	 BFD_RELOC_LARCH_SUB_ULEB128,		/* bfd_reloc_code_real_type.  */
++	 NULL,					/* adjust_reloc_bits.  */
++	 NULL),					/* larch_reloc_type_name.  */
++
+ };
+ 
+ reloc_howto_type *
+@@ -1464,13 +1638,19 @@ loongarch_larch_reloc_name_lookup (bfd *
+    BFD_RELOC_LARCH_SOP_POP_32_S_10_16
+    BFD_RELOC_LARCH_SOP_POP_32_S_5_20
+    BFD_RELOC_LARCH_SOP_POP_32_U.  */
++
+ static bool
+-reloc_bits (reloc_howto_type *howto, bfd_vma *fix_val)
++reloc_bits (bfd *abfd ATTRIBUTE_UNUSED,
++	    reloc_howto_type *howto,
++	    bfd_vma *fix_val)
+ {
+-  bfd_signed_vma val = ((bfd_signed_vma)(*fix_val)) >> howto->rightshift;
++  bfd_signed_vma val = (bfd_signed_vma)(*fix_val);
++  bfd_signed_vma mask = ((bfd_signed_vma)0x1 << howto->bitsize) - 1;
++
++  val = val >> howto->rightshift;
+ 
+   /* Perform insn bits field.  */
+-  val = val & (((bfd_vma)0x1 << howto->bitsize) - 1);
++  val = val & mask;
+   val <<= howto->bitpos;
+ 
+   *fix_val = (bfd_vma)val;
+@@ -1478,42 +1658,70 @@ reloc_bits (reloc_howto_type *howto, bfd
+   return true;
+ }
+ 
++static bool
++reloc_bits_pcrel20_s2 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val)
++{
++  bfd_signed_vma val = (bfd_signed_vma)(*fix_val);
++  bfd_signed_vma mask = ((bfd_signed_vma)0x1 << howto->bitsize) - 1;
++
++  /* Check rightshift.  */
++  if (howto->rightshift
++      && (val & ((((bfd_signed_vma) 1) << howto->rightshift) - 1)))
++    {
++      (*_bfd_error_handler) (_("%pB: relocation %s right shift %d error 0x%lx"),
++			     abfd, howto->name, howto->rightshift, val);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
++    }
++
++  val = val >> howto->rightshift;
++
++  if ((val & ~mask) && ((val & ~mask) != ~mask))
++    {
++      (*_bfd_error_handler) (_("%pB: relocation %s overflow 0x%lx"),
++			     abfd, howto->name, val);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
++    }
++
++  /* Perform insn bits field.  */
++  val = val & mask;
++  val <<= howto->bitpos;
++
++  *fix_val = (bfd_vma)val;
++
++  return true;
++}
++
++
+ /* Adjust val to perform insn
+    R_LARCH_SOP_POP_32_S_10_16_S2
+    R_LARCH_B16.  */
+ static bool
+-reloc_bits_b16 (reloc_howto_type *howto, bfd_vma *fix_val)
++reloc_bits_b16 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val)
+ {
++  bfd_signed_vma val = *fix_val;
++  bfd_signed_vma mask = ((bfd_signed_vma)0x1 << howto->bitsize) - 1;
++
+   if (howto->complain_on_overflow != complain_overflow_signed)
+     return false;
+ 
+-  bfd_signed_vma val = *fix_val;
+-
+   /* Judge whether 4 bytes align.  */
+   if (val & ((0x1UL << howto->rightshift) - 1))
+     return false;
+ 
+-  int bitsize = howto->bitsize + howto->rightshift;
+-  bfd_signed_vma sig_bit = (val >> (bitsize - 1)) & 0x1;
++  val = val >> howto->rightshift;
+ 
+-  /* If val < 0, sign bit is 1.  */
+-  if (sig_bit)
++  if ((val & ~mask) && ((val & ~mask) != ~mask))
+     {
+-      /* Signed bits is 1.  */
+-      if ((LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1) & val)
+-	  != LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1))
+-	return false;
+-    }
+-  else
+-    {
+-      /* Signed bits is 0.  */
+-      if (LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize) & val)
+-	return false;
++      (*_bfd_error_handler) (_("%pB: relocation %s overflow 0x%lx"),
++			     abfd, howto->name, val);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
+     }
+ 
+   /* Perform insn bits field.  */
+-  val >>= howto->rightshift;
+-  val = val & (((bfd_vma)0x1 << howto->bitsize) - 1);
++  val = val & mask;
+   val <<= howto->bitpos;
+ 
+   *fix_val = val;
+@@ -1525,36 +1733,30 @@ reloc_bits_b16 (reloc_howto_type *howto,
+    R_LARCH_SOP_POP_32_S_0_5_10_16_S2
+    R_LARCH_B21.  */
+ static bool
+-reloc_bits_b21 (reloc_howto_type *howto,
+-		bfd_vma *fix_val)
++reloc_bits_b21 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val)
+ {
++  bfd_signed_vma val = *fix_val;
++  bfd_signed_vma mask = ((bfd_signed_vma)0x1 << howto->bitsize) - 1;
++
+   if (howto->complain_on_overflow != complain_overflow_signed)
+     return false;
+ 
+-  bfd_signed_vma val = *fix_val;
+-
++  /* Judge whether 4 bytes align.  */
+   if (val & ((0x1UL << howto->rightshift) - 1))
+     return false;
+ 
+-  int bitsize = howto->bitsize + howto->rightshift;
+-  bfd_signed_vma sig_bit = (val >> (bitsize - 1)) & 0x1;
++  val = val >> howto->rightshift;
+ 
+-  /* If val < 0.  */
+-  if (sig_bit)
++  if ((val & ~mask) && ((val & ~mask) != ~mask))
+     {
+-      if ((LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1) & val)
+-	  != LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1))
+-	return false;
+-    }
+-  else
+-    {
+-      if (LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize) & val)
+-	return false;
++      (*_bfd_error_handler) (_("%pB: relocation %s overflow 0x%lx"),
++			     abfd, howto->name, val);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
+     }
+ 
+   /* Perform insn bits field.  */
+-  val >>= howto->rightshift;
+-  val = val & (((bfd_vma)0x1 << howto->bitsize) - 1);
++  val = val & mask;
+ 
+   /* Perform insn bits field.  15:0<<10, 20:16>>16.  */
+   val = ((val & 0xffff) << 10) | ((val >> 16) & 0x1f);
+@@ -1568,37 +1770,31 @@ reloc_bits_b21 (reloc_howto_type *howto,
+    R_LARCH_SOP_POP_32_S_0_10_10_16_S2
+    R_LARCH_B26.  */
+ static bool
+-reloc_bits_b26 (reloc_howto_type *howto,
+-		bfd_vma *fix_val)
++reloc_bits_b26 (bfd *abfd, reloc_howto_type *howto, bfd_vma *fix_val)
+ {
+-  /* Return false if overflow.  */
++  bfd_signed_vma val = *fix_val;
++  bfd_signed_vma mask = ((bfd_signed_vma)0x1 << howto->bitsize) - 1;
++
+   if (howto->complain_on_overflow != complain_overflow_signed)
+     return false;
+ 
+-  bfd_signed_vma val = *fix_val;
+-
++  /* Judge whether 4 bytes align.  */
+   if (val & ((0x1UL << howto->rightshift) - 1))
+     return false;
+ 
+-  int bitsize = howto->bitsize + howto->rightshift;
+-  bfd_signed_vma sig_bit = (val >> (bitsize - 1)) & 0x1;
++  val = val >> howto->rightshift;
+ 
+-  /* If val < 0.  */
+-  if (sig_bit)
++  if ((val & ~mask) && ((val & ~mask) != ~mask))
+     {
+-      if ((LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1) & val)
+-	  != LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize - 1))
+-	return false;
+-    }
+-  else
+-    {
+-      if (LARCH_RELOC_BFD_VMA_BIT_MASK (bitsize) & val)
+-	return false;
++      (*_bfd_error_handler) (_("%pB: relocation %s overflow 0x%lx"),
++			     abfd, howto->name, val);
++      bfd_set_error (bfd_error_bad_value);
++      return false;
+     }
+ 
++
+   /* Perform insn bits field.  */
+-  val >>= howto->rightshift;
+-  val = val & (((bfd_vma)0x1 << howto->bitsize) - 1);
++  val = val & mask;
+ 
+   /* Perform insn bits field.  25:16>>16, 15:0<<10.  */
+   val = ((val & 0xffff) << 10) | ((val >> 16) & 0x3ff);
+@@ -1609,10 +1805,142 @@ reloc_bits_b26 (reloc_howto_type *howto,
+ }
+ 
+ bool
+-loongarch_adjust_reloc_bitsfield (reloc_howto_type *howto,
++loongarch_adjust_reloc_bitsfield (bfd *abfd, reloc_howto_type *howto,
+ 				  bfd_vma *fix_val)
+ {
+   BFD_ASSERT (((loongarch_reloc_howto_type *)howto)->adjust_reloc_bits);
+   return ((loongarch_reloc_howto_type *)
+-	  howto)->adjust_reloc_bits(howto, fix_val);
++	  howto)->adjust_reloc_bits (abfd, howto, fix_val);
++}
++
++static bfd_reloc_status_type
++loongarch_elf_add_sub_reloc (bfd *abfd,
++	       arelent *reloc_entry,
++	       asymbol *symbol,
++	       void *data,
++	       asection *input_section,
++	       bfd *output_bfd,
++	       char **error_message ATTRIBUTE_UNUSED)
++{
++  reloc_howto_type *howto = reloc_entry->howto;
++  bfd_vma relocation;
++
++  if (output_bfd != NULL
++      && (symbol->flags & BSF_SECTION_SYM) == 0
++      && (!reloc_entry->howto->partial_inplace || reloc_entry->addend == 0))
++    {
++      reloc_entry->address += input_section->output_offset;
++      return bfd_reloc_ok;
++    }
++
++  if (output_bfd != NULL)
++    return bfd_reloc_continue;
++
++  relocation = symbol->value + symbol->section->output_section->vma
++    + symbol->section->output_offset + reloc_entry->addend;
++
++  bfd_size_type octets = reloc_entry->address
++    * bfd_octets_per_byte (abfd, input_section);
++  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,
++				  input_section, octets))
++    return bfd_reloc_outofrange;
++
++  bfd_vma old_value = bfd_get (howto->bitsize, abfd,
++			       data + reloc_entry->address);
++
++  switch (howto->type)
++    {
++    case R_LARCH_ADD6:
++    case R_LARCH_ADD8:
++    case R_LARCH_ADD16:
++    case R_LARCH_ADD32:
++    case R_LARCH_ADD64:
++      relocation = old_value + relocation;
++      break;
++
++    case R_LARCH_SUB6:
++    case R_LARCH_SUB8:
++    case R_LARCH_SUB16:
++    case R_LARCH_SUB32:
++    case R_LARCH_SUB64:
++      relocation = old_value - relocation;
++      break;
++    }
++
++  bfd_put (howto->bitsize, abfd, relocation, data + reloc_entry->address);
++
++  return bfd_reloc_ok;
++}
++
++static bfd_reloc_status_type
++loongarch_elf_add_sub_reloc_uleb128 (bfd *abfd,
++	       arelent *reloc_entry,
++	       asymbol *symbol,
++	       void *data,
++	       asection *input_section,
++	       bfd *output_bfd,
++	       char **error_message ATTRIBUTE_UNUSED)
++{
++  reloc_howto_type *howto = reloc_entry->howto;
++  bfd_vma relocation;
++
++ if (output_bfd != NULL
++     && (symbol->flags & BSF_SECTION_SYM) == 0
++     && (!reloc_entry->howto->partial_inplace || reloc_entry->addend == 0))
++   {
++     reloc_entry->address += input_section->output_offset;
++     return bfd_reloc_ok;
++   }
++
++  if (output_bfd != NULL)
++    return bfd_reloc_continue;
++
++  relocation = symbol->value + symbol->section->output_section->vma
++    + symbol->section->output_offset + reloc_entry->addend;
++
++  bfd_size_type octets = reloc_entry->address
++    * bfd_octets_per_byte (abfd, input_section);
++  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,
++				  input_section, octets))
++    return bfd_reloc_outofrange;
++
++  unsigned int len = 0;
++  bfd_byte *p = data + reloc_entry->address;
++  bfd_vma old_value = _bfd_read_unsigned_leb128 (abfd, p, &len);
++
++  switch (howto->type)
++    {
++    case R_LARCH_ADD_ULEB128:
++      relocation = old_value + relocation;
++      break;
++
++    case R_LARCH_SUB_ULEB128:
++      relocation = old_value - relocation;
++      break;
++    }
++
++  bfd_vma mask = (1 << (7 * len)) - 1;
++  relocation = relocation & mask;
++  loongarch_write_unsigned_leb128 (p, len, relocation);
++  return bfd_reloc_ok;
++}
++
++/* Write VALUE in uleb128 format to P.
++   LEN is the uleb128 value length.
++   Return a pointer to the byte following the last byte that was written.  */
++bfd_byte *
++loongarch_write_unsigned_leb128 (bfd_byte *p, unsigned int len, bfd_vma value)
++{
++  bfd_byte c;
++  do
++    {
++      c = value & 0x7f;
++      if (len > 1)
++	c |= 0x80;
++      *(p++) = c;
++      value >>= 7;
++      len--;
++    }
++  while (len);
++  return p;
+ }
+--- binutils-2.40.50.20230510.orig/bfd/elfxx-loongarch.h
++++ binutils-2.40.50.20230510/bfd/elfxx-loongarch.h
+@@ -34,7 +34,15 @@ extern bfd_reloc_code_real_type
+ loongarch_larch_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
+ 				   const char *l_r_name);
+ 
+-bool loongarch_adjust_reloc_bitsfield (reloc_howto_type *howto, bfd_vma *fix_val);
++bool
++loongarch_adjust_reloc_bitsfield (bfd *, reloc_howto_type *, bfd_vma *);
++void
++bfd_elf32_loongarch_set_data_segment_info (struct bfd_link_info *, int *);
++void
++bfd_elf64_loongarch_set_data_segment_info (struct bfd_link_info *, int *);
++
++bfd_byte *
++loongarch_write_unsigned_leb128 (bfd_byte *p, unsigned int len, bfd_vma value);
+ 
+ /* TRUE if this is a PLT reference to a local IFUNC.  */
+ #define PLT_LOCAL_IFUNC_P(INFO, H) \
+--- binutils-2.40.50.20230510.orig/bfd/libbfd.h
++++ binutils-2.40.50.20230510/bfd/libbfd.h
+@@ -3507,6 +3507,14 @@ static const char *const bfd_reloc_code_
+   "BFD_RELOC_LARCH_TLS_GD_HI20",
+   "BFD_RELOC_LARCH_32_PCREL",
+   "BFD_RELOC_LARCH_RELAX",
++  "BFD_RELOC_LARCH_DELETE",
++  "BFD_RELOC_LARCH_ALIGN",
++  "BFD_RELOC_LARCH_PCREL20_S2",
++  "BFD_RELOC_LARCH_CFA",
++  "BFD_RELOC_LARCH_ADD6",
++  "BFD_RELOC_LARCH_SUB6",
++  "BFD_RELOC_LARCH_ADD_ULEB128",
++  "BFD_RELOC_LARCH_SUB_ULEB128",
+  "@@overflow: BFD_RELOC_UNUSED@@",
+ };
+ #endif
+--- binutils-2.40.50.20230510.orig/bfd/reloc.c
++++ binutils-2.40.50.20230510/bfd/reloc.c
+@@ -8127,6 +8127,28 @@ ENUMX
+ ENUMX
+   BFD_RELOC_LARCH_RELAX
+ 
++ENUMX
++  BFD_RELOC_LARCH_DELETE
++
++ENUMX
++  BFD_RELOC_LARCH_ALIGN
++
++ENUMX
++  BFD_RELOC_LARCH_PCREL20_S2
++
++ENUMX
++  BFD_RELOC_LARCH_CFA
++
++ENUMX
++  BFD_RELOC_LARCH_ADD6
++ENUMX
++  BFD_RELOC_LARCH_SUB6
++
++ENUMX
++  BFD_RELOC_LARCH_ADD_ULEB128
++ENUMX
++  BFD_RELOC_LARCH_SUB_ULEB128
++
+ ENUMDOC
+   LARCH relocations.
+ 
+--- binutils-2.40.50.20230510.orig/binutils/readelf.c
++++ binutils-2.40.50.20230510/binutils/readelf.c
+@@ -14008,6 +14008,51 @@ target_specific_reloc_handling (Filedata
+ 
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      {
++	switch (reloc_type)
++	  {
++	    /* For .uleb128 .LFE1-.LFB1, loongarch write 0 to object file
++	       at assembly time.  */
++	    case 107: /* R_LARCH_ADD_ULEB128.  */
++	    case 108: /* R_LARCH_SUB_ULEB128.  */
++	      {
++		uint64_t value;
++		unsigned int reloc_size = 0;
++		int leb_ret = 0;
++
++		value = read_leb128 (start + reloc->r_offset, end, false,
++			      &reloc_size, &leb_ret);
++		if (leb_ret != 0 || reloc_size == 0 || reloc_size > 8)
++		  error (_("LoongArch ULEB128 field at 0x%lx contains invalid "
++			   "ULEB128 value\n"),
++			 (long) reloc->r_offset);
++
++		if (107 == reloc_type)
++		  value += (reloc->r_addend + symtab[sym_index].st_value);
++		else if (108 == reloc_type)
++		  value -= (reloc->r_addend + symtab[sym_index].st_value);
++
++		/* Write uleb128 value to p.  */
++		bfd_byte c;
++		bfd_byte *p = start + reloc->r_offset;
++		do
++		  {
++		    c = value & 0x7f;
++		    if (reloc_size > 1)
++		      c |= 0x80;
++		    *(p++) = c;
++		    value >>= 7;
++		    reloc_size--;
++		  }
++		while (reloc_size);
++
++		return true;
++	      }
++	  }
++	break;
++      }
++
+     case EM_MSP430:
+     case EM_MSP430_OLD:
+       {
+@@ -14734,6 +14779,8 @@ is_32bit_inplace_add_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 50; /* R_LARCH_ADD32.  */
+     case EM_RISCV:
+       return reloc_type == 35; /* R_RISCV_ADD32.  */
+     default:
+@@ -14750,6 +14797,8 @@ is_32bit_inplace_sub_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 55; /* R_LARCH_SUB32.  */
+     case EM_RISCV:
+       return reloc_type == 39; /* R_RISCV_SUB32.  */
+     default:
+@@ -14766,6 +14815,8 @@ is_64bit_inplace_add_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 51; /* R_LARCH_ADD64.  */
+     case EM_RISCV:
+       return reloc_type == 36; /* R_RISCV_ADD64.  */
+     default:
+@@ -14782,6 +14833,8 @@ is_64bit_inplace_sub_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 56; /* R_LARCH_SUB64.  */
+     case EM_RISCV:
+       return reloc_type == 40; /* R_RISCV_SUB64.  */
+     default:
+@@ -14798,6 +14851,8 @@ is_16bit_inplace_add_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 48; /* R_LARCH_ADD16.  */
+     case EM_RISCV:
+       return reloc_type == 34; /* R_RISCV_ADD16.  */
+     default:
+@@ -14814,6 +14869,8 @@ is_16bit_inplace_sub_reloc (Filedata * f
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 53; /* R_LARCH_SUB16.  */
+     case EM_RISCV:
+       return reloc_type == 38; /* R_RISCV_SUB16.  */
+     default:
+@@ -14830,6 +14887,8 @@ is_8bit_inplace_add_reloc (Filedata * fi
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 47; /* R_LARCH_ADD8.  */
+     case EM_RISCV:
+       return reloc_type == 33; /* R_RISCV_ADD8.  */
+     default:
+@@ -14846,6 +14905,8 @@ is_8bit_inplace_sub_reloc (Filedata * fi
+   /* Please keep this table alpha-sorted for ease of visual lookup.  */
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 52; /* R_LARCH_SUB8.  */
+     case EM_RISCV:
+       return reloc_type == 37; /* R_RISCV_SUB8.  */
+     default:
+@@ -14854,6 +14915,21 @@ is_8bit_inplace_sub_reloc (Filedata * fi
+ }
+ 
+ /* Like is_32bit_abs_reloc except that it returns TRUE iff RELOC_TYPE is
++   a 6-bit inplace add RELA relocation used in DWARF debug sections.  */
++
++static bool
++is_6bit_inplace_add_reloc (Filedata * filedata, unsigned int reloc_type)
++{
++  switch (filedata->file_header.e_machine)
++    {
++    case EM_LOONGARCH:
++      return reloc_type == 105; /* R_LARCH_ADD6.  */
++    default:
++      return false;
++    }
++}
++
++/* Like is_32bit_abs_reloc except that it returns TRUE iff RELOC_TYPE is
+    a 6-bit inplace sub RELA relocation used in DWARF debug sections.  */
+ 
+ static bool
+@@ -14861,6 +14937,8 @@ is_6bit_inplace_sub_reloc (Filedata * fi
+ {
+   switch (filedata->file_header.e_machine)
+     {
++    case EM_LOONGARCH:
++      return reloc_type == 106; /* R_LARCH_SUB6.  */
+     case EM_RISCV:
+       return reloc_type == 52; /* R_RISCV_SUB6.  */
+     default:
+@@ -15108,7 +15186,8 @@ apply_relocations (Filedata *filedata,
+ 	      reloc_inplace = true;
+ 	    }
+ 	  else if ((reloc_subtract = is_6bit_inplace_sub_reloc (filedata,
+-								reloc_type)))
++								reloc_type))
++		   || is_6bit_inplace_add_reloc (filedata, reloc_type))
+ 	    {
+ 	      reloc_size = 1;
+ 	      reloc_inplace = true;
+@@ -15200,7 +15279,8 @@ apply_relocations (Filedata *filedata,
+ 		        reloc_size);
+ 	    }
+ 	  else if (is_6bit_abs_reloc (filedata, reloc_type)
+-		   || is_6bit_inplace_sub_reloc (filedata, reloc_type))
++		   || is_6bit_inplace_sub_reloc (filedata, reloc_type)
++		   || is_6bit_inplace_add_reloc (filedata, reloc_type))
+ 	    {
+ 	      if (reloc_subtract)
+ 		addend -= sym->st_value;
+--- binutils-2.40.50.20230510.orig/binutils/testsuite/binutils-all/readelf.exp
++++ binutils-2.40.50.20230510/binutils/testsuite/binutils-all/readelf.exp
+@@ -489,18 +489,23 @@ if {![binutils_assemble $srcdir/$subdir/
+     readelf_test {--decompress --hex-dump .debug_loc} $tempfile readelf.z
+ }
+ 
+-set hpux ""
++set flags ""
+ 
+ # Skip the next test for the RISCV architectures because they
+ # do not support .ULEB128 pseudo-ops with non-constant values.
+ if ![istarget "riscv*-*-*"] then {
+ 
+     if [istarget "hppa*64*-*-hpux*"] {
+-	set hpux "--defsym HPUX=1"
++	set flags "--defsym HPUX=1"
+     }
+ 
++    # LoongArch relax align add nops, so label subtractions will increase
++    if [istarget "loongarch*-*-*"] {
++	set flags "-mno-relax"
++     }
++
+     # Assemble the DWARF-5 test file.
+-    if {![binutils_assemble_flags $srcdir/$subdir/dw5.S tmpdir/dw5.o $hpux]} then {
++    if {![binutils_assemble_flags $srcdir/$subdir/dw5.S tmpdir/dw5.o $flags]} then {
+ 	unsupported "readelf -wiaoRlL dw5 (failed to assemble)"
+     } else {
+ 
+@@ -612,7 +617,7 @@ if ![is_remote host] {
+ }
+ 
+ # Check dwarf-5 support for DW_OP_addrx.
+-if {![binutils_assemble_flags $srcdir/$subdir/dw5-op.S tmpdir/dw5-op.o $hpux]} then {
++if {![binutils_assemble_flags $srcdir/$subdir/dw5-op.S tmpdir/dw5-op.o $flags]} then {
+     unsupported "readelf -wi dw5-op (failed to assemble)"
+ } else {
+ 
+--- binutils-2.40.50.20230510.orig/gas/config/tc-loongarch.c
++++ binutils-2.40.50.20230510/gas/config/tc-loongarch.c
+@@ -20,6 +20,7 @@
+    see <http://www.gnu.org/licenses/>.  */
+ 
+ #include "as.h"
++#include "subsegs.h"
+ #include "dw2gencfi.h"
+ #include "loongarch-lex.h"
+ #include "elf/loongarch.h"
+@@ -30,6 +31,7 @@
+ #include <string.h>
+ #include <stdio.h>
+ #include <assert.h>
++#include "libbfd.h"
+ 
+ /* All information about an instruction during assemble.  */
+ struct loongarch_cl_insn
+@@ -70,6 +72,7 @@ struct loongarch_cl_insn
+   long where;
+   /* The relocs associated with the instruction, if any.  */
+   fixS *fixp[MAX_RELOC_NUMBER_A_INSN];
++  long macro_id;
+ };
+ 
+ #ifndef DEFAULT_ARCH
+@@ -116,6 +119,8 @@ enum options
+   OPTION_LA_LOCAL_WITH_ABS,
+   OPTION_LA_GLOBAL_WITH_PCREL,
+   OPTION_LA_GLOBAL_WITH_ABS,
++  OPTION_RELAX,
++  OPTION_NO_RELAX,
+ 
+   OPTION_END_OF_ENUM,
+ };
+@@ -130,6 +135,9 @@ struct option md_longopts[] =
+   { "mla-global-with-pcrel", no_argument, NULL, OPTION_LA_GLOBAL_WITH_PCREL },
+   { "mla-global-with-abs", no_argument, NULL, OPTION_LA_GLOBAL_WITH_ABS },
+ 
++  { "mrelax", no_argument, NULL, OPTION_RELAX },
++  { "mno-relax", no_argument, NULL, OPTION_NO_RELAX },
++
+   { NULL, no_argument, NULL, 0 }
+ };
+ 
+@@ -195,6 +203,14 @@ md_parse_option (int c, const char *arg)
+       LARCH_opts.ase_gabs = 1;
+       break;
+ 
++    case OPTION_RELAX:
++      LARCH_opts.relax = 1;
++      break;
++
++    case OPTION_NO_RELAX:
++      LARCH_opts.relax = 0;
++      break;
++
+     case OPTION_IGNORE:
+       break;
+ 
+@@ -460,7 +476,6 @@ get_internal_label (expressionS *label_e
+ 		    int augend /* 0 for previous, 1 for next.  */)
+ {
+   assert (label < INTERNAL_LABEL_SPECIAL);
+-  if (augend == 0 && internal_label_count[label] == 0)
+     as_fatal (_("internal error: we have no internal label yet"));
+   label_expr->X_op = O_symbol;
+   label_expr->X_add_symbol =
+@@ -617,13 +632,26 @@ loongarch_args_parser_can_match_arg_help
+ 	    as_fatal (
+ 		      _("not support reloc bit-field\nfmt: %c%c %s\nargs: %s"),
+ 		      esc_ch1, esc_ch2, bit_field, arg);
++
+ 	  if (ip->reloc_info[0].type >= BFD_RELOC_LARCH_B16
+-	      && ip->reloc_info[0].type < BFD_RELOC_LARCH_RELAX)
++	      && ip->reloc_info[0].type < BFD_RELOC_LARCH_SUB_ULEB128)
+ 	    {
+ 	      /* As we compact stack-relocs, it is no need for pop operation.
+ 		 But break out until here in order to check the imm field.
+ 		 May be reloc_num > 1 if implement relax?  */
+ 	      ip->reloc_num += reloc_num;
++	      reloc_type = ip->reloc_info[0].type;
++
++	      if (LARCH_opts.relax && ip->macro_id
++		    && (BFD_RELOC_LARCH_PCALA_HI20 == reloc_type
++			|| BFD_RELOC_LARCH_PCALA_LO12 == reloc_type
++			|| BFD_RELOC_LARCH_GOT_PC_HI20 == reloc_type
++			|| BFD_RELOC_LARCH_GOT_PC_LO12 == reloc_type))
++		{
++		  ip->reloc_info[ip->reloc_num].type = BFD_RELOC_LARCH_RELAX;
++		  ip->reloc_info[ip->reloc_num].value = const_0;
++		  ip->reloc_num++;
++		}
+ 	      break;
+ 	    }
+ 	  reloc_num++;
+@@ -835,8 +863,11 @@ move_insn (struct loongarch_cl_insn *ins
+   insn->where = where;
+   for (i = 0; i < insn->reloc_num; i++)
+     {
+-      insn->fixp[i]->fx_frag = frag;
+-      insn->fixp[i]->fx_where = where;
++      if (insn->fixp[i])
++	{
++	  insn->fixp[i]->fx_frag = frag;
++	  insn->fixp[i]->fx_where = where;
++	}
+     }
+   install_insn (insn);
+ }
+@@ -875,6 +906,21 @@ append_fixp_and_insn (struct loongarch_c
+     as_fatal (_("Internal error: not support relax now"));
+   else
+     append_fixed_insn (ip);
++
++  /* We need to start a new frag after any instruction that can be
++     optimized away or compressed by the linker during relaxation, to prevent
++     the assembler from computing static offsets across such an instruction.
++
++     This is necessary to get correct .eh_frame cfa info. If one cfa's two
++     symbol is not in the same frag, it will generate relocs to calculate
++     symbol subtraction. (gas/dw2gencfi.c:output_cfi_insn:
++     if (symbol_get_frag (to) == symbol_get_frag (from)))  */
++  if (BFD_RELOC_LARCH_PCALA_HI20 == reloc_info[0].type
++      || BFD_RELOC_LARCH_GOT_PC_HI20 == reloc_info[0].type)
++    {
++      frag_wane (frag_now);
++      frag_new (0);
++    }
+ }
+ 
+ /* Ask helper for returning a malloced c_str or NULL.  */
+@@ -968,7 +1014,7 @@ assember_macro_helper (const char *const
+  * assuming 'not starting with space and not ending with space' or pass in
+  * empty c_str.  */
+ static void
+-loongarch_assemble_INSNs (char *str)
++loongarch_assemble_INSNs (char *str, struct loongarch_cl_insn *ctx)
+ {
+   char *rest;
+   size_t len_str = strlen(str);
+@@ -991,6 +1037,7 @@ loongarch_assemble_INSNs (char *str)
+ 
+       struct loongarch_cl_insn the_one = { 0 };
+       the_one.name = str;
++      the_one.macro_id = ctx->macro_id;
+ 
+       for (; *str && *str != ' '; str++)
+ 	;
+@@ -1014,24 +1061,27 @@ loongarch_assemble_INSNs (char *str)
+       append_fixp_and_insn (&the_one);
+       if (the_one.insn_length == 0 && the_one.insn->macro)
+ 	{
++	  the_one.macro_id = 1;
++
+ 	  char *c_str = loongarch_expand_macro (the_one.insn->macro,
+ 						the_one.arg_strs,
+ 						assember_macro_helper,
+ 						&the_one, len_str);
+-	  loongarch_assemble_INSNs (c_str);
++	  loongarch_assemble_INSNs (c_str, &the_one);
+ 	  free (c_str);
+ 	}
+     }
+   while (0);
+ 
+   if (*rest != '\0')
+-    loongarch_assemble_INSNs (rest);
++    loongarch_assemble_INSNs (rest, ctx);
+ }
+ 
+ void
+ md_assemble (char *str)
+ {
+-  loongarch_assemble_INSNs (str);
++  struct loongarch_cl_insn the_one = { 0 };
++  loongarch_assemble_INSNs (str, &the_one);
+ }
+ 
+ const char *
+@@ -1062,7 +1112,7 @@ static void fix_reloc_insn (fixS *fixP,
+ 
+   insn = bfd_getl32 (buf);
+ 
+-  if (!loongarch_adjust_reloc_bitsfield(howto, &reloc_val))
++  if (!loongarch_adjust_reloc_bitsfield (NULL, howto, &reloc_val))
+     as_warn_where (fixP->fx_file, fixP->fx_line, "Reloc overflow");
+ 
+   insn = (insn & (insn_t)howto->src_mask)
+@@ -1137,6 +1187,23 @@ md_apply_fix (fixS *fixP, valueT *valP,
+       fix_reloc_insn (fixP, (bfd_vma)stack_top, buf);
+       break;
+ 
++    /* LARCH only has R_LARCH_64/32, not has R_LARCH_24/16/8.
++       For BFD_RELOC_64/32, if fx_addsy and fx_subsy not null, wer need
++       generate BFD_RELOC_LARCH_ADD64/32 and BFD_RELOC_LARCH_SUB64/32 here.
++       Then will parse howto table bfd_reloc_code_real_type to generate
++       R_LARCH_ADD64/32 and R_LARCH_SUB64/32 reloc at tc_gen_reloc function.
++       If only fx_addsy not null, skip here directly, then generate
++       R_LARCH_64/32.
++
++       For BFD_RELOC_24/16/8, if fx_addsy and fx_subsy not null, wer need
++       generate BFD_RELOC_LARCH_ADD24/16/8 and BFD_RELOC_LARCH_SUB24/16/8 here.
++       Then will parse howto table bfd_reloc_code_real_type to generate
++       R_LARCH_ADD24/16/8 and R_LARCH_SUB24/16/8 reloc at tc_gen_reloc
++       function. If only fx_addsy not null, we generate
++       BFD_RELOC_LARCH_ADD24/16/8 only, then generate R_LARCH_24/16/8.
++       To avoid R_LARCH_ADDxx add extra value, we write 0 first
++       (use md_number_to_chars (buf, 0, fixP->fx_size)).
++    */
+     case BFD_RELOC_64:
+     case BFD_RELOC_32:
+       if (fixP->fx_r_type == BFD_RELOC_32
+@@ -1151,7 +1218,7 @@ md_apply_fix (fixS *fixP, valueT *valP,
+ 	  break;
+ 	}
+ 
+-      if (fixP->fx_subsy)
++      if (fixP->fx_addsy && fixP->fx_subsy)
+ 	{
+ 	  fixP->fx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));
+ 	  fixP->fx_next->fx_addsy = fixP->fx_subsy;
+@@ -1186,34 +1253,37 @@ md_apply_fix (fixS *fixP, valueT *valP,
+     case BFD_RELOC_24:
+     case BFD_RELOC_16:
+     case BFD_RELOC_8:
+-      fixP->fx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));
+-      fixP->fx_next->fx_addsy = fixP->fx_subsy;
+-      fixP->fx_next->fx_subsy = NULL;
+-      fixP->fx_next->fx_offset = 0;
+-      fixP->fx_subsy = NULL;
+-
+-      switch (fixP->fx_r_type)
+-	{
+-	case BFD_RELOC_24:
+-	  fixP->fx_r_type = BFD_RELOC_LARCH_ADD24;
+-	  fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB24;
+-	  break;
+-	case BFD_RELOC_16:
+-	  fixP->fx_r_type = BFD_RELOC_LARCH_ADD16;
+-	  fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB16;
+-	  break;
+-	case BFD_RELOC_8:
+-	  fixP->fx_r_type = BFD_RELOC_LARCH_ADD8;
+-	  fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB8;
+-	  break;
+-	default:
+-	  break;
+-	}
++      if (fixP->fx_addsy)
++	{
++	  fixP->fx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));
++	  fixP->fx_next->fx_addsy = fixP->fx_subsy;
++	  fixP->fx_next->fx_subsy = NULL;
++	  fixP->fx_next->fx_offset = 0;
++	  fixP->fx_subsy = NULL;
++
++	  switch (fixP->fx_r_type)
++	    {
++	    case BFD_RELOC_24:
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD24;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB24;
++	      break;
++	    case BFD_RELOC_16:
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD16;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB16;
++	      break;
++	    case BFD_RELOC_8:
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD8;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB8;
++	      break;
++	    default:
++	      break;
++	    }
+ 
+-      md_number_to_chars (buf, 0, fixP->fx_size);
++	  md_number_to_chars (buf, 0, fixP->fx_size);
+ 
+-      if (fixP->fx_next->fx_addsy == NULL)
+-	fixP->fx_next->fx_done = 1;
++	  if (fixP->fx_next->fx_addsy == NULL)
++	    fixP->fx_next->fx_done = 1;
++	}
+ 
+       if (fixP->fx_addsy == NULL)
+ 	{
+@@ -1222,6 +1292,67 @@ md_apply_fix (fixS *fixP, valueT *valP,
+ 	}
+       break;
+ 
++    case BFD_RELOC_LARCH_CFA:
++      if (fixP->fx_addsy && fixP->fx_subsy)
++	{
++	  fixP->fx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));
++	  fixP->fx_next->fx_addsy = fixP->fx_subsy;
++	  fixP->fx_next->fx_subsy = NULL;
++	  fixP->fx_next->fx_offset = 0;
++	  fixP->fx_subsy = NULL;
++
++	  unsigned int subtype;
++	  offsetT loc;
++	  subtype = bfd_get_8 (NULL, &((fragS *)
++		      (fixP->fx_frag->fr_opcode))->fr_literal[fixP->fx_where]);
++	  loc = fixP->fx_frag->fr_fix - (subtype & 7);
++	  switch (subtype)
++	    {
++	    case DW_CFA_advance_loc1:
++	      fixP->fx_where = loc + 1;
++	      fixP->fx_next->fx_where = loc + 1;
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD8;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB8;
++	      md_number_to_chars (buf+1, 0, fixP->fx_size);
++	      break;
++
++	    case DW_CFA_advance_loc2:
++	      fixP->fx_size = 2;
++	      fixP->fx_next->fx_size = 2;
++	      fixP->fx_where = loc + 1;
++	      fixP->fx_next->fx_where = loc + 1;
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD16;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB16;
++	      md_number_to_chars (buf+1, 0, fixP->fx_size);
++	      break;
++
++	    case DW_CFA_advance_loc4:
++	      fixP->fx_size = 4;
++	      fixP->fx_next->fx_size = 4;
++	      fixP->fx_where = loc;
++	      fixP->fx_next->fx_where = loc;
++	      fixP->fx_r_type = BFD_RELOC_LARCH_ADD32;
++	      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB32;
++	      md_number_to_chars (buf+1, 0, fixP->fx_size);
++	      break;
++
++	    default:
++	      if (subtype < 0x80 && (subtype & 0x40))
++		{
++		  /* DW_CFA_advance_loc.  */
++		  fixP->fx_frag = (fragS *) fixP->fx_frag->fr_opcode;
++		  fixP->fx_next->fx_frag = fixP->fx_frag;
++		  fixP->fx_r_type = BFD_RELOC_LARCH_ADD6;
++		  fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB6;
++		  md_number_to_chars (buf, 0x40, fixP->fx_size);
++		  }
++	      else
++		as_fatal (_("internal: bad CFA value #%d"), subtype);
++	      break;
++	    }
++	}
++      break;
++
+     case BFD_RELOC_LARCH_B16:
+     case BFD_RELOC_LARCH_B21:
+     case BFD_RELOC_LARCH_B26:
+@@ -1236,11 +1367,28 @@ md_apply_fix (fixS *fixP, valueT *valP,
+ 	  int64_t sym_addend = S_GET_VALUE (fixP->fx_addsy) + fixP->fx_offset;
+ 	  int64_t pc = fixP->fx_where + fixP->fx_frag->fr_address;
+ 	  fix_reloc_insn (fixP, sym_addend - pc, buf);
+-	  fixP->fx_done = 1;
+-	}
+ 
++	  /* If relax, symbol value may change at link time, so reloc need to
++	     be saved.  */
++	  if (!LARCH_opts.relax)
++	    fixP->fx_done = 1;
++	}
+       break;
+ 
++    /* Because ADD_ULEB128/SUB_ULEB128 always occur in pairs.
++       So just deal with one is ok.
++    case BFD_RELOC_LARCH_ADD_ULEB128:  */
++    case BFD_RELOC_LARCH_SUB_ULEB128:
++      {
++	unsigned int len = 0;
++	_bfd_read_unsigned_leb128 (NULL, (bfd_byte *)buf, &len);
++	bfd_byte *endp = (bfd_byte*) buf + len -1;
++	/* Clean the uleb128 value to 0. Do not reduce the length.  */
++	memset (buf, 0x80, len - 1);
++	*endp = 0;
++	break;
++      }
++
+     default:
+       break;
+     }
+@@ -1258,34 +1406,7 @@ int
+ md_estimate_size_before_relax (fragS *fragp ATTRIBUTE_UNUSED,
+ 			       asection *segtype ATTRIBUTE_UNUSED)
+ {
+-  return 0;
+-}
+-
+-int
+-loongarch_fix_adjustable (fixS *fix)
+-{
+-  /* Prevent all adjustments to global symbols.  */
+-  if (S_IS_EXTERNAL (fix->fx_addsy)
+-      || S_IS_WEAK (fix->fx_addsy)
+-      || S_FORCE_RELOC (fix->fx_addsy, true))
+-    return 0;
+-
+-  /* Loongarch loads extern symbols by GOT, and if there are embedded
+-     asm(".local S"), gcc just output ".local S" to assembly file.
+-     For a local symbol with GOT relocations, this adjustments will make
+-     GOT relocation's addend not equal to zero. So this adjustments is
+-     forbidden for got relocs.  */
+-  if(fix->fx_r_type == BFD_RELOC_LARCH_GOT_PC_HI20
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT_PC_LO12
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT64_PC_LO20
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT64_PC_HI12
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT_HI20
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT_LO12
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT64_LO20
+-      || fix->fx_r_type == BFD_RELOC_LARCH_GOT64_HI12)
+-    return 0;
+-
+-  return 1;
++  return (fragp->fr_var = 4);
+ }
+ 
+ /* Translate internal representation of relocation info to BFD target
+@@ -1315,9 +1436,25 @@ tc_gen_reloc (asection *section ATTRIBUT
+ /* Convert a machine dependent frag.  */
+ void
+ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec ATTRIBUTE_UNUSED,
+-		 fragS *fragp ATTRIBUTE_UNUSED)
++		 fragS *fragp)
+ {
+-  /* fragp->fr_fix += 8; */
++  expressionS exp;
++  exp.X_op = O_symbol;
++  exp.X_add_symbol = fragp->fr_symbol;
++  exp.X_add_number = fragp->fr_offset;
++  bfd_byte *buf = (bfd_byte *)fragp->fr_literal + fragp->fr_fix;
++
++  fixS *fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
++				4, &exp, false, fragp->fr_subtype);
++  buf += 4;
++
++  fixp->fx_file = fragp->fr_file;
++  fixp->fx_line = fragp->fr_line;
++  fragp->fr_fix += fragp->fr_var;
++
++  gas_assert (fragp->fr_next == NULL
++	      || (fragp->fr_next->fr_address - fragp->fr_address
++		  == fragp->fr_fix));
+ }
+ 
+ /* Standard calling conventions leave the CFA at SP on entry.  */
+@@ -1328,6 +1465,48 @@ loongarch_cfi_frame_initial_instructions
+ }
+ 
+ void
++loongarch_pre_output_hook (void)
++{
++  const frchainS *frch;
++  segT s;
++
++  /* Save the current segment info.  */
++  segT seg = now_seg;
++  subsegT subseg = now_subseg;
++
++  for (s = stdoutput->sections; s; s = s->next)
++    for (frch = seg_info (s)->frchainP; frch; frch = frch->frch_next)
++      {
++	fragS *frag;
++
++	for (frag = frch->frch_root; frag; frag = frag->fr_next)
++	  {
++	    if (frag->fr_type == rs_cfa)
++	      {
++		expressionS exp;
++		expressionS *symval;
++
++		symval = symbol_get_value_expression (frag->fr_symbol);
++		exp.X_op = O_subtract;
++		exp.X_add_symbol = symval->X_add_symbol;
++		exp.X_add_number = 0;
++		exp.X_op_symbol = symval->X_op_symbol;
++
++		/* We must set the segment before creating a frag after all
++		   frag chains have been chained together.  */
++		subseg_set (s, frch->frch_subseg);
++
++		fix_new_exp (frag, (int) frag->fr_offset, 1, &exp, 0,
++			     BFD_RELOC_LARCH_CFA);
++	      }
++	  }
++      }
++
++  /* Restore the original segment info.  */
++  subseg_set (seg, subseg);
++}
++
++void
+ tc_loongarch_parse_to_dw2regnum (expressionS *exp)
+ {
+   expression_and_evaluate (exp);
+@@ -1340,6 +1519,58 @@ md_show_usage (FILE *stream)
+   /* FIXME */
+ }
+ 
++static void
++loongarch_make_nops (char *buf, bfd_vma bytes)
++{
++  bfd_vma i = 0;
++
++  /* Fill with 4-byte NOPs.  */
++  for ( ; i < bytes; i += 4)
++    number_to_chars_littleendian (buf + i, LARCH_NOP, 4);
++}
++
++/* Called from md_do_align.  Used to create an alignment frag in a
++   code section by emitting a worst-case NOP sequence that the linker
++   will later relax to the correct number of NOPs.  We can't compute
++   the correct alignment now because of other linker relaxations.  */
++
++bool
++loongarch_frag_align_code (int n)
++{
++  bfd_vma bytes = (bfd_vma) 1 << n;
++  bfd_vma insn_alignment = 4;
++  bfd_vma worst_case_bytes = bytes - insn_alignment;
++  char *nops;
++  expressionS ex;
++
++  /* If we are moving to a smaller alignment than the instruction size, then no
++     alignment is required.  */
++  if (bytes <= insn_alignment)
++    return true;
++
++  /* When not relaxing, loongarch_handle_align handles code alignment.  */
++  if (!LARCH_opts.relax)
++    return false;
++
++  nops = frag_more (worst_case_bytes);
++
++  ex.X_op = O_constant;
++  ex.X_add_number = worst_case_bytes;
++
++  loongarch_make_nops (nops, worst_case_bytes);
++
++  fix_new_exp (frag_now, nops - frag_now->fr_literal, 0,
++	       &ex, false, BFD_RELOC_LARCH_ALIGN);
++
++  /* We need to start a new frag after the alignment which may be removed by
++     the linker, to prevent the assembler from computing static offsets.
++     This is necessary to get correct EH info.  */
++  frag_wane (frag_now);
++  frag_new (0);
++
++  return true;
++}
++
+ /* Fill in an rs_align_code fragment.  We want to fill 'andi $r0,$r0,0'.  */
+ void
+ loongarch_handle_align (fragS *fragp)
+@@ -1375,6 +1606,68 @@ loongarch_handle_align (fragS *fragp)
+   fragp->fr_var = size;
+ }
+ 
++/* Scan uleb128 subtraction expressions and insert fixups for them.
++   e.g., .uleb128 .L1 - .L0
++   Because relaxation may change the value of the subtraction, we
++   must resolve them at link-time.  */
++
++static void
++loongarch_insert_uleb128_fixes (bfd *abfd ATTRIBUTE_UNUSED,
++		      asection *sec, void *xxx ATTRIBUTE_UNUSED)
++{
++  segment_info_type *seginfo = seg_info (sec);
++  struct frag *fragP;
++
++  subseg_set (sec, 0);
++
++  for (fragP = seginfo->frchainP->frch_root;
++       fragP; fragP = fragP->fr_next)
++    {
++      expressionS *exp, *exp_dup;
++
++      if (fragP->fr_type != rs_leb128  || fragP->fr_symbol == NULL)
++	continue;
++
++      exp = symbol_get_value_expression (fragP->fr_symbol);
++
++      if (exp->X_op != O_subtract)
++	continue;
++
++      /* FIXME: Skip for .sleb128.  */
++      if (fragP->fr_subtype != 0)
++	continue;
++
++      exp_dup = xmemdup (exp, sizeof (*exp), sizeof (*exp));
++      exp_dup->X_op = O_symbol;
++      exp_dup->X_op_symbol = NULL;
++
++      exp_dup->X_add_symbol = exp->X_add_symbol;
++      fix_new_exp (fragP, fragP->fr_fix, 0,
++		   exp_dup, 0, BFD_RELOC_LARCH_ADD_ULEB128);
++
++      /* From binutils/testsuite/binutils-all/dw5.S
++	 section .debug_rnglists
++	 .uleb128 .Letext0-.Ltext0    Range length (*.LLRL2)
++    Offset             Info             Type               Symbol's Value  Symbol's Name + Addend
++0000000000000015  0000000200000079 R_LARCH_ADD_ULEB128    0000000000000000 .text + 2
++0000000000000015  000000020000007a R_LARCH_SUB_ULEB128    0000000000000000 .text + 0.  */
++
++      /* Only the ADD_ULEB128 has X_add_number (Addend)?  */
++      exp_dup->X_add_number = 0;
++      exp_dup->X_add_symbol = exp->X_op_symbol;
++      fix_new_exp (fragP, fragP->fr_fix, 0,
++		   exp_dup, 0, BFD_RELOC_LARCH_SUB_ULEB128);
++    }
++}
++
++void
++loongarch_md_finish (void)
++{
++  /* Insert relocations for uleb128 directives, so the values can be recomputed
++     at link time.  */
++  bfd_map_over_sections (stdoutput, loongarch_insert_uleb128_fixes, NULL);
++}
++
+ void
+ loongarch_elf_final_processing (void)
+ {
+--- binutils-2.40.50.20230510.orig/gas/config/tc-loongarch.h
++++ binutils-2.40.50.20230510/gas/config/tc-loongarch.h
+@@ -47,16 +47,45 @@ extern int loongarch_relax_frag (asectio
+ #define md_undefined_symbol(name) (0)
+ #define md_operand(x)
+ 
+-/* This is called to see whether a reloc against a defined symbol
++extern bool loongarch_frag_align_code (int);
++#define md_do_align(N, FILL, LEN, MAX, LABEL)				\
++  if ((N) != 0 && !(FILL) && !need_pass_2 && subseg_text_p (now_seg))	\
++    {									\
++      if (loongarch_frag_align_code (N))				\
++	goto LABEL;							\
++    }
++
++/* The following two macros let the linker resolve all the relocs
++   due to relaxation.
++   This is called to see whether a reloc against a defined symbol
+    should be converted into a reloc against a section.  */
+-extern int loongarch_fix_adjustable (struct fix *fix);
+-#define tc_fix_adjustable(fixp) loongarch_fix_adjustable(fixp)
++#define tc_fix_adjustable(fixp) 0
++/* The difference between same-section symbols may be affected by linker
++   relaxation, so do not resolve such expressions in the assembler.  */
++#define md_allow_local_subtract(l,r,s) 0
+ 
+ /* Values passed to md_apply_fix don't include symbol values.  */
+ #define TC_FORCE_RELOCATION_SUB_LOCAL(FIX, SEG) 1
+ #define TC_VALIDATE_FIX_SUB(FIX, SEG) 1
+ #define DIFF_EXPR_OK 1
+ 
++#define TC_FORCE_RELOCATION_SUB_SAME(FIX, SEC)	\
++  (GENERIC_FORCE_RELOCATION_SUB_SAME (FIX, SEC)	\
++   || ((SEC)->flags & SEC_CODE) != 0		\
++   || ((SEC)->flags & SEC_DEBUGGING) != 0	\
++   || TC_FORCE_RELOCATION (FIX))
++
++#define TC_LINKRELAX_FIXUP(seg) ((seg->flags & SEC_CODE)  \
++				    || (seg->flags & SEC_DEBUGGING))
++
++#define TC_FORCE_RELOCATION_LOCAL(FIX) 1
++
++/* Adjust debug_line after relaxation.  */
++#define DWARF2_USE_FIXED_ADVANCE_PC 1
++
++/* Values passed to md_apply_fix don't include symbol values.  */
++#define MD_APPLY_SYM_VALUE(FIX) 0
++
+ #define TARGET_USE_CFIPOP 1
+ #define DWARF2_DEFAULT_RETURN_COLUMN 1 /* $ra.  */
+ #define DWARF2_CIE_DATA_ALIGNMENT -4
+@@ -65,13 +94,15 @@ extern int loongarch_fix_adjustable (str
+   loongarch_cfi_frame_initial_instructions
+ extern void loongarch_cfi_frame_initial_instructions (void);
+ 
++#define tc_symbol_new_hook(sym) \
++  if (0 == strcmp (sym->bsym->name, FAKE_LABEL_NAME)) \
++    S_SET_OTHER (sym, STV_HIDDEN);
++
+ #define tc_parse_to_dw2regnum tc_loongarch_parse_to_dw2regnum
+ extern void tc_loongarch_parse_to_dw2regnum (expressionS *);
+ 
+-/* A enumerated values to specific how to deal with align in '.text'.
+-   Now we want to fill 'andi $r0,$r0,0x0'.
+-   Here is the type 0, will fill andi insn later.  */
+-#define NOP_OPCODE (0x00)
++extern void loongarch_pre_output_hook (void);
++#define md_pre_output_hook loongarch_pre_output_hook ()
+ 
+ #define SUB_SEGMENT_ALIGN(SEG, FRCHAIN) 0
+ 
+@@ -90,4 +121,7 @@ struct reloc_info
+   expressionS value;
+ };
+ 
++#define md_finish loongarch_md_finish
++extern void loongarch_md_finish (void);
++
+ #endif
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/all/align.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/all/align.d
+@@ -3,8 +3,9 @@
+ # The RX port will always replace zeros in any aligned area with NOPs,
+ # even if the user requested that they filled with zeros.
+ # RISC-V handles alignment via relaxation and therefor won't have object files
+-# with the expected alignment.
+-#notarget: riscv*-* rx-*
++# LoongArch handles alignment via relaxation and therefor won't have object
++# files with the expected alignment.
++#notarget: loongarch*-* riscv*-* rx-*
+ 
+ # Test the alignment pseudo-op.
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/all/gas.exp
++++ binutils-2.40.50.20230510/gas/testsuite/gas/all/gas.exp
+@@ -67,14 +67,14 @@ if {    ![istarget alpha*-*-*vms*]
+      && ![istarget ft32-*-*]
+      && ![istarget hppa*-*-*]
+      && ![istarget microblaze-*-*]
++     && ![istarget loongarch*-*-*]
+      && ![istarget mn10300-*-*]
+      && ![istarget msp430*-*-*]
+      && ![istarget powerpc*-*-aix*]
+      && ![istarget riscv*-*-*]
+      && ![istarget rl78-*-*]
+      && ![istarget rs6000*-*-aix*]
+-     && ![istarget rx-*-*]
+-     && ![istarget loongarch*-*-*] } then {
++     && ![istarget rx-*-*] } then {
+     gas_test_error "diff1.s" "" "difference of two undefined symbols"
+ }
+ 
+@@ -165,11 +165,11 @@ switch -glob $target_triplet {
+ 	# These targets fail redef2 because they disallow redefined
+ 	# symbols on relocs.
+ 	setup_xfail "m68hc1*-*-*" "m6811-*-*" "m6812-*-*" "rl78-*-*"
+-	setup_xfail "riscv*-*-*" "rx-*-*" "vax*-*-*" "xgate*-*-*" "z8k-*-*"
++	setup_xfail "loongarch*-*-*" "riscv*-*-*" "rx-*-*" "vax*-*-*" "xgate*-*-*" "z8k-*-*"
+ 	setup_xfail "avr-*-*"
+ 	run_dump_test redef2
+ 	setup_xfail "m68hc1*-*-*" "m6811-*-*" "m6812-*-*" "rl78-*-*"
+-	setup_xfail "riscv*-*-*" "rx-*-*" "vax*-*-*" "xgate*-*-*" "z8k-*-*"
++	setup_xfail "loongarch*-*-*" "riscv*-*-*" "rx-*-*" "vax*-*-*" "xgate*-*-*" "z8k-*-*"
+ 	setup_xfail "avr-*-*"
+ 	# rs6000-aix disallows redefinition via .comm.
+ 	if [is_xcoff_format] {
+@@ -279,7 +279,7 @@ if {    ![istarget *c30*-*-*]
+      && ![istarget h8300*-*-*]
+      && ![istarget hppa*-*-*] } then {
+     # msp430, mn10[23]00 and riscv emit two relocs to handle the difference of two symbols.
+-    setup_xfail "am3*-*-*" "mn10200-*-*" "mn10300*-*-*" "msp430*-*-*" "riscv*-*-*"
++    setup_xfail "am3*-*-*" "loongarch*-*-*" "mn10200-*-*" "mn10300*-*-*" "msp430*-*-*" "riscv*-*-*"
+     do_930509a
+ }
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/all/relax.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/all/relax.d
+@@ -4,6 +4,10 @@
+ # because symbol values are not known until after linker relaxation has been
+ # performed.
+ #notarget : riscv*-*-*
++# LoongArch doesn't resolve .uleb operands that are the difference of two
++# symbols because gas write zero to object file and generate add_uleb128 and
++# sub_uleb128 reloc pair.
++#xfail: loongarch*-*-*
+ 
+ .*: .*
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf-5-irp.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf-5-irp.d
+@@ -5,7 +5,8 @@
+ # The bfin target does not allow .subsection with an equated symbol as operand.
+ # The d30v target emits sufficiently different debug info, apparently also covering padding it inserts.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am33*-* bfin-* cr16-* crx-* d30v-* ft32-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am33*-* bfin-* cr16-* crx-* d30v-* ft32-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Raw dump of debug contents .*
+ #...
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf-5-loc0.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf-5-loc0.d
+@@ -3,7 +3,8 @@
+ #name: DWARF5 .loc 0
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Contents of the \.debug_line section:
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf-5-macro-include.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf-5-macro-include.d
+@@ -4,7 +4,7 @@
+ # The am33 cr16 crx ft32 mn10* msp430 nds32* and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The d30v target emits sufficiently different debug info, apparently also covering padding it inserts.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am33*-* cr16-* crx-* d30v-* ft32-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++#xfail: am33*-* cr16-* crx-* d30v-* ft32-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Raw dump of debug contents .*
+ #...
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf-5-macro.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf-5-macro.d
+@@ -4,7 +4,7 @@
+ # The am33 cr16 crx ft32 mn10* msp430 nds32* and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The d30v target emits sufficiently different debug info, apparently also covering padding it inserts.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am33*-* cr16-* crx-* d30v-* ft32-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++#xfail: am33*-* cr16-* crx-* d30v-* ft32-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Raw dump of debug contents .*
+ #...
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-11.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-11.d
+@@ -3,7 +3,8 @@
+ #name: DWARF2 11
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Contents of the \.debug_line section:
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-15.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-15.d
+@@ -3,7 +3,8 @@
+ #name: DWARF2 15
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 01 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-16.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-16.d
+@@ -4,7 +4,8 @@
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The mep target tries to relay code sections which breaks symbolic view computations.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* mep-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 01 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-17.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-17.d
+@@ -4,7 +4,8 @@
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The mep target tries to relay code sections which breaks symbolic view computations.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 00 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-18.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-18.d
+@@ -3,7 +3,8 @@
+ #name: DWARF2 18
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 0100 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-19.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-19.d
+@@ -4,7 +4,8 @@
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 and rl78 targets do not evaluate the subtraction of symbols at assembly time.
+ # The mep targets turns some view computations into complex relocations.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* mep-* loongarch*-* mn10*-* msp430-* nds32*-* riscv*-* rl78-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 01000102 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/dwarf2-5.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/dwarf2-5.d
+@@ -4,7 +4,8 @@
+ # The am33 cr16 crx ft32 mn10 msp430 nds32 rl78 and rx targets do not evaluate the subtraction of symbols at assembly time.
+ # The mep target tries to relay code sections which breaks symbolic view computations.
+ # The riscv targets do not support the subtraction of symbols.
+-#xfail: am3*-* cr16-* crx-* ft32*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-* rx-*
++# The loongarch targets do not support the subtraction of symbols.
++#xfail: am3*-* cr16-* crx-* ft32*-* loongarch*-* mep-* mn10*-* msp430-* nds32*-* riscv*-* rl78-* rx-*
+ 
+ Hex dump of section '\.rodata':
+   0x00000000 01010201 010203 *.*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/ehopt0.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/ehopt0.d
+@@ -1,5 +1,8 @@
+ #objdump: -s -j .eh_frame
+ #name: elf ehopt0 
++# The loongarch target do not evaluate .eh_frame fde cfa advance loc at assembly time.
++# Because loongarch use add/sub reloc evaluate cfa advance loc, so gas should write 0 to cfa advance loc address.
++#xfail: loongarch*-*
+ 
+ .*: +file format .*
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/elf.exp
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/elf.exp
+@@ -72,6 +72,9 @@ if { [is_elf_format] } then {
+     if {[istarget "csky*-*-*"]} {
+ 	set target_machine -csky
+     }
++    if {[istarget "loongarch*-*-*"]} then {
++	set dump_opts {{as -mno-relax}}
++    }
+     if {[istarget "m32r*-*-*"]} then {
+ 	set target_machine -m32r
+     }
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/elf/section11.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/elf/section11.d
+@@ -2,8 +2,8 @@
+ #readelf: -S --wide
+ #name: Disabling section padding
+ # The RX port uses non standard section names.
+-#xfail: rx-*-*
+-# RISC-V handles alignment via linker relaxation, so object files don't have
++#xfail: loongarch*-* rx-*-*
++# LoongArch and RISC-V handles alignment via linker relaxation, so object files don't have
+ # the expected alignment.
+ #xfail: riscv*-*-*
+ 
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/lns/lns.exp
++++ binutils-2.40.50.20230510/gas/testsuite/gas/lns/lns.exp
+@@ -31,6 +31,7 @@ if { ![istarget s390*-*-*] } {
+ 	 || [istarget cr16-*-*]
+ 	 || [istarget crx-*-*]
+ 	 || [istarget ft32*-*]
++	 || [istarget loongarch*-*-*]
+ 	 || [istarget mn10*-*-*]
+ 	 || [istarget msp430-*-*]
+ 	 || [istarget nds32*-*-*]
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/jmp_op.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/jmp_op.d
+@@ -6,26 +6,45 @@
+ 
+ Disassembly of section .text:
+ 
+-00000000.* <.text>:
+-[ 	]+0:[ 	]+03400000[ 	]+[ 	]+andi[ 	]+\$zero, \$zero, 0x0
+-[ 	]+4:[ 	]+63fffc04[ 	]+[ 	]+blt[ 	]+\$zero, \$a0, -4\(0x3fffc\)[ 	]+# 0x0
+-[ 	]+8:[ 	]+67fff880[ 	]+[ 	]+bge[ 	]+\$a0, \$zero, -8\(0x3fff8\)[ 	]+# 0x0
+-[ 	]+c:[ 	]+67fff404[ 	]+[ 	]+bge[ 	]+\$zero, \$a0, -12\(0x3fff4\)[ 	]+# 0x0
+-[ 	]+10:[ 	]+43fff09f[ 	]+[ 	]+beqz[ 	]+\$a0, -16\(0x7ffff0\)[ 	]+# 0x0
+-[ 	]+14:[ 	]+47ffec9f[ 	]+[ 	]+bnez[ 	]+\$a0, -20\(0x7fffec\)[ 	]+# 0x0
+-[ 	]+18:[ 	]+4bffe81f[ 	]+[ 	]+bceqz[ 	]+\$fcc0, -24\(0x7fffe8\)[ 	]+# 0x0
+-[ 	]+1c:[ 	]+4bffe51f[ 	]+[ 	]+bcnez[ 	]+\$fcc0, -28\(0x7fffe4\)[ 	]+# 0x0
+-[ 	]+20:[ 	]+4c000080[ 	]+[ 	]+jirl[ 	]+\$zero, \$a0, 0
+-[ 	]+24:[ 	]+53ffdfff[ 	]+[ 	]+b[ 	]+-36\(0xfffffdc\)[ 	]+# 0x0
+-[ 	]+28:[ 	]+57ffdbff[ 	]+[ 	]+bl[ 	]+-40\(0xfffffd8\)[ 	]+# 0x0
+-[ 	]+2c:[ 	]+5bffd485[ 	]+[ 	]+beq[ 	]+\$a0, \$a1, -44\(0x3ffd4\)[ 	]+# 0x0
+-[ 	]+30:[ 	]+5fffd085[ 	]+[ 	]+bne[ 	]+\$a0, \$a1, -48\(0x3ffd0\)[ 	]+# 0x0
+-[ 	]+34:[ 	]+63ffcc85[ 	]+[ 	]+blt[ 	]+\$a0, \$a1, -52\(0x3ffcc\)[ 	]+# 0x0
+-[ 	]+38:[ 	]+63ffc8a4[ 	]+[ 	]+blt[ 	]+\$a1, \$a0, -56\(0x3ffc8\)[ 	]+# 0x0
+-[ 	]+3c:[ 	]+67ffc485[ 	]+[ 	]+bge[ 	]+\$a0, \$a1, -60\(0x3ffc4\)[ 	]+# 0x0
+-[ 	]+40:[ 	]+67ffc0a4[ 	]+[ 	]+bge[ 	]+\$a1, \$a0, -64\(0x3ffc0\)[ 	]+# 0x0
+-[ 	]+44:[ 	]+6bffbc85[ 	]+[ 	]+bltu[ 	]+\$a0, \$a1, -68\(0x3ffbc\)[ 	]+# 0x0
+-[ 	]+48:[ 	]+6bffb8a4[ 	]+[ 	]+bltu[ 	]+\$a1, \$a0, -72\(0x3ffb8\)[ 	]+# 0x0
+-[ 	]+4c:[ 	]+6fffb485[ 	]+[ 	]+bgeu[ 	]+\$a0, \$a1, -76\(0x3ffb4\)[ 	]+# 0x0
+-[ 	]+50:[ 	]+6fffb0a4[ 	]+[ 	]+bgeu[ 	]+\$a1, \$a0, -80\(0x3ffb0\)[ 	]+# 0x0
+-[ 	]+54:[ 	]+4c000020[ 	]+[ 	]+jirl[ 	]+\$zero, \$ra, 0
++00000000.* <.L1>:
++[ 	]+0:[ 	]+03400000[ 	]+andi[ 	]+\$zero,[ 	]+\$zero,[ 	]+0x0
++[ 	]+4:[ 	]+63fffc04[ 	]+blt[ 	]+\$zero,[ 	]+\$a0,[ 	]+-4\(0x3fffc\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+4:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+8:[ 	]+67fff880[ 	]+bge[ 	]+\$a0,[ 	]+\$zero,[ 	]+-8\(0x3fff8\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+8:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+c:[ 	]+67fff404[ 	]+bge[ 	]+\$zero,[ 	]+\$a0,[ 	]+-12\(0x3fff4\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+c:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+10:[ 	]+43fff09f[ 	]+beqz[ 	]+\$a0,[ 	]+-16\(0x7ffff0\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+10:[ 	]+R_LARCH_B21[ 	]+\.L1
++[ 	]+14:[ 	]+47ffec9f[ 	]+bnez[ 	]+\$a0,[ 	]+-20\(0x7fffec\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+14:[ 	]+R_LARCH_B21[ 	]+\.L1
++[ 	]+18:[ 	]+4bffe81f[ 	]+bceqz[ 	]+\$fcc0,[ 	]+-24\(0x7fffe8\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+18:[ 	]+R_LARCH_B21[ 	]+\.L1
++[ 	]+1c:[ 	]+4bffe51f[ 	]+bcnez[ 	]+\$fcc0,[ 	]+-28\(0x7fffe4\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+1c:[ 	]+R_LARCH_B21[ 	]+\.L1
++[ 	]+20:[ 	]+4c000080[ 	]+jirl[ 	]+\$zero,[ 	]+\$a0,[ 	]+0
++[ 	]+24:[ 	]+53ffdfff[ 	]+b[ 	]+-36\(0xfffffdc\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+24:[ 	]+R_LARCH_B26[ 	]+\.L1
++[ 	]+28:[ 	]+57ffdbff[ 	]+bl[ 	]+-40\(0xfffffd8\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+28:[ 	]+R_LARCH_B26[ 	]+\.L1
++[ 	]+2c:[ 	]+5bffd485[ 	]+beq[ 	]+\$a0,[ 	]+\$a1,[ 	]+-44\(0x3ffd4\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+2c:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+30:[ 	]+5fffd085[ 	]+bne[ 	]+\$a0,[ 	]+\$a1,[ 	]+-48\(0x3ffd0\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+30:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+34:[ 	]+63ffcc85[ 	]+blt[ 	]+\$a0,[ 	]+\$a1,[ 	]+-52\(0x3ffcc\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+34:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+38:[ 	]+63ffc8a4[ 	]+blt[ 	]+\$a1,[ 	]+\$a0,[ 	]+-56\(0x3ffc8\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+38:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+3c:[ 	]+67ffc485[ 	]+bge[ 	]+\$a0,[ 	]+\$a1,[ 	]+-60\(0x3ffc4\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+3c:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+40:[ 	]+67ffc0a4[ 	]+bge[ 	]+\$a1,[ 	]+\$a0,[ 	]+-64\(0x3ffc0\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+40:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+44:[ 	]+6bffbc85[ 	]+bltu[ 	]+\$a0,[ 	]+\$a1,[ 	]+-68\(0x3ffbc\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+44:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+48:[ 	]+6bffb8a4[ 	]+bltu[ 	]+\$a1,[ 	]+\$a0,[ 	]+-72\(0x3ffb8\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+48:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+4c:[ 	]+6fffb485[ 	]+bgeu[ 	]+\$a0,[ 	]+\$a1,[ 	]+-76\(0x3ffb4\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+4c:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+50:[ 	]+6fffb0a4[ 	]+bgeu[ 	]+\$a1,[ 	]+\$a0,[ 	]+-80\(0x3ffb0\)[ 	]+#[ 	]+0[ 	]+<\.L1>
++[ 	]+50:[ 	]+R_LARCH_B16[ 	]+\.L1
++[ 	]+54:[ 	]+4c000020[ 	]+jirl[ 	]+\$zero,[ 	]+\$ra,[ 	]+0
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/li.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/li.d
+@@ -10,9 +10,11 @@ Disassembly of section .text:
+ 00000000.* <_start>:
+ [ 	]+0:[ 	]+03803c06[ 	]+ori[ 	]+\$a2,[ 	]+\$zero,[ 	]+0xf
+ [ 	]+4:[ 	]+1a000005[ 	]+pcalau12i[ 	]+\$a1,[ 	]+0
+-[ 	]+4:[ 	]+R_LARCH_PCALA_HI20[ 	]+.rodata
+-[ 	]+8:[ 	]+02c000a5[ 	]+addi.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+8:[ 	]+R_LARCH_PCALA_LO12[ 	]+.rodata
++[ 	]+4:[ 	]+R_LARCH_PCALA_HI20[ 	]+msg
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+8:[ 	]+02c000a5[ 	]+addi\.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+8:[ 	]+R_LARCH_PCALA_LO12[ 	]+msg
++[ 	]+8:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+c:[ 	]+03800404[ 	]+ori[ 	]+\$a0,[ 	]+\$zero,[ 	]+0x1
+ [ 	]+10:[ 	]+0381000b[ 	]+ori[ 	]+\$a7,[ 	]+\$zero,[ 	]+0x40
+ [ 	]+14:[ 	]+002b0000[ 	]+syscall[ 	]+0x0
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/macro_op.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/macro_op.d
+@@ -9,51 +9,63 @@ Disassembly of section .text:
+ 
+ 00000000.* <.text>:
+ [ 	]+0:[ 	]+00150004[ 	]+move[ 	]+\$a0,[ 	]+\$zero
+-[ 	]+4:[ 	]+02bffc04[ 	]+addi.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
++[ 	]+4:[ 	]+02bffc04[ 	]+addi\.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
+ [ 	]+8:[ 	]+00150004[ 	]+move[ 	]+\$a0,[ 	]+\$zero
+-[ 	]+c:[ 	]+02bffc04[ 	]+addi.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
++[ 	]+c:[ 	]+02bffc04[ 	]+addi\.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
+ [ 	]+10:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+10:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
+-[ 	]+14:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+14:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+10:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+\.L1
++[ 	]+10:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+14:[ 	]+28c00084[ 	]+ld\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+14:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+\.L1
++[ 	]+14:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+18:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+18:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
+-[ 	]+1c:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+1c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+18:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+\.L1
++[ 	]+18:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+1c:[ 	]+28c00084[ 	]+ld\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+1c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+\.L1
++[ 	]+1c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+20:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
+-[ 	]+24:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
+-[ 	]+28:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
++[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+\.L1
++[ 	]+20:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+24:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+\.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+28:[ 	]+14000004[ 	]+lu12i\.w[ 	]+\$a0,[ 	]+0
+ [ 	]+28:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
+-[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
++[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+\.L1
+ [ 	]+2c:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
+-[ 	]+30:[ 	]+16000004[ 	]+lu32i.d[ 	]+\$a0,[ 	]+0
+-[ 	]+30:[ 	]+R_LARCH_ABS64_LO20[ 	]+.L1
+-[ 	]+34:[ 	]+03000084[ 	]+lu52i.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+34:[ 	]+R_LARCH_ABS64_HI12[ 	]+.L1
++[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+\.L1
++[ 	]+30:[ 	]+16000004[ 	]+lu32i\.d[ 	]+\$a0,[ 	]+0
++[ 	]+30:[ 	]+R_LARCH_ABS64_LO20[ 	]+\.L1
++[ 	]+34:[ 	]+03000084[ 	]+lu52i\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+34:[ 	]+R_LARCH_ABS64_HI12[ 	]+\.L1
+ [ 	]+38:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+38:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
+-[ 	]+3c:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+3c:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_PCALA_HI20[ 	]+\.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+3c:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+3c:[ 	]+R_LARCH_PCALA_LO12[ 	]+\.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+40:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+40:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
+-[ 	]+44:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+44:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
+-[ 	]+48:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
++[ 	]+40:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+\.L1
++[ 	]+40:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+44:[ 	]+28c00084[ 	]+ld\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+44:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+\.L1
++[ 	]+44:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+48:[ 	]+14000004[ 	]+lu12i\.w[ 	]+\$a0,[ 	]+0
+ [ 	]+48:[ 	]+R_LARCH_TLS_LE_HI20[ 	]+TLS1
+ [ 	]+4c:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+ [ 	]+4c:[ 	]+R_LARCH_TLS_LE_LO12[ 	]+TLS1
+ [ 	]+50:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+50:[ 	]+R_LARCH_TLS_IE_PC_HI20[ 	]+TLS1
+-[ 	]+54:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+54:[ 	]+28c00084[ 	]+ld\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+54:[ 	]+R_LARCH_TLS_IE_PC_LO12[ 	]+TLS1
+ [ 	]+58:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+58:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+-[ 	]+5c:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+5c:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+5c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+5c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+60:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+60:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+-[ 	]+64:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+64:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+64:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+64:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/macro_op_32.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/macro_op_32.d
+@@ -14,29 +14,39 @@ Disassembly of section .text:
+ [ 	]+c:[ 	]+02bffc04[ 	]+addi.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
+ [ 	]+10:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+10:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+10:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+14:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+14:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+14:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+18:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+18:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+18:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+1c:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+1c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+1c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+20:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+20:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+24:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+28:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+28:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
+-[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+.text
++[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
+ [ 	]+2c:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+.text
++[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
+ [ 	]+30:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+30:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+30:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+30:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+34:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+34:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+34:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+34:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+38:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+38:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+3c:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+3c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+40:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+40:[ 	]+R_LARCH_TLS_LE_HI20[ 	]+TLS1
+ [ 	]+44:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+@@ -49,7 +59,9 @@ Disassembly of section .text:
+ [ 	]+50:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+ [ 	]+54:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+54:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+54:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+58:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+58:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+ [ 	]+5c:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+5c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+5c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/macro_op_large_abs.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/macro_op_large_abs.d
+@@ -9,36 +9,42 @@ Disassembly of section .text:
+ 
+ 00000000.* <.L1>:
+ [ 	]+0:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+4:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+8:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+8:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+8:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+10:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+14:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+14:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
+-[ 	]+14:[ 	]+R_LARCH_ABS_HI20[ 	]+.text
++[ 	]+14:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
+ [ 	]+18:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+18:[ 	]+R_LARCH_ABS_LO12[ 	]+.text
++[ 	]+18:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
+ [ 	]+1c:[ 	]+16000004[ 	]+lu32i.d[ 	]+\$a0,[ 	]+0
+-[ 	]+1c:[ 	]+R_LARCH_ABS64_LO20[ 	]+.text
++[ 	]+1c:[ 	]+R_LARCH_ABS64_LO20[ 	]+.L1
+ [ 	]+20:[ 	]+03000084[ 	]+lu52i.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+20:[ 	]+R_LARCH_ABS64_HI12[ 	]+.text
++[ 	]+20:[ 	]+R_LARCH_ABS64_HI12[ 	]+.L1
+ [ 	]+24:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+24:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+24:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+28:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+28:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+28:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+28:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+2c:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+2c:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+2c:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+30:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+30:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+30:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+34:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+38:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+38:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+3c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+3c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+40:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+40:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+ [ 	]+44:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -61,6 +67,7 @@ Disassembly of section .text:
+ [ 	]+68:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+ [ 	]+6c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+6c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+6c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+70:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+70:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+ [ 	]+74:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -70,6 +77,7 @@ Disassembly of section .text:
+ [ 	]+7c:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+ [ 	]+80:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+80:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+80:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+84:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+84:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+ [ 	]+88:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+--- binutils-2.40.50.20230510.orig/gas/testsuite/gas/loongarch/macro_op_large_pc.d
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/macro_op_large_pc.d
+@@ -1,4 +1,4 @@
+-#as:
++#as: -mla-global-with-abs
+ #objdump: -dr
+ #skip: loongarch32-*-*
+ 
+@@ -9,69 +9,77 @@ Disassembly of section .text:
+ 
+ 00000000.* <.L1>:
+ [ 	]+0:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+4:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+8:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+8:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+8:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+10:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+14:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+14:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
+-[ 	]+18:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+18:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
+-[ 	]+1c:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+1c:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+-[ 	]+20:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+20:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+.L1
+-[ 	]+24:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+28:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+28:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
+-[ 	]+2c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+2c:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
+-[ 	]+30:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+30:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
+-[ 	]+34:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+34:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
+-[ 	]+38:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+3c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+3c:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
+-[ 	]+40:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+40:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
+-[ 	]+44:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+44:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+-[ 	]+48:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+48:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+.L1
+-[ 	]+4c:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+50:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+-[ 	]+50:[ 	]+R_LARCH_TLS_LE_HI20[ 	]+TLS1
+-[ 	]+54:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+54:[ 	]+R_LARCH_TLS_LE_LO12[ 	]+TLS1
+-[ 	]+58:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+58:[ 	]+R_LARCH_TLS_IE_PC_HI20[ 	]+TLS1
+-[ 	]+5c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+5c:[ 	]+R_LARCH_TLS_IE_PC_LO12[ 	]+TLS1
+-[ 	]+60:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+60:[ 	]+R_LARCH_TLS_IE64_PC_LO20[ 	]+TLS1
+-[ 	]+64:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+64:[ 	]+R_LARCH_TLS_IE64_PC_HI12[ 	]+TLS1
+-[ 	]+68:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+6c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+6c:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+-[ 	]+70:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+70:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
+-[ 	]+74:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+74:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+-[ 	]+78:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+78:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+TLS1
+-[ 	]+7c:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+-[ 	]+80:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+80:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+-[ 	]+84:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+84:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
+-[ 	]+88:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+88:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+-[ 	]+8c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+8c:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+TLS1
+-[ 	]+90:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
++[ 	]+14:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
++[ 	]+14:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
++[ 	]+14:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
++[ 	]+18:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
++[ 	]+18:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
++[ 	]+1c:[ 	]+16000004[ 	]+lu32i.d[ 	]+\$a0,[ 	]+0
++[ 	]+1c:[ 	]+R_LARCH_ABS64_LO20[ 	]+.L1
++[ 	]+20:[ 	]+03000084[ 	]+lu52i.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+20:[ 	]+R_LARCH_ABS64_HI12[ 	]+.L1
++[ 	]+24:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+24:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+28:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
++[ 	]+28:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+28:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+2c:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
++[ 	]+2c:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
++[ 	]+30:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+30:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
++[ 	]+34:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
++[ 	]+38:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+38:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+3c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
++[ 	]+3c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+40:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
++[ 	]+40:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
++[ 	]+44:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+44:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+.L1
++[ 	]+48:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
++[ 	]+4c:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
++[ 	]+4c:[ 	]+R_LARCH_TLS_LE_HI20[ 	]+TLS1
++[ 	]+50:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
++[ 	]+50:[ 	]+R_LARCH_TLS_LE_LO12[ 	]+TLS1
++[ 	]+54:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+54:[ 	]+R_LARCH_TLS_IE_PC_HI20[ 	]+TLS1
++[ 	]+58:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
++[ 	]+58:[ 	]+R_LARCH_TLS_IE_PC_LO12[ 	]+TLS1
++[ 	]+5c:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
++[ 	]+5c:[ 	]+R_LARCH_TLS_IE64_PC_LO20[ 	]+TLS1
++[ 	]+60:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+60:[ 	]+R_LARCH_TLS_IE64_PC_HI12[ 	]+TLS1
++[ 	]+64:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
++[ 	]+68:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+68:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
++[ 	]+6c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
++[ 	]+6c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+6c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+70:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
++[ 	]+70:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
++[ 	]+74:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+74:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+TLS1
++[ 	]+78:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
++[ 	]+7c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+7c:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
++[ 	]+80:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
++[ 	]+80:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+80:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+84:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
++[ 	]+84:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
++[ 	]+88:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
++[ 	]+88:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+TLS1
++[ 	]+8c:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+--- /dev/null
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/relax_align.d
+@@ -0,0 +1,26 @@
++#as:
++#objdump: -dr
++#skip: loongarch32-*-*
++
++.*:[    ]+file format .*
++
++
++Disassembly of section .text:
++
++00000000.* <L1>:
++[ 	]+0:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+L1
++[ 	]+0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+4:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+L1
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+8:[ 	]+03400000[ 	]+andi[ 	]+\$zero,[ 	]+\$zero,[ 	]+0x0
++[ 	]+8:[ 	]+R_LARCH_ALIGN[ 	]+\*ABS\*\+0xc
++[ 	]+c:[ 	]+03400000[ 	]+andi[ 	]+\$zero,[ 	]+\$zero,[ 	]+0x0
++[ 	]+10:[ 	]+03400000[ 	]+andi[ 	]+\$zero,[ 	]+\$zero,[ 	]+0x0
++[ 	]+14:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
++[ 	]+14:[ 	]+R_LARCH_PCALA_HI20[ 	]+L1
++[ 	]+14:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
++[ 	]+18:[ 	]+02c00084[ 	]+addi\.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
++[ 	]+18:[ 	]+R_LARCH_PCALA_LO12[ 	]+L1
++[ 	]+18:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+--- /dev/null
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/relax_align.s
+@@ -0,0 +1,5 @@
++  .text
++L1:
++  la.local $a0, L1
++  .align 4
++  la.local $a0, L1
+--- /dev/null
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/uleb128.d
+@@ -0,0 +1,36 @@
++#as:
++#objdump: -Dr
++#skip: loongarch32-*-*
++
++.*:[    ]+file format .*
++
++
++Disassembly of section .data:
++
++00000000.* <L1-0x5>:
++[ 	]+0:[ 	]+80030201[ 	]+0x80030201
++[ 	]+3:[ 	]+R_LARCH_ADD_ULEB128[ 	]+L2
++[ 	]+3:[ 	]+R_LARCH_SUB_ULEB128[ 	]+L1
++[ 	]+\.\.\.
++
++0000000000000005[ 	]+<L1>:
++[ 	]+\.\.\.
++[ 	]+81:[ 	]+ff040000[ 	]+0xff040000
++[ 	]+85:[ 	]+cacop[ 	]+0x1f,[ 	]+\$t3,[ 	]+1\(0x1\)
++
++0000000000000086[ 	]+<L2>:
++[ 	]+86:[ 	]+07060005[ 	]+0x07060005
++[ 	]+8a:[ 	]+0x00008080
++[ 	]+8a:[ 	]+R_LARCH_ADD_ULEB128[ 	]+L4
++[ 	]+8a:[ 	]+R_LARCH_SUB_ULEB128[ 	]+L3
++
++000000000000008d[ 	]+<L3>:
++[ 	]+\.\.\.
++[ 	]+4089:[ 	]+ff080000[ 	]+0xff080000
++[ 	]+408d:[ 	]+0x09ffffff
++
++0000000000004090[ 	]+<L4>:
++[ 	]+4090:[ 	]+09090909[ 	]+0x09090909
++[ 	]+4094:[ 	]+09090909[ 	]+0x09090909
++[ 	]+4098:[ 	]+09090909[ 	]+0x09090909
++[ 	]+409c:[ 	]+09090909[ 	]+0x09090909
+--- /dev/null
++++ binutils-2.40.50.20230510/gas/testsuite/gas/loongarch/uleb128.s
+@@ -0,0 +1,20 @@
++ .data
++ .byte 1, 2, 3
++ .uleb128 L2 - L1
++L1:
++ .space 128 - 2
++ .byte 4
++ .p2align 1, 0xff
++L2:
++ .byte 5
++
++ .p2align 2
++ .byte 6, 7
++ .uleb128 L4 - L3
++L3:
++ .space 128*128 - 2
++ .byte 8
++ .p2align 2, 0xff
++L4:
++ .byte 9
++ .p2align 4, 9
+--- binutils-2.40.50.20230510.orig/include/elf/loongarch.h
++++ binutils-2.40.50.20230510/include/elf/loongarch.h
+@@ -229,6 +229,26 @@ RELOC_NUMBER (R_LARCH_32_PCREL, 99)
+ /* RELAX.  */
+ RELOC_NUMBER (R_LARCH_RELAX, 100)
+ 
++/* relax delete.  */
++RELOC_NUMBER (R_LARCH_DELETE, 101)
++
++/* relax align.  */
++RELOC_NUMBER (R_LARCH_ALIGN, 102)
++
++/* pcaddi.  */
++RELOC_NUMBER (R_LARCH_PCREL20_S2, 103)
++
++/* cfa.  */
++RELOC_NUMBER (R_LARCH_CFA, 104)
++
++/* DW_CFA_advance_loc.  */
++RELOC_NUMBER (R_LARCH_ADD6, 105)
++RELOC_NUMBER (R_LARCH_SUB6, 106)
++
++/* unsigned leb128.  */
++RELOC_NUMBER (R_LARCH_ADD_ULEB128, 107)
++RELOC_NUMBER (R_LARCH_SUB_ULEB128, 108)
++
+ END_RELOC_NUMBERS (R_LARCH_count)
+ 
+ /* Processor specific flags for the ELF header e_flags field.  */
+--- binutils-2.40.50.20230510.orig/include/opcode/loongarch.h
++++ binutils-2.40.50.20230510/include/opcode/loongarch.h
+@@ -28,6 +28,8 @@ extern "C"
+ {
+ #endif
+ 
++  #define LARCH_NOP 0x03400000
++
+   typedef uint32_t insn_t;
+ 
+   struct loongarch_opcode
+@@ -228,6 +230,7 @@ dec2 : [1-9][0-9]?
+ #define ase_gpcr	isa.use_la_global_with_pcrel
+ #define ase_gabs	isa.use_la_global_with_abs
+ 
++    int relax;
+   } LARCH_opts;
+ 
+   extern size_t loongarch_insn_length (insn_t insn);
+--- binutils-2.40.50.20230510.orig/ld/emultempl/loongarchelf.em
++++ binutils-2.40.50.20230510/ld/emultempl/loongarchelf.em
+@@ -23,6 +23,7 @@ fragment <<EOF
+ #include "ldmain.h"
+ #include "ldctor.h"
+ #include "elf/loongarch.h"
++#include "elfxx-loongarch.h"
+ 
+ static void
+ larch_elf_before_allocation (void)
+@@ -61,6 +62,8 @@ gld${EMULATION_NAME}_after_allocation (v
+ 	}
+     }
+ 
++  enum phase_enum *phase = &(expld.dataseg.phase);
++  bfd_elf${ELFSIZE}_loongarch_set_data_segment_info (&link_info, (int *) phase);
+   /* gld${EMULATION_NAME}_map_segments (need_layout); */
+   ldelf_map_segments (need_layout);
+ }
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-elf/compressed1d.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-elf/compressed1d.d
+@@ -4,10 +4,13 @@
+ #readelf: -SW
+ #xfail: [uses_genelf]
+ #xfail: [riscv_little_endian]
++#xfail: loongarch*-*-*
+ # Not all ELF targets use the elf.em emulation...
+ # RISC-V has linker relaxations that delete code, so text label subtractions
+ # do not get resolved at assembly time, which results in a compressed section
+ # for little endian targets; but it is uncompressed for big endian targets.
++# LoongArch has linker relaxations that delete code, so text label subtractions
++# do not get resolved at assembly time, which results in a compressed section.
+ 
+ #failif
+ #...
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-elf/pr26936.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-elf/pr26936.d
+@@ -6,10 +6,10 @@
+ #readelf: -wL -W
+ #target: [check_shared_lib_support]
+ # Assembly source file for the HPPA assembler is renamed and modifed by
+-# sed.  mn10300 and riscv put different numbers of local symbols in
++# sed. loongarch and mn10300 and riscv put different numbers of local symbols in
+ # linkonce section and comdat sections.  xtensa has more than one member
+ # in comdat groups.
+-#xfail: am33_2.0-*-* hppa*-*-hpux* mn10300-*-* riscv*-*-* xtensa*-*-*
++#xfail: am33_2.0-*-* hppa*-*-hpux* loongarch*-*-* mn10300-*-* riscv*-*-* xtensa*-*-*
+ 
+ #...
+ CU: .*/pr26936c.s:
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-elf/shared.exp
++++ binutils-2.40.50.20230510/ld/testsuite/ld-elf/shared.exp
+@@ -504,7 +504,8 @@ run_ld_link_tests [list \
+ # but that is just an optimization so don't complain loudly.
+ setup_xfail *-*-*
+ clear_xfail alpha-*-* bfin-*-linux* csky-*-* frv-*-* hppa*-*-* i?86-*-*
+-clear_xfail ia64-*-* microblaze-*-* powerpc*-*-* x86_64-*-* xtensa-*-*
++clear_xfail ia64-*-* loongarch*-*-* microblaze-*-* powerpc*-*-* x86_64-*-*
++clear_xfail xtensa-*-*
+ run_ld_link_tests {
+     {"pr22374 function pointer initialization"
+ 	"" "tmpdir/pr22374.so" "" "pr22374a.s"
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-loongarch-elf/disas-jirl-32.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/disas-jirl-32.d
+@@ -10,6 +10,8 @@ Disassembly of section .text:
+ 00000000.* <_start>:
+ [ 	]+0:[ 	]+1a000014[ 	]+pcalau12i[ 	]+\$t8,[ 	]+0
+ [ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+_start
++[ 	]+0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+4:[ 	]+02800294[ 	]+addi.w[ 	]+\$t8,[ 	]+\$t8,[ 	]+0
+ [ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+_start
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+8:[ 	]+4c000281[ 	]+jirl[ 	]+\$ra,[ 	]+\$t8,[ 	]+0
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-loongarch-elf/disas-jirl.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/disas-jirl.d
+@@ -6,9 +6,11 @@
+ 
+ Disassembly of section .text:
+ 
+-00000000.*:
++00000000.* <_start>:
+ [ 	]+0:[ 	]+1a000014[ 	]+pcalau12i[ 	]+\$t8,[ 	]+0
+ [ 	]+0:[ 	]+R_LARCH_PCALA_HI20[ 	]+_start
++[ 	]+0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+4:[ 	]+02c00294[ 	]+addi.d[ 	]+\$t8,[ 	]+\$t8,[ 	]+0
+ [ 	]+4:[ 	]+R_LARCH_PCALA_LO12[ 	]+_start
++[ 	]+4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+8:[ 	]+4c000281[ 	]+jirl[ 	]+\$ra,[ 	]+\$t8,[ 	]+0
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-loongarch-elf/jmp_op.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/jmp_op.d
+@@ -6,26 +6,45 @@
+ 
+ Disassembly of section .text:
+ 
+-00000000.* <.text>:
+-[ 	]+0:[ 	]+03400000[ 	]+[ 	]+andi[ 	]+\$zero, \$zero, 0x0
+-[ 	]+4:[ 	]+63fffc04[ 	]+[ 	]+blt[ 	]+\$zero, \$a0, -4\(0x3fffc\)[ 	]+# 0x0
+-[ 	]+8:[ 	]+67fff880[ 	]+[ 	]+bge[ 	]+\$a0, \$zero, -8\(0x3fff8\)[ 	]+# 0x0
+-[ 	]+c:[ 	]+67fff404[ 	]+[ 	]+bge[ 	]+\$zero, \$a0, -12\(0x3fff4\)[ 	]+# 0x0
+-[ 	]+10:[ 	]+43fff09f[ 	]+[ 	]+beqz[ 	]+\$a0, -16\(0x7ffff0\)[ 	]+# 0x0
+-[ 	]+14:[ 	]+47ffec9f[ 	]+[ 	]+bnez[ 	]+\$a0, -20\(0x7fffec\)[ 	]+# 0x0
+-[ 	]+18:[ 	]+4bffe81f[ 	]+[ 	]+bceqz[ 	]+\$fcc0, -24\(0x7fffe8\)[ 	]+# 0x0
+-[ 	]+1c:[ 	]+4bffe51f[ 	]+[ 	]+bcnez[ 	]+\$fcc0, -28\(0x7fffe4\)[ 	]+# 0x0
+-[ 	]+20:[ 	]+4c000080[ 	]+[ 	]+jirl[ 	]+\$zero, \$a0, 0
+-[ 	]+24:[ 	]+53ffdfff[ 	]+[ 	]+b[ 	]+-36\(0xfffffdc\)[ 	]+# 0x0
+-[ 	]+28:[ 	]+57ffdbff[ 	]+[ 	]+bl[ 	]+-40\(0xfffffd8\)[ 	]+# 0x0
+-[ 	]+2c:[ 	]+5bffd485[ 	]+[ 	]+beq[ 	]+\$a0, \$a1, -44\(0x3ffd4\)[ 	]+# 0x0
+-[ 	]+30:[ 	]+5fffd085[ 	]+[ 	]+bne[ 	]+\$a0, \$a1, -48\(0x3ffd0\)[ 	]+# 0x0
+-[ 	]+34:[ 	]+63ffcc85[ 	]+[ 	]+blt[ 	]+\$a0, \$a1, -52\(0x3ffcc\)[ 	]+# 0x0
+-[ 	]+38:[ 	]+63ffc8a4[ 	]+[ 	]+blt[ 	]+\$a1, \$a0, -56\(0x3ffc8\)[ 	]+# 0x0
+-[ 	]+3c:[ 	]+67ffc485[ 	]+[ 	]+bge[ 	]+\$a0, \$a1, -60\(0x3ffc4\)[ 	]+# 0x0
+-[ 	]+40:[ 	]+67ffc0a4[ 	]+[ 	]+bge[ 	]+\$a1, \$a0, -64\(0x3ffc0\)[ 	]+# 0x0
+-[ 	]+44:[ 	]+6bffbc85[ 	]+[ 	]+bltu[ 	]+\$a0, \$a1, -68\(0x3ffbc\)[ 	]+# 0x0
+-[ 	]+48:[ 	]+6bffb8a4[ 	]+[ 	]+bltu[ 	]+\$a1, \$a0, -72\(0x3ffb8\)[ 	]+# 0x0
+-[ 	]+4c:[ 	]+6fffb485[ 	]+[ 	]+bgeu[ 	]+\$a0, \$a1, -76\(0x3ffb4\)[ 	]+# 0x0
+-[ 	]+50:[ 	]+6fffb0a4[ 	]+[ 	]+bgeu[ 	]+\$a1, \$a0, -80\(0x3ffb0\)[ 	]+# 0x0
+-[ 	]+54:[ 	]+4c000020[ 	]+[ 	]+jirl[ 	]+\$zero, \$ra, 0
++00000000.* <.L1>:
++[ 	]+0:[ 	]+03400000[ 	]+andi[ 	]+\$zero,[ 	]+\$zero,[ 	]+0x0
++[ 	]+4:[ 	]+63fffc04[ 	]+blt[ 	]+\$zero,[ 	]+\$a0,[ 	]+-4\(0x3fffc\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+4:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+8:[ 	]+67fff880[ 	]+bge[ 	]+\$a0,[ 	]+\$zero,[ 	]+-8\(0x3fff8\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+8:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+c:[ 	]+67fff404[ 	]+bge[ 	]+\$zero,[ 	]+\$a0,[ 	]+-12\(0x3fff4\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+c:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+10:[ 	]+43fff09f[ 	]+beqz[ 	]+\$a0,[ 	]+-16\(0x7ffff0\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+10:[ 	]+R_LARCH_B21[ 	]+.L1
++[ 	]+14:[ 	]+47ffec9f[ 	]+bnez[ 	]+\$a0,[ 	]+-20\(0x7fffec\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+14:[ 	]+R_LARCH_B21[ 	]+.L1
++[ 	]+18:[ 	]+4bffe81f[ 	]+bceqz[ 	]+\$fcc0,[ 	]+-24\(0x7fffe8\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+18:[ 	]+R_LARCH_B21[ 	]+.L1
++[ 	]+1c:[ 	]+4bffe51f[ 	]+bcnez[ 	]+\$fcc0,[ 	]+-28\(0x7fffe4\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+1c:[ 	]+R_LARCH_B21[ 	]+.L1
++[ 	]+20:[ 	]+4c000080[ 	]+jirl[ 	]+\$zero,[ 	]+\$a0,[ 	]+0
++[ 	]+24:[ 	]+53ffdfff[ 	]+b[ 	]+-36\(0xfffffdc\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+24:[ 	]+R_LARCH_B26[ 	]+.L1
++[ 	]+28:[ 	]+57ffdbff[ 	]+bl[ 	]+-40\(0xfffffd8\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+28:[ 	]+R_LARCH_B26[ 	]+.L1
++[ 	]+2c:[ 	]+5bffd485[ 	]+beq[ 	]+\$a0,[ 	]+\$a1,[ 	]+-44\(0x3ffd4\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+2c:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+30:[ 	]+5fffd085[ 	]+bne[ 	]+\$a0,[ 	]+\$a1,[ 	]+-48\(0x3ffd0\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+30:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+34:[ 	]+63ffcc85[ 	]+blt[ 	]+\$a0,[ 	]+\$a1,[ 	]+-52\(0x3ffcc\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+34:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+38:[ 	]+63ffc8a4[ 	]+blt[ 	]+\$a1,[ 	]+\$a0,[ 	]+-56\(0x3ffc8\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+38:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+3c:[ 	]+67ffc485[ 	]+bge[ 	]+\$a0,[ 	]+\$a1,[ 	]+-60\(0x3ffc4\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+3c:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+40:[ 	]+67ffc0a4[ 	]+bge[ 	]+\$a1,[ 	]+\$a0,[ 	]+-64\(0x3ffc0\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+40:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+44:[ 	]+6bffbc85[ 	]+bltu[ 	]+\$a0,[ 	]+\$a1,[ 	]+-68\(0x3ffbc\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+44:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+48:[ 	]+6bffb8a4[ 	]+bltu[ 	]+\$a1,[ 	]+\$a0,[ 	]+-72\(0x3ffb8\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+48:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+4c:[ 	]+6fffb485[ 	]+bgeu[ 	]+\$a0,[ 	]+\$a1,[ 	]+-76\(0x3ffb4\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+4c:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+50:[ 	]+6fffb0a4[ 	]+bgeu[ 	]+\$a1,[ 	]+\$a0,[ 	]+-80\(0x3ffb0\)[ 	]+#[ 	]+0[ 	]+<.L1>
++[ 	]+50:[ 	]+R_LARCH_B16[ 	]+.L1
++[ 	]+54:[ 	]+4c000020[ 	]+jirl[ 	]+\$zero,[ 	]+\$ra,[ 	]+0
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-loongarch-elf/macro_op.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/macro_op.d
+@@ -13,16 +13,22 @@ Disassembly of section .text:
+ [ 	]+c:[ 	]+02bffc04[ 	]+addi.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
+ [ 	]+10:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+10:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+10:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+14:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+14:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+14:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+18:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+18:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+18:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+1c:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+1c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+1c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+20:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+20:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+20:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+24:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+24:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+28:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+28:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+ [ 	]+2c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -30,12 +36,16 @@ Disassembly of section .text:
+ [ 	]+30:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+34:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+34:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+34:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+38:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+38:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+3c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+3c:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+40:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+40:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+40:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+44:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+44:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+ [ 	]+48:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -43,77 +53,99 @@ Disassembly of section .text:
+ [ 	]+4c:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+50:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+50:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+50:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+54:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+54:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+54:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+58:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+58:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+58:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+5c:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+5c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+5c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+60:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+60:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+ [ 	]+64:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+ [ 	]+64:[ 	]+R_LARCH_GOT64_PC_HI12[ 	]+.L1
+ [ 	]+68:[ 	]+380c1484[ 	]+ldx.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+6c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+6c:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+6c:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+6c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+70:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+70:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+70:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+70:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+74:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+74:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+74:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+74:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+78:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+78:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+78:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+78:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+7c:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+7c:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+7c:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+80:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+80:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+80:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+84:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+88:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+88:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+88:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+88:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+8c:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+8c:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+8c:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+8c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+90:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+90:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+90:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+90:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+94:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+94:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+94:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+94:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+98:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+98:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+98:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+9c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+9c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+9c:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+a0:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+a4:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+a4:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
+-[ 	]+a4:[ 	]+R_LARCH_ABS_HI20[ 	]+.text
++[ 	]+a4:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
+ [ 	]+a8:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+a8:[ 	]+R_LARCH_ABS_LO12[ 	]+.text
++[ 	]+a8:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
+ [ 	]+ac:[ 	]+16000004[ 	]+lu32i.d[ 	]+\$a0,[ 	]+0
+-[ 	]+ac:[ 	]+R_LARCH_ABS64_LO20[ 	]+.text
++[ 	]+ac:[ 	]+R_LARCH_ABS64_LO20[ 	]+.L1
+ [ 	]+b0:[ 	]+03000084[ 	]+lu52i.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+b0:[ 	]+R_LARCH_ABS64_HI12[ 	]+.text
++[ 	]+b0:[ 	]+R_LARCH_ABS64_HI12[ 	]+.L1
+ [ 	]+b4:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+b4:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+b4:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+b4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+b8:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+b8:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+b8:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+b8:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+bc:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+bc:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+bc:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+bc:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+c0:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+c0:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+c0:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+c0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+c4:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+c4:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+c4:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+c4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+c8:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+-[ 	]+c8:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+c8:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+c8:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+cc:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+-[ 	]+cc:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.text
++[ 	]+cc:[ 	]+R_LARCH_PCALA64_LO20[ 	]+.L1
+ [ 	]+d0:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+-[ 	]+d0:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.text
++[ 	]+d0:[ 	]+R_LARCH_PCALA64_HI12[ 	]+.L1
+ [ 	]+d4:[ 	]+00109484[ 	]+add.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+\$a1
+ [ 	]+d8:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+d8:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+d8:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+dc:[ 	]+28c00084[ 	]+ld.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+dc:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+dc:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+e0:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+e0:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+e0:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+e4:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+e4:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+e4:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+e8:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+e8:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+.L1
+ [ 	]+ec:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -140,10 +172,12 @@ Disassembly of section .text:
+ [ 	]+118:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+ [ 	]+11c:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+11c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+11c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+120:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+120:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+ [ 	]+124:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+124:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+124:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+128:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+128:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+ [ 	]+12c:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+@@ -153,10 +187,12 @@ Disassembly of section .text:
+ [ 	]+134:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+ [ 	]+138:[ 	]+02c00084[ 	]+addi.d[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+138:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+138:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+13c:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+13c:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+ [ 	]+140:[ 	]+02c00005[ 	]+addi.d[ 	]+\$a1,[ 	]+\$zero,[ 	]+0
+ [ 	]+140:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+140:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+144:[ 	]+16000005[ 	]+lu32i.d[ 	]+\$a1,[ 	]+0
+ [ 	]+144:[ 	]+R_LARCH_GOT64_PC_LO20[ 	]+TLS1
+ [ 	]+148:[ 	]+030000a5[ 	]+lu52i.d[ 	]+\$a1,[ 	]+\$a1,[ 	]+0
+--- binutils-2.40.50.20230510.orig/ld/testsuite/ld-loongarch-elf/macro_op_32.d
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/macro_op_32.d
+@@ -14,29 +14,39 @@ Disassembly of section .text:
+ [ 	]+c:[ 	]+02bffc04[ 	]+addi.w[ 	]+\$a0,[ 	]+\$zero,[ 	]+-1\(0xfff\)
+ [ 	]+10:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+10:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+10:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+14:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+14:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+14:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+18:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+18:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+18:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+1c:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+1c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+1c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+20:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+20:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+20:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+24:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+24:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+24:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+28:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+28:[ 	]+R_LARCH_MARK_LA[ 	]+\*ABS\*
+-[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+.text
++[ 	]+28:[ 	]+R_LARCH_ABS_HI20[ 	]+.L1
+ [ 	]+2c:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+-[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+.text
++[ 	]+2c:[ 	]+R_LARCH_ABS_LO12[ 	]+.L1
+ [ 	]+30:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+-[ 	]+30:[ 	]+R_LARCH_PCALA_HI20[ 	]+.text
++[ 	]+30:[ 	]+R_LARCH_PCALA_HI20[ 	]+.L1
++[ 	]+30:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+34:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+-[ 	]+34:[ 	]+R_LARCH_PCALA_LO12[ 	]+.text
++[ 	]+34:[ 	]+R_LARCH_PCALA_LO12[ 	]+.L1
++[ 	]+34:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+38:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+38:[ 	]+R_LARCH_GOT_PC_HI20[ 	]+.L1
++[ 	]+38:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+3c:[ 	]+28800084[ 	]+ld.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+3c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+.L1
++[ 	]+3c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+40:[ 	]+14000004[ 	]+lu12i.w[ 	]+\$a0,[ 	]+0
+ [ 	]+40:[ 	]+R_LARCH_TLS_LE_HI20[ 	]+TLS1
+ [ 	]+44:[ 	]+03800084[ 	]+ori[ 	]+\$a0,[ 	]+\$a0,[ 	]+0x0
+@@ -49,7 +59,9 @@ Disassembly of section .text:
+ [ 	]+50:[ 	]+R_LARCH_TLS_LD_PC_HI20[ 	]+TLS1
+ [ 	]+54:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+54:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+54:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+ [ 	]+58:[ 	]+1a000004[ 	]+pcalau12i[ 	]+\$a0,[ 	]+0
+ [ 	]+58:[ 	]+R_LARCH_TLS_GD_PC_HI20[ 	]+TLS1
+ [ 	]+5c:[ 	]+02800084[ 	]+addi.w[ 	]+\$a0,[ 	]+\$a0,[ 	]+0
+ [ 	]+5c:[ 	]+R_LARCH_GOT_PC_LO12[ 	]+TLS1
++[ 	]+5c:[ 	]+R_LARCH_RELAX[ 	]+\*ABS\*
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/relax-align.dd
+@@ -0,0 +1,7 @@
++#...
++.*pcaddi.*
++.*pcaddi.*
++.*andi.*
++.*andi.*
++.*0:.*pcaddi.*
++#pass
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/relax-align.s
+@@ -0,0 +1,9 @@
++# relax-align.o has 3 andi(nop) insns.
++# relax-align has 2 andi insns, ld relax delete andi insns.
++# the last pcaddi 16 bytes align.
++  .text
++L1:
++  la.local $a0, L1
++  la.local $a0, L1
++  .align 4
++  la.local $a0, L1
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/relax.exp
+@@ -0,0 +1,73 @@
++# Expect script for LoongArch ELF linker tests
++#   Copyright (C) 2022 Free Software Foundation, Inc.
++#
++# This file is part of the GNU Binutils.
++#
++# This program is free software; you can redistribute it and/or modify
++# it under the terms of the GNU General Public License as published by
++# the Free Software Foundation; either version 3 of the License, or
++# (at your option) any later version.
++#
++# This program is distributed in the hope that it will be useful,
++# but WITHOUT ANY WARRANTY; without even the implied warranty of
++# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++# GNU General Public License for more details.
++#
++# You should have received a copy of the GNU General Public License
++# along with this program; if not, write to the Free Software
++# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
++# MA 02110-1301, USA.
++#
++
++if [istarget loongarch64-*-*] {
++
++  set testname "loongarch relax build"
++  set pre_builds [list \
++    [list \
++      "$testname" \
++      "" \
++      "" \
++      {relax.s} \
++      {} \
++      "relax" \
++    ] \
++  ]
++
++  run_cc_link_tests $pre_builds
++
++  set objdump_output [run_host_cmd "objdump" "-d tmpdir/relax"]
++  if { [ regexp ".*pcaddi.*pcaddi.*" $objdump_output] } {
++    pass "loongarch relax"
++  } {
++    fail "loongarch relax"
++  }
++
++  run_ld_link_tests \
++      [list \
++	  [list \
++	      "relax-align" \
++	      "-e 0x0 -z relro" "" \
++	      "" \
++	      {relax-align.s} \
++	      [list \
++		  [list objdump -d relax-align.dd] \
++	      ] \
++	      "relax-align" \
++	  ] \
++      ]
++
++  set objdump_flags "-s -j .data"
++  run_ld_link_tests \
++      [list \
++	  [list \
++	      "uleb128" \
++	      "-e 0x0" "" \
++	      "" \
++	      {uleb128.s} \
++	      [list \
++		  [list objdump $objdump_flags uleb128.dd] \
++	      ] \
++	      "uleb128" \
++	  ] \
++      ]
++}
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/relax.s
+@@ -0,0 +1,16 @@
++  .data
++  .global a
++  .type a, @object
++a:
++  .word 123
++
++  .text
++  .global main
++  .type main, @function
++main:
++  la.local $a0, a
++  ld.w $a1, $a0, 0
++  la.global $a0, a
++  ld.w $a0, $a0, 0
++  sub.d $a0, $a0, $a1
++  jr $ra
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/uleb128.dd
+@@ -0,0 +1,10 @@
++.*: .*
++
++Contents of section .*
++ [0-9a-f]+ 01020381 01000000 00000000 00000000.*
++#...
++ [0-9a-f]+ 00000004 ffff0500 06078380 01000000.*
++#...
++ [0-9a-f]+ 00000000 00000000 00000008 ffffffff.*
++ [0-9a-f]+ 09090909 09090909 09090909 09090909.*
++#pass
+--- /dev/null
++++ binutils-2.40.50.20230510/ld/testsuite/ld-loongarch-elf/uleb128.s
+@@ -0,0 +1,21 @@
++# From gas/all/relax.s, test ld process add_uleb128/sub_uleb128 reloc pair.
++ .data
++ .byte 1, 2, 3
++ .uleb128 L2 - L1
++L1:
++ .space 128 - 2
++ .byte 4
++ .p2align 1, 0xff
++L2:
++ .byte 5
++
++ .p2align 2
++ .byte 6, 7
++ .uleb128 L4 - L3
++L3:
++ .space 128*128 - 2
++ .byte 8
++ .p2align 2, 0xff
++L4:
++ .byte 9
++ .p2align 4, 9
+--- binutils-2.40.50.20230510.orig/opcodes/loongarch-opc.c
++++ binutils-2.40.50.20230510/opcodes/loongarch-opc.c
+@@ -22,7 +22,10 @@
+ #include "opcode/loongarch.h"
+ #include "libiberty.h"
+ 
+-struct loongarch_ASEs_option LARCH_opts;
++struct loongarch_ASEs_option LARCH_opts =
++{
++  .relax = 1
++};
+ 
+ size_t
+ loongarch_insn_length (insn_t insn ATTRIBUTE_UNUSED)
diff -uNr a/debian/patches/support-loongarch-vector.patch b/debian/patches/support-loongarch-vector.patch
--- a/debian/patches/support-loongarch-vector.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/support-loongarch-vector.patch	2023-05-29 15:23:22.000000000 +0800
@@ -0,0 +1,1562 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ binutils (2.40-2.ulb2) unstable; urgency=medium
+ .
+   * Non-maintainer upload.
+   * support loongarch vector
+Author: root <root@debian-loongarch>
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-05-19
+
+--- binutils-2.40.orig/gas/config/tc-loongarch.c
++++ binutils-2.40/gas/config/tc-loongarch.c
+@@ -158,6 +158,8 @@ md_parse_option (int c, const char *arg)
+ 	{
+ 	  LARCH_opts.ase_ilp32 = 1;
+ 	  LARCH_opts.ase_lp64 = 1;
++	  LARCH_opts.ase_lsx = 1;
++	  LARCH_opts.ase_lasx = 1;
+ 	  LARCH_opts.ase_abi = lp64[suf[4]];
+ 	}
+       else if (strncasecmp (arg, "ilp32", 5) == 0 && ilp32[suf[5]] != 0)
+@@ -223,6 +225,8 @@ loongarch_after_parse_args ()
+ 	  LARCH_opts.ase_abi = EF_LOONGARCH_ABI_DOUBLE_FLOAT;
+ 	  LARCH_opts.ase_ilp32 = 1;
+ 	  LARCH_opts.ase_lp64 = 1;
++	  LARCH_opts.ase_lsx = 1;
++	  LARCH_opts.ase_lasx = 1;
+ 	}
+       else if (strcmp (default_arch, "loongarch32") == 0)
+ 	{
+--- binutils-2.40.orig/opcodes/loongarch-opc.c
++++ binutils-2.40/opcodes/loongarch-opc.c
+@@ -576,6 +576,14 @@ static struct loongarch_opcode loongarch
+   { 0x08500000, 0xfff00000,	"fmsub.s",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
+   { 0x08900000, 0xfff00000,	"fnmadd.s",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
+   { 0x08d00000, 0xfff00000,	"fnmsub.s",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
++  { 0x09100000, 0xfff00000,     "vfmadd.s",     "v0:5,v5:5,v10:5,v15:5",        0,                      0,      0,      0 },
++  { 0x09500000, 0xfff00000,     "vfmsub.s",     "v0:5,v5:5,v10:5,v15:5",        0,                      0,      0,      0 },
++  { 0x09900000, 0xfff00000,     "vfnmadd.s",    "v0:5,v5:5,v10:5,v15:5",        0,                      0,      0,      0 },
++  { 0x09d00000, 0xfff00000,     "vfnmsub.s",    "v0:5,v5:5,v10:5,v15:5",        0,                      0,      0,      0 },
++  { 0x0a100000, 0xfff00000,     "xvfmadd.s",    "x0:5,x5:5,x10:5,x15:5",        0,                      0,      0,      0 },
++  { 0x0a500000, 0xfff00000,     "xvfmsub.s",    "x0:5,x5:5,x10:5,x15:5",        0,                      0,      0,      0 },
++  { 0x0a900000, 0xfff00000,     "xvfnmadd.s",   "x0:5,x5:5,x10:5,x15:5",        0,                      0,      0,      0 },
++  { 0x0ad00000, 0xfff00000,     "xvfnmsub.s",   "x0:5,x5:5,x10:5,x15:5",        0,                      0,      0,      0 },
+   { 0x0c100000, 0xffff8018,	"fcmp.caf.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c108000, 0xffff8018,	"fcmp.saf.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c110000, 0xffff8018,	"fcmp.clt.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+@@ -602,7 +610,55 @@ static struct loongarch_opcode loongarch
+   { 0x0c1a8000, 0xffff8018,	"fcmp.sor.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c1c0000, 0xffff8018,	"fcmp.cune.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c1c8000, 0xffff8018,	"fcmp.sune.s",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
++  { 0x0c500000, 0xffff8000,     "vfcmp.caf.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c508000, 0xffff8000,     "vfcmp.saf.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c510000, 0xffff8000,     "vfcmp.clt.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c518000, 0xffff8000,     "vfcmp.slt.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c520000, 0xffff8000,     "vfcmp.ceq.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c528000, 0xffff8000,     "vfcmp.seq.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c530000, 0xffff8000,     "vfcmp.cle.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c538000, 0xffff8000,     "vfcmp.sle.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c540000, 0xffff8000,     "vfcmp.cun.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c548000, 0xffff8000,     "vfcmp.sun.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c550000, 0xffff8000,     "vfcmp.cult.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c558000, 0xffff8000,     "vfcmp.sult.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c560000, 0xffff8000,     "vfcmp.cueq.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c568000, 0xffff8000,     "vfcmp.sueq.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c570000, 0xffff8000,     "vfcmp.cule.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c578000, 0xffff8000,     "vfcmp.sule.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c580000, 0xffff8000,     "vfcmp.cne.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c588000, 0xffff8000,     "vfcmp.sne.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c5a0000, 0xffff8000,     "vfcmp.cor.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c5a8000, 0xffff8000,     "vfcmp.sor.s",  "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c5c0000, 0xffff8000,     "vfcmp.cune.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c5c8000, 0xffff8000,     "vfcmp.sune.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c900000, 0xffff8000,     "xvfcmp.caf.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c908000, 0xffff8000,     "xvfcmp.saf.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c910000, 0xffff8000,     "xvfcmp.clt.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c918000, 0xffff8000,     "xvfcmp.slt.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c920000, 0xffff8000,     "xvfcmp.ceq.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c928000, 0xffff8000,     "xvfcmp.seq.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c930000, 0xffff8000,     "xvfcmp.cle.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c938000, 0xffff8000,     "xvfcmp.sle.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c940000, 0xffff8000,     "xvfcmp.cun.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c948000, 0xffff8000,     "xvfcmp.sun.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c950000, 0xffff8000,     "xvfcmp.cult.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c958000, 0xffff8000,     "xvfcmp.sult.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c960000, 0xffff8000,     "xvfcmp.cueq.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c968000, 0xffff8000,     "xvfcmp.sueq.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c970000, 0xffff8000,     "xvfcmp.cule.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c978000, 0xffff8000,     "xvfcmp.sule.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c980000, 0xffff8000,     "xvfcmp.cne.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c988000, 0xffff8000,     "xvfcmp.sne.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c9a0000, 0xffff8000,     "xvfcmp.cor.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c9a8000, 0xffff8000,     "xvfcmp.sor.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c9c0000, 0xffff8000,     "xvfcmp.cune.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0c9c8000, 0xffff8000,     "xvfcmp.sune.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
+   { 0x0d000000, 0xfffc0000,	"fsel",		"f0:5,f5:5,f10:5,c15:3",	0,			0,	0,	0 },
++  { 0x0d100000, 0xfff00000, "vbitsel.v", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x0d200000, 0xfff00000, "xvbitsel.v", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
++  { 0x0d500000, 0xfff00000, "vshuf.b", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x0d600000, 0xfff00000, "xvshuf.b", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
+   { 0 } /* Terminate the list.  */
+ };
+ 
+@@ -613,6 +669,14 @@ static struct loongarch_opcode loongarch
+   { 0x08600000, 0xfff00000,	"fmsub.d",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
+   { 0x08a00000, 0xfff00000,	"fnmadd.d",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
+   { 0x08e00000, 0xfff00000,	"fnmsub.d",	"f0:5,f5:5,f10:5,f15:5",	0,			0,	0,	0 },
++  { 0x09200000, 0xfff00000, "vfmadd.d", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x09600000, 0xfff00000, "vfmsub.d", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x09a00000, 0xfff00000, "vfnmadd.d", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x09e00000, 0xfff00000, "vfnmsub.d", "v0:5,v5:5,v10:5,v15:5", 0, 0, 0, 0},
++  { 0x0a200000, 0xfff00000, "xvfmadd.d", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
++  { 0x0a600000, 0xfff00000, "xvfmsub.d", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
++  { 0x0aa00000, 0xfff00000, "xvfnmadd.d", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
++  { 0x0ae00000, 0xfff00000, "xvfnmsub.d", "x0:5,x5:5,x10:5,x15:5", 0, 0, 0, 0},
+   { 0x0c200000, 0xffff8018,	"fcmp.caf.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c208000, 0xffff8018,	"fcmp.saf.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c210000, 0xffff8018,	"fcmp.clt.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+@@ -639,6 +703,50 @@ static struct loongarch_opcode loongarch
+   { 0x0c2a8000, 0xffff8018,	"fcmp.sor.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c2c0000, 0xffff8018,	"fcmp.cune.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
+   { 0x0c2c8000, 0xffff8018,	"fcmp.sune.d",	"c0:3,f5:5,f10:5",		0,			0,	0,	0 },
++  { 0x0c600000, 0xffff8000, "vfcmp.caf.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c608000, 0xffff8000, "vfcmp.saf.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c610000, 0xffff8000, "vfcmp.clt.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c618000, 0xffff8000, "vfcmp.slt.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c620000, 0xffff8000, "vfcmp.ceq.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c628000, 0xffff8000, "vfcmp.seq.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c630000, 0xffff8000, "vfcmp.cle.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c638000, 0xffff8000, "vfcmp.sle.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c640000, 0xffff8000, "vfcmp.cun.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c648000, 0xffff8000, "vfcmp.sun.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c650000, 0xffff8000, "vfcmp.cult.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c658000, 0xffff8000, "vfcmp.sult.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c660000, 0xffff8000, "vfcmp.cueq.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c668000, 0xffff8000, "vfcmp.sueq.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c670000, 0xffff8000, "vfcmp.cule.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c678000, 0xffff8000, "vfcmp.sule.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c680000, 0xffff8000, "vfcmp.cne.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c688000, 0xffff8000, "vfcmp.sne.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c6a0000, 0xffff8000, "vfcmp.cor.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c6a8000, 0xffff8000, "vfcmp.sor.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c6c0000, 0xffff8000, "vfcmp.cune.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0c6c8000, 0xffff8000, "vfcmp.sune.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x0ca00000, 0xffff8000, "xvfcmp.caf.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca08000, 0xffff8000, "xvfcmp.saf.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca10000, 0xffff8000, "xvfcmp.clt.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca18000, 0xffff8000, "xvfcmp.slt.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca20000, 0xffff8000, "xvfcmp.ceq.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca28000, 0xffff8000, "xvfcmp.seq.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca30000, 0xffff8000, "xvfcmp.cle.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca38000, 0xffff8000, "xvfcmp.sle.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca40000, 0xffff8000, "xvfcmp.cun.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca48000, 0xffff8000, "xvfcmp.sun.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca50000, 0xffff8000, "xvfcmp.cult.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca58000, 0xffff8000, "xvfcmp.sult.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca60000, 0xffff8000, "xvfcmp.cueq.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca68000, 0xffff8000, "xvfcmp.sueq.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca70000, 0xffff8000, "xvfcmp.cule.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca78000, 0xffff8000, "xvfcmp.sule.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca80000, 0xffff8000, "xvfcmp.cne.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0ca88000, 0xffff8000, "xvfcmp.sne.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0caa0000, 0xffff8000, "xvfcmp.cor.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0caa8000, 0xffff8000, "xvfcmp.sor.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0cac0000, 0xffff8000, "xvfcmp.cune.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x0cac8000, 0xffff8000, "xvfcmp.sune.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
+   { 0 } /* Terminate the list.  */
+ };
+ 
+@@ -767,6 +875,30 @@ static struct loongarch_opcode loongarch
+   { 0x387e8000, 0xffff8000,	"stle.h",	"r0:5,r5:5,r10:5",		0,			0,	0,	0 },
+   { 0x387f0000, 0xffff8000,	"stle.w",	"r0:5,r5:5,r10:5",		0,			0,	0,	0 },
+   { 0x387f8000, 0xffff8000,	"stle.d",	"r0:5,r5:5,r10:5",		0,			0,	0,	0 },
++  { 0x2c000000, 0xffc00000, "vld", "v0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x2c400000, 0xffc00000, "vst", "v0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x2c800000, 0xffc00000, "xvld", "x0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x2cc00000, 0xffc00000, "xvst", "x0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x38400000, 0xffff8000, "vldx", "v0:5,r5:5,r10:5", 0, 0, 0, 0},
++  { 0x38440000, 0xffff8000, "vstx", "v0:5,r5:5,r10:5", 0, 0, 0, 0},
++  { 0x38480000, 0xffff8000, "xvldx", "x0:5,r5:5,r10:5", 0, 0, 0, 0},
++  { 0x384c0000, 0xffff8000, "xvstx", "x0:5,r5:5,r10:5", 0, 0, 0, 0},
++  { 0x30100000, 0xfff80000, "vldrepl.d", "v0:5,r5:5,s10:9<<3", 0, 0, 0, 0},
++  { 0x30200000, 0xfff00000, "vldrepl.w", "v0:5,r5:5,s10:10<<2", 0, 0, 0, 0},
++  { 0x30400000, 0xffe00000, "vldrepl.h", "v0:5,r5:5,s10:11<<1", 0, 0, 0, 0},
++  { 0x30800000, 0xffc00000, "vldrepl.b", "v0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x31100000, 0xfff80000, "vstelm.d", "v0:5,r5:5,s10:8<<3,u18:1", 0, 0, 0, 0},
++  { 0x31200000, 0xfff00000, "vstelm.w", "v0:5,r5:5,s10:8<<2,u18:2", 0, 0, 0, 0},
++  { 0x31400000, 0xffe00000, "vstelm.h", "v0:5,r5:5,s10:8<<1,u18:3", 0, 0, 0, 0},
++  { 0x31800000, 0xffc00000, "vstelm.b", "v0:5,r5:5,s10:8,u18:4", 0, 0, 0, 0},
++  { 0x32100000, 0xfff80000, "xvldrepl.d", "x0:5,r5:5,s10:9<<3", 0, 0, 0, 0},
++  { 0x32200000, 0xfff00000, "xvldrepl.w", "x0:5,r5:5,s10:10<<2", 0, 0, 0, 0},
++  { 0x32400000, 0xffe00000, "xvldrepl.h", "x0:5,r5:5,s10:11<<1", 0, 0, 0, 0},
++  { 0x32800000, 0xffc00000, "xvldrepl.b", "x0:5,r5:5,s10:12", 0, 0, 0, 0},
++  { 0x33100000, 0xfff00000, "xvstelm.d", "x0:5,r5:5,s10:8<<3,u18:2", 0, 0, 0, 0},
++  { 0x33200000, 0xffe00000, "xvstelm.w", "x0:5,r5:5,s10:8<<2,u18:3", 0, 0, 0, 0},
++  { 0x33400000, 0xffc00000, "xvstelm.h", "x0:5,r5:5,s10:8<<1,u18:4", 0, 0, 0, 0},
++  { 0x33800000, 0xff800000, "xvstelm.b", "x0:5,r5:5,s10:8,u18:5", 0, 0, 0, 0},
+   { 0 } /* Terminate the list.  */
+ };
+ 
+@@ -845,6 +977,1336 @@ static struct loongarch_opcode loongarch
+   { 0 } /* Terminate the list.  */
+ };
+ 
++static struct loongarch_opcode loongarch_lsx_opcodes[] = {
++/* match,    mask,       name, format, macro, include, exclude, pinfo */
++  { 0x70000000, 0xffff8000, "vseq.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70008000, 0xffff8000, "vseq.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70010000, 0xffff8000, "vseq.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70018000, 0xffff8000, "vseq.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70020000, 0xffff8000, "vsle.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70028000, 0xffff8000, "vsle.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70030000, 0xffff8000, "vsle.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70038000, 0xffff8000, "vsle.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70040000, 0xffff8000, "vsle.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70048000, 0xffff8000, "vsle.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70050000, 0xffff8000, "vsle.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70058000, 0xffff8000, "vsle.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70060000, 0xffff8000, "vslt.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70068000, 0xffff8000, "vslt.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70070000, 0xffff8000, "vslt.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70078000, 0xffff8000, "vslt.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70080000, 0xffff8000, "vslt.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70088000, 0xffff8000, "vslt.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70090000, 0xffff8000, "vslt.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70098000, 0xffff8000, "vslt.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700a0000, 0xffff8000, "vadd.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700a8000, 0xffff8000, "vadd.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700b0000, 0xffff8000, "vadd.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700b8000, 0xffff8000, "vadd.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700c0000, 0xffff8000, "vsub.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700c8000, 0xffff8000, "vsub.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700d0000, 0xffff8000, "vsub.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x700d8000, 0xffff8000, "vsub.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70460000, 0xffff8000, "vsadd.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70468000, 0xffff8000, "vsadd.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70470000, 0xffff8000, "vsadd.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70478000, 0xffff8000, "vsadd.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70480000, 0xffff8000, "vssub.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70488000, 0xffff8000, "vssub.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70490000, 0xffff8000, "vssub.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70498000, 0xffff8000, "vssub.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704a0000, 0xffff8000, "vsadd.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704a8000, 0xffff8000, "vsadd.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704b0000, 0xffff8000, "vsadd.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704b8000, 0xffff8000, "vsadd.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704c0000, 0xffff8000, "vssub.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704c8000, 0xffff8000, "vssub.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704d0000, 0xffff8000, "vssub.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x704d8000, 0xffff8000, "vssub.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70540000, 0xffff8000, "vhaddw.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70548000, 0xffff8000, "vhaddw.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70550000, 0xffff8000, "vhaddw.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70558000, 0xffff8000, "vhaddw.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70560000, 0xffff8000, "vhsubw.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70568000, 0xffff8000, "vhsubw.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70570000, 0xffff8000, "vhsubw.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70578000, 0xffff8000, "vhsubw.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70580000, 0xffff8000, "vhaddw.hu.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70588000, 0xffff8000, "vhaddw.wu.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70590000, 0xffff8000, "vhaddw.du.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70598000, 0xffff8000, "vhaddw.qu.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705a0000, 0xffff8000, "vhsubw.hu.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705a8000, 0xffff8000, "vhsubw.wu.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705b0000, 0xffff8000, "vhsubw.du.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705b8000, 0xffff8000, "vhsubw.qu.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705c0000, 0xffff8000, "vadda.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705c8000, 0xffff8000, "vadda.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705d0000, 0xffff8000, "vadda.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x705d8000, 0xffff8000, "vadda.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70600000, 0xffff8000, "vabsd.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70608000, 0xffff8000, "vabsd.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70610000, 0xffff8000, "vabsd.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70618000, 0xffff8000, "vabsd.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70620000, 0xffff8000, "vabsd.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70628000, 0xffff8000, "vabsd.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70630000, 0xffff8000, "vabsd.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70638000, 0xffff8000, "vabsd.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70640000, 0xffff8000, "vavg.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70648000, 0xffff8000, "vavg.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70650000, 0xffff8000, "vavg.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70658000, 0xffff8000, "vavg.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70660000, 0xffff8000, "vavg.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70668000, 0xffff8000, "vavg.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70670000, 0xffff8000, "vavg.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70678000, 0xffff8000, "vavg.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70680000, 0xffff8000, "vavgr.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70688000, 0xffff8000, "vavgr.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70690000, 0xffff8000, "vavgr.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70698000, 0xffff8000, "vavgr.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x706a0000, 0xffff8000, "vavgr.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x706a8000, 0xffff8000, "vavgr.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x706b0000, 0xffff8000, "vavgr.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x706b8000, 0xffff8000, "vavgr.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70700000, 0xffff8000, "vmax.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70708000, 0xffff8000, "vmax.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70710000, 0xffff8000, "vmax.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70718000, 0xffff8000, "vmax.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70720000, 0xffff8000, "vmin.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70728000, 0xffff8000, "vmin.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70730000, 0xffff8000, "vmin.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70738000, 0xffff8000, "vmin.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70740000, 0xffff8000, "vmax.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70748000, 0xffff8000, "vmax.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70750000, 0xffff8000, "vmax.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70758000, 0xffff8000, "vmax.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70760000, 0xffff8000, "vmin.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70768000, 0xffff8000, "vmin.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70770000, 0xffff8000, "vmin.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70778000, 0xffff8000, "vmin.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70840000, 0xffff8000, "vmul.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70848000, 0xffff8000, "vmul.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70850000, 0xffff8000, "vmul.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70858000, 0xffff8000, "vmul.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70860000, 0xffff8000, "vmuh.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70868000, 0xffff8000, "vmuh.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70870000, 0xffff8000, "vmuh.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70878000, 0xffff8000, "vmuh.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70880000, 0xffff8000, "vmuh.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70888000, 0xffff8000, "vmuh.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70890000, 0xffff8000, "vmuh.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70898000, 0xffff8000, "vmuh.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a80000, 0xffff8000, "vmadd.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a88000, 0xffff8000, "vmadd.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a90000, 0xffff8000, "vmadd.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a98000, 0xffff8000, "vmadd.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70aa0000, 0xffff8000, "vmsub.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70aa8000, 0xffff8000, "vmsub.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ab0000, 0xffff8000, "vmsub.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ab8000, 0xffff8000, "vmsub.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e00000, 0xffff8000, "vdiv.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e08000, 0xffff8000, "vdiv.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e10000, 0xffff8000, "vdiv.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e18000, 0xffff8000, "vdiv.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e20000, 0xffff8000, "vmod.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e28000, 0xffff8000, "vmod.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e30000, 0xffff8000, "vmod.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e38000, 0xffff8000, "vmod.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e40000, 0xffff8000, "vdiv.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e48000, 0xffff8000, "vdiv.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e50000, 0xffff8000, "vdiv.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e58000, 0xffff8000, "vdiv.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e60000, 0xffff8000, "vmod.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e68000, 0xffff8000, "vmod.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e70000, 0xffff8000, "vmod.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e78000, 0xffff8000, "vmod.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e80000, 0xffff8000, "vsll.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e88000, 0xffff8000, "vsll.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e90000, 0xffff8000, "vsll.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70e98000, 0xffff8000, "vsll.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ea0000, 0xffff8000, "vsrl.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ea8000, 0xffff8000, "vsrl.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70eb0000, 0xffff8000, "vsrl.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70eb8000, 0xffff8000, "vsrl.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ec0000, 0xffff8000, "vsra.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ec8000, 0xffff8000, "vsra.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ed0000, 0xffff8000, "vsra.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ed8000, 0xffff8000, "vsra.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ee0000, 0xffff8000, "vrotr.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ee8000, 0xffff8000, "vrotr.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ef0000, 0xffff8000, "vrotr.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ef8000, 0xffff8000, "vrotr.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f00000, 0xffff8000, "vsrlr.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f08000, 0xffff8000, "vsrlr.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f10000, 0xffff8000, "vsrlr.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f18000, 0xffff8000, "vsrlr.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f20000, 0xffff8000, "vsrar.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f28000, 0xffff8000, "vsrar.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f30000, 0xffff8000, "vsrar.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f38000, 0xffff8000, "vsrar.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f48000, 0xffff8000, "vsrln.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f50000, 0xffff8000, "vsrln.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f58000, 0xffff8000, "vsrln.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f68000, 0xffff8000, "vsran.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f70000, 0xffff8000, "vsran.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f78000, 0xffff8000, "vsran.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f88000, 0xffff8000, "vsrlrn.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f90000, 0xffff8000, "vsrlrn.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70f98000, 0xffff8000, "vsrlrn.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fa8000, 0xffff8000, "vsrarn.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fb0000, 0xffff8000, "vsrarn.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fb8000, 0xffff8000, "vsrarn.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fc8000, 0xffff8000, "vssrln.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fd0000, 0xffff8000, "vssrln.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fd8000, 0xffff8000, "vssrln.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70fe8000, 0xffff8000, "vssran.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ff0000, 0xffff8000, "vssran.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ff8000, 0xffff8000, "vssran.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71008000, 0xffff8000, "vssrlrn.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71010000, 0xffff8000, "vssrlrn.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71018000, 0xffff8000, "vssrlrn.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71028000, 0xffff8000, "vssrarn.b.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71030000, 0xffff8000, "vssrarn.h.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71038000, 0xffff8000, "vssrarn.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71048000, 0xffff8000, "vssrln.bu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71050000, 0xffff8000, "vssrln.hu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71058000, 0xffff8000, "vssrln.wu.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71068000, 0xffff8000, "vssran.bu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71070000, 0xffff8000, "vssran.hu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71078000, 0xffff8000, "vssran.wu.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71088000, 0xffff8000, "vssrlrn.bu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71090000, 0xffff8000, "vssrlrn.hu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71098000, 0xffff8000, "vssrlrn.wu.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710a8000, 0xffff8000, "vssrarn.bu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710b0000, 0xffff8000, "vssrarn.hu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710b8000, 0xffff8000, "vssrarn.wu.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710c0000, 0xffff8000, "vbitclr.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710c8000, 0xffff8000, "vbitclr.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710d0000, 0xffff8000, "vbitclr.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710d8000, 0xffff8000, "vbitclr.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710e0000, 0xffff8000, "vbitset.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710e8000, 0xffff8000, "vbitset.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710f0000, 0xffff8000, "vbitset.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x710f8000, 0xffff8000, "vbitset.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71100000, 0xffff8000, "vbitrev.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71108000, 0xffff8000, "vbitrev.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71110000, 0xffff8000, "vbitrev.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71118000, 0xffff8000, "vbitrev.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71160000, 0xffff8000, "vpackev.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71168000, 0xffff8000, "vpackev.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71170000, 0xffff8000, "vpackev.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71178000, 0xffff8000, "vpackev.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71180000, 0xffff8000, "vpackod.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71188000, 0xffff8000, "vpackod.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71190000, 0xffff8000, "vpackod.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71198000, 0xffff8000, "vpackod.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711a0000, 0xffff8000, "vilvl.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711a8000, 0xffff8000, "vilvl.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711b0000, 0xffff8000, "vilvl.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711b8000, 0xffff8000, "vilvl.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711c0000, 0xffff8000, "vilvh.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711c8000, 0xffff8000, "vilvh.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711d0000, 0xffff8000, "vilvh.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711d8000, 0xffff8000, "vilvh.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711e0000, 0xffff8000, "vpickev.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711e8000, 0xffff8000, "vpickev.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711f0000, 0xffff8000, "vpickev.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x711f8000, 0xffff8000, "vpickev.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71200000, 0xffff8000, "vpickod.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71208000, 0xffff8000, "vpickod.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71210000, 0xffff8000, "vpickod.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71218000, 0xffff8000, "vpickod.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71220000, 0xffff8000, "vreplve.b", "v0:5,v5:5,r10:5", 0, 0, 0, 0},
++  { 0x71228000, 0xffff8000, "vreplve.h", "v0:5,v5:5,r10:5", 0, 0, 0, 0},
++  { 0x71230000, 0xffff8000, "vreplve.w", "v0:5,v5:5,r10:5", 0, 0, 0, 0},
++  { 0x71238000, 0xffff8000, "vreplve.d", "v0:5,v5:5,r10:5", 0, 0, 0, 0},
++  { 0x71260000, 0xffff8000, "vand.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71268000, 0xffff8000, "vor.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71270000, 0xffff8000, "vxor.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71278000, 0xffff8000, "vnor.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71280000, 0xffff8000, "vandn.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71288000, 0xffff8000, "vorn.v", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712b0000, 0xffff8000, "vfrstp.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712b8000, 0xffff8000, "vfrstp.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712d0000, 0xffff8000, "vadd.q", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712d8000, 0xffff8000, "vsub.q", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712e0000, 0xffff8000, "vsigncov.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712e8000, 0xffff8000, "vsigncov.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712f0000, 0xffff8000, "vsigncov.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x712f8000, 0xffff8000, "vsigncov.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71308000, 0xffff8000, "vfadd.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71310000, 0xffff8000, "vfadd.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71328000, 0xffff8000, "vfsub.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71330000, 0xffff8000, "vfsub.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71388000, 0xffff8000, "vfmul.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71390000, 0xffff8000, "vfmul.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713a8000, 0xffff8000, "vfdiv.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713b0000, 0xffff8000, "vfdiv.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713c8000, 0xffff8000, "vfmax.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713d0000, 0xffff8000, "vfmax.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713e8000, 0xffff8000, "vfmin.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x713f0000, 0xffff8000, "vfmin.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71408000, 0xffff8000, "vfmaxa.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71410000, 0xffff8000, "vfmaxa.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71428000, 0xffff8000, "vfmina.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71430000, 0xffff8000, "vfmina.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71460000, 0xffff8000, "vfcvt.h.s", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71468000, 0xffff8000, "vfcvt.s.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71480000, 0xffff8000, "vffint.s.l", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x71498000, 0xffff8000, "vftint.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x714a0000, 0xffff8000, "vftintrm.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x714a8000, 0xffff8000, "vftintrp.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x714b0000, 0xffff8000, "vftintrz.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x714b8000, 0xffff8000, "vftintrne.w.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x717a8000, 0xffff8000, "vshuf.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x717b0000, 0xffff8000, "vshuf.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x717b8000, 0xffff8000, "vshuf.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x72800000, 0xffff8000, "vseqi.b", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72808000, 0xffff8000, "vseqi.h", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72810000, 0xffff8000, "vseqi.w", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72818000, 0xffff8000, "vseqi.d", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72820000, 0xffff8000, "vslei.b", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72828000, 0xffff8000, "vslei.h", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72830000, 0xffff8000, "vslei.w", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72838000, 0xffff8000, "vslei.d", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72840000, 0xffff8000, "vslei.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72848000, 0xffff8000, "vslei.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72850000, 0xffff8000, "vslei.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72858000, 0xffff8000, "vslei.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72860000, 0xffff8000, "vslti.b", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72868000, 0xffff8000, "vslti.h", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72870000, 0xffff8000, "vslti.w", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72878000, 0xffff8000, "vslti.d", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72880000, 0xffff8000, "vslti.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72888000, 0xffff8000, "vslti.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72890000, 0xffff8000, "vslti.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72898000, 0xffff8000, "vslti.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728a0000, 0xffff8000, "vaddi.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728a8000, 0xffff8000, "vaddi.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728b0000, 0xffff8000, "vaddi.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728b8000, 0xffff8000, "vaddi.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728c0000, 0xffff8000, "vsubi.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728c8000, 0xffff8000, "vsubi.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728d0000, 0xffff8000, "vsubi.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728d8000, 0xffff8000, "vsubi.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728e0000, 0xffff8000, "vbsll.v", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x728e8000, 0xffff8000, "vbsrl.v", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72900000, 0xffff8000, "vmaxi.b", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72908000, 0xffff8000, "vmaxi.h", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72910000, 0xffff8000, "vmaxi.w", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72918000, 0xffff8000, "vmaxi.d", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72920000, 0xffff8000, "vmini.b", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72928000, 0xffff8000, "vmini.h", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72930000, 0xffff8000, "vmini.w", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72938000, 0xffff8000, "vmini.d", "v0:5,v5:5,s10:5", 0, 0, 0, 0},
++  { 0x72940000, 0xffff8000, "vmaxi.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72948000, 0xffff8000, "vmaxi.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72950000, 0xffff8000, "vmaxi.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72958000, 0xffff8000, "vmaxi.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72960000, 0xffff8000, "vmini.bu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72968000, 0xffff8000, "vmini.hu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72970000, 0xffff8000, "vmini.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72978000, 0xffff8000, "vmini.du", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x729a0000, 0xffff8000, "vfrstpi.b", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x729a8000, 0xffff8000, "vfrstpi.h", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x729c0000, 0xfffffc00, "vclo.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c0400, 0xfffffc00, "vclo.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c0800, 0xfffffc00, "vclo.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c0c00, 0xfffffc00, "vclo.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c1000, 0xfffffc00, "vclz.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c1400, 0xfffffc00, "vclz.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c1800, 0xfffffc00, "vclz.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c1c00, 0xfffffc00, "vclz.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c2000, 0xfffffc00, "vpcnt.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c2400, 0xfffffc00, "vpcnt.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c2800, 0xfffffc00, "vpcnt.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c2c00, 0xfffffc00, "vpcnt.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c3000, 0xfffffc00, "vneg.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c3400, 0xfffffc00, "vneg.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c3800, 0xfffffc00, "vneg.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c3c00, 0xfffffc00, "vneg.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c4000, 0xfffffc00, "vmskltz.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c4400, 0xfffffc00, "vmskltz.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c4800, 0xfffffc00, "vmskltz.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c4c00, 0xfffffc00, "vmskltz.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c5000, 0xfffffc00, "vmskgez.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c6000, 0xfffffc00, "vmsknz.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729c9800, 0xfffffc18, "vseteqz.v", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729c9c00, 0xfffffc18, "vsetnez.v", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729ca000, 0xfffffc18, "vsetanyeqz.b", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729ca400, 0xfffffc18, "vsetanyeqz.h", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729ca800, 0xfffffc18, "vsetanyeqz.w", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cac00, 0xfffffc18, "vsetanyeqz.d", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cb000, 0xfffffc18, "vsetallnez.b", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cb400, 0xfffffc18, "vsetallnez.h", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cb800, 0xfffffc18, "vsetallnez.w", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cbc00, 0xfffffc18, "vsetallnez.d", "c0:3,v5:5", 0, 0, 0, 0},
++  { 0x729cc400, 0xfffffc00, "vflogb.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729cc800, 0xfffffc00, "vflogb.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729cd400, 0xfffffc00, "vfclass.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729cd800, 0xfffffc00, "vfclass.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ce400, 0xfffffc00, "vfsqrt.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ce800, 0xfffffc00, "vfsqrt.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729cf400, 0xfffffc00, "vfrecip.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729cf800, 0xfffffc00, "vfrecip.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d0400, 0xfffffc00, "vfrsqrt.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d0800, 0xfffffc00, "vfrsqrt.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d3400, 0xfffffc00, "vfrint.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d3800, 0xfffffc00, "vfrint.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d4400, 0xfffffc00, "vfrintrm.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d4800, 0xfffffc00, "vfrintrm.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d5400, 0xfffffc00, "vfrintrp.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d5800, 0xfffffc00, "vfrintrp.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d6400, 0xfffffc00, "vfrintrz.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d6800, 0xfffffc00, "vfrintrz.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d7400, 0xfffffc00, "vfrintrne.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729d7800, 0xfffffc00, "vfrintrne.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729de800, 0xfffffc00, "vfcvtl.s.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729dec00, 0xfffffc00, "vfcvth.s.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729df000, 0xfffffc00, "vfcvtl.d.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729df400, 0xfffffc00, "vfcvth.d.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e0000, 0xfffffc00, "vffint.s.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e0400, 0xfffffc00, "vffint.s.wu", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e0800, 0xfffffc00, "vffint.d.l", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e0c00, 0xfffffc00, "vffint.d.lu", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e1000, 0xfffffc00, "vffintl.d.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e1400, 0xfffffc00, "vffinth.d.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e3000, 0xfffffc00, "vftint.w.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e3400, 0xfffffc00, "vftint.l.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e3800, 0xfffffc00, "vftintrm.w.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e3c00, 0xfffffc00, "vftintrm.l.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e4000, 0xfffffc00, "vftintrp.w.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e4400, 0xfffffc00, "vftintrp.l.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e4800, 0xfffffc00, "vftintrz.w.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e4c00, 0xfffffc00, "vftintrz.l.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e5000, 0xfffffc00, "vftintrne.w.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e5400, 0xfffffc00, "vftintrne.l.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e5800, 0xfffffc00, "vftint.wu.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e5c00, 0xfffffc00, "vftint.lu.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e7000, 0xfffffc00, "vftintrz.wu.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e7400, 0xfffffc00, "vftintrz.lu.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e8000, 0xfffffc00, "vftintl.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e8400, 0xfffffc00, "vftinth.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e8800, 0xfffffc00, "vftintrml.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e8c00, 0xfffffc00, "vftintrmh.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e9000, 0xfffffc00, "vftintrpl.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e9400, 0xfffffc00, "vftintrph.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e9800, 0xfffffc00, "vftintrzl.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729e9c00, 0xfffffc00, "vftintrzh.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ea000, 0xfffffc00, "vftintrnel.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ea400, 0xfffffc00, "vftintrneh.l.s", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ee000, 0xfffffc00, "vexth.h.b", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ee400, 0xfffffc00, "vexth.w.h", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ee800, 0xfffffc00, "vexth.d.w", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729eec00, 0xfffffc00, "vexth.q.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ef000, 0xfffffc00, "vexth.hu.bu", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ef400, 0xfffffc00, "vexth.wu.hu", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729ef800, 0xfffffc00, "vexth.du.wu", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729efc00, 0xfffffc00, "vexth.qu.du", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x729f0000, 0xfffffc00, "vreplgr2vr.b", "v0:5,r5:5", 0, 0, 0, 0},
++  { 0x729f0400, 0xfffffc00, "vreplgr2vr.h", "v0:5,r5:5", 0, 0, 0, 0},
++  { 0x729f0800, 0xfffffc00, "vreplgr2vr.w", "v0:5,r5:5", 0, 0, 0, 0},
++  { 0x729f0c00, 0xfffffc00, "vreplgr2vr.d", "v0:5,r5:5", 0, 0, 0, 0},
++  { 0x72a02000, 0xffffe000, "vrotri.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72a04000, 0xffffc000, "vrotri.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72a08000, 0xffff8000, "vrotri.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72a10000, 0xffff0000, "vrotri.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x72a42000, 0xffffe000, "vsrlri.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72a44000, 0xffffc000, "vsrlri.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72a48000, 0xffff8000, "vsrlri.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72a50000, 0xffff0000, "vsrlri.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x72a82000, 0xffffe000, "vsrari.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72a84000, 0xffffc000, "vsrari.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72a88000, 0xffff8000, "vsrari.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x72a90000, 0xffff0000, "vsrari.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x72eb8000, 0xffffc000, "vinsgr2vr.b", "v0:5,r5:5,u10:4", 0, 0, 0, 0},
++  { 0x72ebc000, 0xffffe000, "vinsgr2vr.h", "v0:5,r5:5,u10:3", 0, 0, 0, 0},
++  { 0x72ebe000, 0xfffff000, "vinsgr2vr.w", "v0:5,r5:5,u10:2", 0, 0, 0, 0},
++  { 0x72ebf000, 0xfffff800, "vinsgr2vr.d", "v0:5,r5:5,u10:1", 0, 0, 0, 0},
++  { 0x72ef8000, 0xffffc000, "vpickve2gr.b", "r0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72efc000, 0xffffe000, "vpickve2gr.h", "r0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72efe000, 0xfffff000, "vpickve2gr.w", "r0:5,v5:5,u10:2", 0, 0, 0, 0},
++  { 0x72eff000, 0xfffff800, "vpickve2gr.d", "r0:5,v5:5,u10:1", 0, 0, 0, 0},
++  { 0x72f38000, 0xffffc000, "vpickve2gr.bu", "r0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72f3c000, 0xffffe000, "vpickve2gr.hu", "r0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72f3e000, 0xfffff000, "vpickve2gr.wu", "r0:5,v5:5,u10:2", 0, 0, 0, 0},
++  { 0x72f3f000, 0xfffff800, "vpickve2gr.du", "r0:5,v5:5,u10:1", 0, 0, 0, 0},
++  { 0x72f78000, 0xffffc000, "vreplvei.b", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x72f7c000, 0xffffe000, "vreplvei.h", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x72f7e000, 0xfffff000, "vreplvei.w", "v0:5,v5:5,u10:2", 0, 0, 0, 0},
++  { 0x72f7f000, 0xfffff800, "vreplvei.d", "v0:5,v5:5,u10:1", 0, 0, 0, 0},
++  { 0x73082000, 0xffffe000, "vsllwil.h.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73084000, 0xffffc000, "vsllwil.w.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73088000, 0xffff8000, "vsllwil.d.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73090000, 0xfffffc00, "vextl.q.d", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x730c2000, 0xffffe000, "vsllwil.hu.bu", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x730c4000, 0xffffc000, "vsllwil.wu.hu", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x730c8000, 0xffff8000, "vsllwil.du.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x730d0000, 0xfffffc00, "vextl.qu.du", "v0:5,v5:5", 0, 0, 0, 0},
++  { 0x73102000, 0xffffe000, "vbitclri.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73104000, 0xffffc000, "vbitclri.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73108000, 0xffff8000, "vbitclri.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73110000, 0xffff0000, "vbitclri.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73142000, 0xffffe000, "vbitseti.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73144000, 0xffffc000, "vbitseti.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73148000, 0xffff8000, "vbitseti.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73150000, 0xffff0000, "vbitseti.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73182000, 0xffffe000, "vbitrevi.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73184000, 0xffffc000, "vbitrevi.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73188000, 0xffff8000, "vbitrevi.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73190000, 0xffff0000, "vbitrevi.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73242000, 0xffffe000, "vsat.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73244000, 0xffffc000, "vsat.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73248000, 0xffff8000, "vsat.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73250000, 0xffff0000, "vsat.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73282000, 0xffffe000, "vsat.bu", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73284000, 0xffffc000, "vsat.hu", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73288000, 0xffff8000, "vsat.wu", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73290000, 0xffff0000, "vsat.du", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x732c2000, 0xffffe000, "vslli.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x732c4000, 0xffffc000, "vslli.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x732c8000, 0xffff8000, "vslli.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x732d0000, 0xffff0000, "vslli.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73302000, 0xffffe000, "vsrli.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73304000, 0xffffc000, "vsrli.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73308000, 0xffff8000, "vsrli.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73310000, 0xffff0000, "vsrli.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73342000, 0xffffe000, "vsrai.b", "v0:5,v5:5,u10:3", 0, 0, 0, 0},
++  { 0x73344000, 0xffffc000, "vsrai.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73348000, 0xffff8000, "vsrai.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73350000, 0xffff0000, "vsrai.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73404000, 0xffffc000, "vsrlni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73408000, 0xffff8000, "vsrlni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73410000, 0xffff0000, "vsrlni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73420000, 0xfffe0000, "vsrlni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73484000, 0xffffc000, "vssrlni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73488000, 0xffff8000, "vssrlni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73490000, 0xffff0000, "vssrlni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x734a0000, 0xfffe0000, "vssrlni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73444000, 0xffffc000, "vsrlrni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73448000, 0xffff8000, "vsrlrni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73450000, 0xffff0000, "vsrlrni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73460000, 0xfffe0000, "vsrlrni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x734c4000, 0xffffc000, "vssrlni.bu.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x734c8000, 0xffff8000, "vssrlni.hu.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x734d0000, 0xffff0000, "vssrlni.wu.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x734e0000, 0xfffe0000, "vssrlni.du.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73504000, 0xffffc000, "vssrlrni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73508000, 0xffff8000, "vssrlrni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73510000, 0xffff0000, "vssrlrni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73520000, 0xfffe0000, "vssrlrni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73544000, 0xffffc000, "vssrlrni.bu.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73548000, 0xffff8000, "vssrlrni.hu.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73550000, 0xffff0000, "vssrlrni.wu.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73560000, 0xfffe0000, "vssrlrni.du.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73584000, 0xffffc000, "vsrani.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73588000, 0xffff8000, "vsrani.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73590000, 0xffff0000, "vsrani.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x735a0000, 0xfffe0000, "vsrani.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x735c4000, 0xffffc000, "vsrarni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x735c8000, 0xffff8000, "vsrarni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x735d0000, 0xffff0000, "vsrarni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x735e0000, 0xfffe0000, "vsrarni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73604000, 0xffffc000, "vssrani.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73608000, 0xffff8000, "vssrani.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73610000, 0xffff0000, "vssrani.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73620000, 0xfffe0000, "vssrani.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73644000, 0xffffc000, "vssrani.bu.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73648000, 0xffff8000, "vssrani.hu.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73650000, 0xffff0000, "vssrani.wu.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x73660000, 0xfffe0000, "vssrani.du.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73684000, 0xffffc000, "vssrarni.b.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x73688000, 0xffff8000, "vssrarni.h.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x73690000, 0xffff0000, "vssrarni.w.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x736a0000, 0xfffe0000, "vssrarni.d.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x736c4000, 0xffffc000, "vssrarni.bu.h", "v0:5,v5:5,u10:4", 0, 0, 0, 0},
++  { 0x736c8000, 0xffff8000, "vssrarni.hu.w", "v0:5,v5:5,u10:5", 0, 0, 0, 0},
++  { 0x736d0000, 0xffff0000, "vssrarni.wu.d", "v0:5,v5:5,u10:6", 0, 0, 0, 0},
++  { 0x736e0000, 0xfffe0000, "vssrarni.du.q", "v0:5,v5:5,u10:7", 0, 0, 0, 0},
++  { 0x73800000, 0xfffc0000, "vextrins.d", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73840000, 0xfffc0000, "vextrins.w", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73880000, 0xfffc0000, "vextrins.h", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x738c0000, 0xfffc0000, "vextrins.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73900000, 0xfffc0000, "vshuf4i.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73940000, 0xfffc0000, "vshuf4i.h", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73980000, 0xfffc0000, "vshuf4i.w", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x739c0000, 0xfffc0000, "vshuf4i.d", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73c40000, 0xfffc0000, "vbitseli.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73d00000, 0xfffc0000, "vandi.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73d40000, 0xfffc0000, "vori.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73d80000, 0xfffc0000, "vxori.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0x73dc0000, 0xfffc0000, "vnori.b", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0, 0, "vrepli.b", "v,s0:10", "vldi %1,(%2)&0x3ff", 0, 0, 0},
++
++  { 0x701e0000, 0xffff8000, "vaddwev.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x701e8000, 0xffff8000, "vaddwev.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x701f0000, 0xffff8000, "vaddwev.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x701f8000, 0xffff8000, "vaddwev.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x702e0000, 0xffff8000, "vaddwev.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x702e8000, 0xffff8000, "vaddwev.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x702f0000, 0xffff8000, "vaddwev.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x702f8000, 0xffff8000, "vaddwev.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x703e0000, 0xffff8000, "vaddwev.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x703e8000, 0xffff8000, "vaddwev.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x703f0000, 0xffff8000, "vaddwev.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x703f8000, 0xffff8000, "vaddwev.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70220000, 0xffff8000, "vaddwod.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70228000, 0xffff8000, "vaddwod.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70230000, 0xffff8000, "vaddwod.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70238000, 0xffff8000, "vaddwod.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70320000, 0xffff8000, "vaddwod.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70328000, 0xffff8000, "vaddwod.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70330000, 0xffff8000, "vaddwod.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70338000, 0xffff8000, "vaddwod.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70400000, 0xffff8000, "vaddwod.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70408000, 0xffff8000, "vaddwod.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70410000, 0xffff8000, "vaddwod.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70418000, 0xffff8000, "vaddwod.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ac0000, 0xffff8000, "vmaddwev.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ac8000, 0xffff8000, "vmaddwev.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ad0000, 0xffff8000, "vmaddwev.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ad8000, 0xffff8000, "vmaddwev.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b40000, 0xffff8000, "vmaddwev.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b48000, 0xffff8000, "vmaddwev.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b50000, 0xffff8000, "vmaddwev.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b58000, 0xffff8000, "vmaddwev.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bc0000, 0xffff8000, "vmaddwev.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bc8000, 0xffff8000, "vmaddwev.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bd0000, 0xffff8000, "vmaddwev.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bd8000, 0xffff8000, "vmaddwev.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ae0000, 0xffff8000, "vmaddwod.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70ae8000, 0xffff8000, "vmaddwod.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70af0000, 0xffff8000, "vmaddwod.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70af8000, 0xffff8000, "vmaddwod.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b60000, 0xffff8000, "vmaddwod.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b68000, 0xffff8000, "vmaddwod.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b70000, 0xffff8000, "vmaddwod.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70b78000, 0xffff8000, "vmaddwod.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70be0000, 0xffff8000, "vmaddwod.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70be8000, 0xffff8000, "vmaddwod.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bf0000, 0xffff8000, "vmaddwod.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70bf8000, 0xffff8000, "vmaddwod.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70900000, 0xffff8000, "vmulwev.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70908000, 0xffff8000, "vmulwev.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70910000, 0xffff8000, "vmulwev.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70918000, 0xffff8000, "vmulwev.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70980000, 0xffff8000, "vmulwev.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70988000, 0xffff8000, "vmulwev.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70990000, 0xffff8000, "vmulwev.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70998000, 0xffff8000, "vmulwev.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a00000, 0xffff8000, "vmulwev.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a08000, 0xffff8000, "vmulwev.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a10000, 0xffff8000, "vmulwev.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a18000, 0xffff8000, "vmulwev.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70920000, 0xffff8000, "vmulwod.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70928000, 0xffff8000, "vmulwod.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70930000, 0xffff8000, "vmulwod.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70938000, 0xffff8000, "vmulwod.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x709a0000, 0xffff8000, "vmulwod.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x709a8000, 0xffff8000, "vmulwod.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x709b0000, 0xffff8000, "vmulwod.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x709b8000, 0xffff8000, "vmulwod.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a20000, 0xffff8000, "vmulwod.h.bu.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a28000, 0xffff8000, "vmulwod.w.hu.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a30000, 0xffff8000, "vmulwod.d.wu.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70a38000, 0xffff8000, "vmulwod.q.du.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70200000, 0xffff8000, "vsubwev.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70208000, 0xffff8000, "vsubwev.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70210000, 0xffff8000, "vsubwev.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70218000, 0xffff8000, "vsubwev.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70300000, 0xffff8000, "vsubwev.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70308000, 0xffff8000, "vsubwev.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70310000, 0xffff8000, "vsubwev.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70318000, 0xffff8000, "vsubwev.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70240000, 0xffff8000, "vsubwod.h.b", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70248000, 0xffff8000, "vsubwod.w.h", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70250000, 0xffff8000, "vsubwod.d.w", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70258000, 0xffff8000, "vsubwod.q.d", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70340000, 0xffff8000, "vsubwod.h.bu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70348000, 0xffff8000, "vsubwod.w.hu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70350000, 0xffff8000, "vsubwod.d.wu", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0x70358000, 0xffff8000, "vsubwod.q.du", "v0:5,v5:5,v10:5",              0,                      0,      0,      0 },
++  { 0, 0, "vrepli.d", "v,s0:10", "vldi %1,((%2)&0x3ff)|0xc00", 0, 0, 0},
++  { 0, 0, "vrepli.h", "v,s0:10", "vldi %1,((%2)&0x3ff)|0x400", 0, 0, 0},
++  { 0, 0, "vrepli.w", "v,s0:10", "vldi %1,((%2)&0x3ff)|0x800", 0, 0, 0},
++  { 0x73e00000, 0xfffc0000, "vldi", "v0:5,s5:13", 0, 0, 0, 0},
++  { 0x73e40000, 0xfffc0000, "vpermi.w", "v0:5,v5:5,u10:8", 0, 0, 0, 0},
++  { 0} /* Terminate the list.  */
++};
++static struct loongarch_opcode loongarch_lasx_opcodes[] = {
++/* match,    mask,       name, format, macro, include, exclude, pinfo */
++  { 0x74000000, 0xffff8000, "xvseq.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74008000, 0xffff8000, "xvseq.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74010000, 0xffff8000, "xvseq.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74018000, 0xffff8000, "xvseq.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74020000, 0xffff8000, "xvsle.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74028000, 0xffff8000, "xvsle.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74030000, 0xffff8000, "xvsle.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74038000, 0xffff8000, "xvsle.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74040000, 0xffff8000, "xvsle.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74048000, 0xffff8000, "xvsle.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74050000, 0xffff8000, "xvsle.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74058000, 0xffff8000, "xvsle.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74060000, 0xffff8000, "xvslt.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74068000, 0xffff8000, "xvslt.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74070000, 0xffff8000, "xvslt.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74078000, 0xffff8000, "xvslt.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74080000, 0xffff8000, "xvslt.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74088000, 0xffff8000, "xvslt.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74090000, 0xffff8000, "xvslt.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74098000, 0xffff8000, "xvslt.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740a0000, 0xffff8000, "xvadd.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740a8000, 0xffff8000, "xvadd.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740b0000, 0xffff8000, "xvadd.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740b8000, 0xffff8000, "xvadd.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740c0000, 0xffff8000, "xvsub.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740c8000, 0xffff8000, "xvsub.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740d0000, 0xffff8000, "xvsub.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x740d8000, 0xffff8000, "xvsub.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74460000, 0xffff8000, "xvsadd.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74468000, 0xffff8000, "xvsadd.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74470000, 0xffff8000, "xvsadd.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74478000, 0xffff8000, "xvsadd.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74480000, 0xffff8000, "xvssub.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74488000, 0xffff8000, "xvssub.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74490000, 0xffff8000, "xvssub.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74498000, 0xffff8000, "xvssub.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744a0000, 0xffff8000, "xvsadd.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744a8000, 0xffff8000, "xvsadd.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744b0000, 0xffff8000, "xvsadd.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744b8000, 0xffff8000, "xvsadd.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744c0000, 0xffff8000, "xvssub.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744c8000, 0xffff8000, "xvssub.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744d0000, 0xffff8000, "xvssub.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x744d8000, 0xffff8000, "xvssub.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74540000, 0xffff8000, "xvhaddw.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74548000, 0xffff8000, "xvhaddw.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74550000, 0xffff8000, "xvhaddw.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74558000, 0xffff8000, "xvhaddw.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74560000, 0xffff8000, "xvhsubw.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74568000, 0xffff8000, "xvhsubw.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74570000, 0xffff8000, "xvhsubw.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74578000, 0xffff8000, "xvhsubw.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74580000, 0xffff8000, "xvhaddw.hu.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74588000, 0xffff8000, "xvhaddw.wu.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74590000, 0xffff8000, "xvhaddw.du.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74598000, 0xffff8000, "xvhaddw.qu.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745a0000, 0xffff8000, "xvhsubw.hu.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745a8000, 0xffff8000, "xvhsubw.wu.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745b0000, 0xffff8000, "xvhsubw.du.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745b8000, 0xffff8000, "xvhsubw.qu.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x741e0000, 0xffff8000, "xvaddwev.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x741e8000, 0xffff8000, "xvaddwev.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x741f0000, 0xffff8000, "xvaddwev.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x741f8000, 0xffff8000, "xvaddwev.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x742e0000, 0xffff8000, "xvaddwev.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x742e8000, 0xffff8000, "xvaddwev.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x742f0000, 0xffff8000, "xvaddwev.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x742f8000, 0xffff8000, "xvaddwev.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x743e0000, 0xffff8000, "xvaddwev.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x743e8000, 0xffff8000, "xvaddwev.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x743f0000, 0xffff8000, "xvaddwev.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x743f8000, 0xffff8000, "xvaddwev.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74220000, 0xffff8000, "xvaddwod.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74228000, 0xffff8000, "xvaddwod.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74230000, 0xffff8000, "xvaddwod.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74238000, 0xffff8000, "xvaddwod.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74320000, 0xffff8000, "xvaddwod.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74328000, 0xffff8000, "xvaddwod.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74330000, 0xffff8000, "xvaddwod.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74338000, 0xffff8000, "xvaddwod.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74400000, 0xffff8000, "xvaddwod.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74408000, 0xffff8000, "xvaddwod.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74410000, 0xffff8000, "xvaddwod.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74418000, 0xffff8000, "xvaddwod.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ac0000, 0xffff8000, "xvmaddwev.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ac8000, 0xffff8000, "xvmaddwev.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ad0000, 0xffff8000, "xvmaddwev.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ad8000, 0xffff8000, "xvmaddwev.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bc0000, 0xffff8000, "xvmaddwev.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bc8000, 0xffff8000, "xvmaddwev.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bd0000, 0xffff8000, "xvmaddwev.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bd8000, 0xffff8000, "xvmaddwev.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b40000, 0xffff8000, "xvmaddwev.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b48000, 0xffff8000, "xvmaddwev.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b50000, 0xffff8000, "xvmaddwev.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b58000, 0xffff8000, "xvmaddwev.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ae0000, 0xffff8000, "xvmaddwod.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ae8000, 0xffff8000, "xvmaddwod.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74af0000, 0xffff8000, "xvmaddwod.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74af8000, 0xffff8000, "xvmaddwod.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b60000, 0xffff8000, "xvmaddwod.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b68000, 0xffff8000, "xvmaddwod.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b70000, 0xffff8000, "xvmaddwod.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74b78000, 0xffff8000, "xvmaddwod.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74be0000, 0xffff8000, "xvmaddwod.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74be8000, 0xffff8000, "xvmaddwod.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bf0000, 0xffff8000, "xvmaddwod.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74bf8000, 0xffff8000, "xvmaddwod.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74900000, 0xffff8000, "xvmulwev.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74908000, 0xffff8000, "xvmulwev.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74910000, 0xffff8000, "xvmulwev.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74918000, 0xffff8000, "xvmulwev.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74980000, 0xffff8000, "xvmulwev.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74988000, 0xffff8000, "xvmulwev.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74990000, 0xffff8000, "xvmulwev.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74998000, 0xffff8000, "xvmulwev.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a00000, 0xffff8000, "xvmulwev.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a08000, 0xffff8000, "xvmulwev.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a10000, 0xffff8000, "xvmulwev.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a18000, 0xffff8000, "xvmulwev.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74920000, 0xffff8000, "xvmulwod.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74928000, 0xffff8000, "xvmulwod.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74930000, 0xffff8000, "xvmulwod.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74938000, 0xffff8000, "xvmulwod.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x749a0000, 0xffff8000, "xvmulwod.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x749a8000, 0xffff8000, "xvmulwod.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x749b0000, 0xffff8000, "xvmulwod.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x749b8000, 0xffff8000, "xvmulwod.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a20000, 0xffff8000, "xvmulwod.h.bu.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a28000, 0xffff8000, "xvmulwod.w.hu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a30000, 0xffff8000, "xvmulwod.d.wu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a38000, 0xffff8000, "xvmulwod.q.du.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74200000, 0xffff8000, "xvsubwev.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74208000, 0xffff8000, "xvsubwev.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74210000, 0xffff8000, "xvsubwev.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74218000, 0xffff8000, "xvsubwev.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74300000, 0xffff8000, "xvsubwev.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74308000, 0xffff8000, "xvsubwev.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74310000, 0xffff8000, "xvsubwev.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74318000, 0xffff8000, "xvsubwev.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74240000, 0xffff8000, "xvsubwod.h.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74248000, 0xffff8000, "xvsubwod.w.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74250000, 0xffff8000, "xvsubwod.d.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74258000, 0xffff8000, "xvsubwod.q.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74340000, 0xffff8000, "xvsubwod.h.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74348000, 0xffff8000, "xvsubwod.w.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74350000, 0xffff8000, "xvsubwod.d.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74358000, 0xffff8000, "xvsubwod.q.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745c0000, 0xffff8000, "xvadda.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745c8000, 0xffff8000, "xvadda.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745d0000, 0xffff8000, "xvadda.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x745d8000, 0xffff8000, "xvadda.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74600000, 0xffff8000, "xvabsd.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74608000, 0xffff8000, "xvabsd.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74610000, 0xffff8000, "xvabsd.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74618000, 0xffff8000, "xvabsd.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74620000, 0xffff8000, "xvabsd.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74628000, 0xffff8000, "xvabsd.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74630000, 0xffff8000, "xvabsd.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74638000, 0xffff8000, "xvabsd.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74640000, 0xffff8000, "xvavg.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74648000, 0xffff8000, "xvavg.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74650000, 0xffff8000, "xvavg.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74658000, 0xffff8000, "xvavg.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74660000, 0xffff8000, "xvavg.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74668000, 0xffff8000, "xvavg.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74670000, 0xffff8000, "xvavg.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74678000, 0xffff8000, "xvavg.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74680000, 0xffff8000, "xvavgr.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74688000, 0xffff8000, "xvavgr.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74690000, 0xffff8000, "xvavgr.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74698000, 0xffff8000, "xvavgr.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x746a0000, 0xffff8000, "xvavgr.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x746a8000, 0xffff8000, "xvavgr.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x746b0000, 0xffff8000, "xvavgr.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x746b8000, 0xffff8000, "xvavgr.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74700000, 0xffff8000, "xvmax.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74708000, 0xffff8000, "xvmax.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74710000, 0xffff8000, "xvmax.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74718000, 0xffff8000, "xvmax.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74720000, 0xffff8000, "xvmin.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74728000, 0xffff8000, "xvmin.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74730000, 0xffff8000, "xvmin.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74738000, 0xffff8000, "xvmin.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74740000, 0xffff8000, "xvmax.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74748000, 0xffff8000, "xvmax.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74750000, 0xffff8000, "xvmax.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74758000, 0xffff8000, "xvmax.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74760000, 0xffff8000, "xvmin.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74768000, 0xffff8000, "xvmin.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74770000, 0xffff8000, "xvmin.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74778000, 0xffff8000, "xvmin.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74840000, 0xffff8000, "xvmul.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74848000, 0xffff8000, "xvmul.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74850000, 0xffff8000, "xvmul.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74858000, 0xffff8000, "xvmul.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74860000, 0xffff8000, "xvmuh.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74868000, 0xffff8000, "xvmuh.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74870000, 0xffff8000, "xvmuh.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74878000, 0xffff8000, "xvmuh.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74880000, 0xffff8000, "xvmuh.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74888000, 0xffff8000, "xvmuh.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74890000, 0xffff8000, "xvmuh.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74898000, 0xffff8000, "xvmuh.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a80000, 0xffff8000, "xvmadd.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a88000, 0xffff8000, "xvmadd.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a90000, 0xffff8000, "xvmadd.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74a98000, 0xffff8000, "xvmadd.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74aa0000, 0xffff8000, "xvmsub.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74aa8000, 0xffff8000, "xvmsub.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ab0000, 0xffff8000, "xvmsub.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ab8000, 0xffff8000, "xvmsub.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e00000, 0xffff8000, "xvdiv.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e08000, 0xffff8000, "xvdiv.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e10000, 0xffff8000, "xvdiv.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e18000, 0xffff8000, "xvdiv.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e20000, 0xffff8000, "xvmod.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e28000, 0xffff8000, "xvmod.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e30000, 0xffff8000, "xvmod.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e38000, 0xffff8000, "xvmod.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e40000, 0xffff8000, "xvdiv.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e48000, 0xffff8000, "xvdiv.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e50000, 0xffff8000, "xvdiv.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e58000, 0xffff8000, "xvdiv.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e60000, 0xffff8000, "xvmod.bu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e68000, 0xffff8000, "xvmod.hu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e70000, 0xffff8000, "xvmod.wu", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e78000, 0xffff8000, "xvmod.du", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e80000, 0xffff8000, "xvsll.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e88000, 0xffff8000, "xvsll.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e90000, 0xffff8000, "xvsll.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74e98000, 0xffff8000, "xvsll.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ea0000, 0xffff8000, "xvsrl.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ea8000, 0xffff8000, "xvsrl.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74eb0000, 0xffff8000, "xvsrl.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74eb8000, 0xffff8000, "xvsrl.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ec0000, 0xffff8000, "xvsra.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ec8000, 0xffff8000, "xvsra.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ed0000, 0xffff8000, "xvsra.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ed8000, 0xffff8000, "xvsra.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ee0000, 0xffff8000, "xvrotr.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ee8000, 0xffff8000, "xvrotr.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ef0000, 0xffff8000, "xvrotr.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ef8000, 0xffff8000, "xvrotr.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f00000, 0xffff8000, "xvsrlr.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f08000, 0xffff8000, "xvsrlr.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f10000, 0xffff8000, "xvsrlr.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f18000, 0xffff8000, "xvsrlr.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f20000, 0xffff8000, "xvsrar.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f28000, 0xffff8000, "xvsrar.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f30000, 0xffff8000, "xvsrar.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f38000, 0xffff8000, "xvsrar.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f48000, 0xffff8000, "xvsrln.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f50000, 0xffff8000, "xvsrln.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f58000, 0xffff8000, "xvsrln.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f68000, 0xffff8000, "xvsran.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f70000, 0xffff8000, "xvsran.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f78000, 0xffff8000, "xvsran.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f88000, 0xffff8000, "xvsrlrn.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f90000, 0xffff8000, "xvsrlrn.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74f98000, 0xffff8000, "xvsrlrn.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fa8000, 0xffff8000, "xvsrarn.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fb0000, 0xffff8000, "xvsrarn.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fb8000, 0xffff8000, "xvsrarn.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fc8000, 0xffff8000, "xvssrln.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fd0000, 0xffff8000, "xvssrln.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fd8000, 0xffff8000, "xvssrln.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74fe8000, 0xffff8000, "xvssran.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ff0000, 0xffff8000, "xvssran.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x74ff8000, 0xffff8000, "xvssran.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75008000, 0xffff8000, "xvssrlrn.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75010000, 0xffff8000, "xvssrlrn.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75018000, 0xffff8000, "xvssrlrn.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75028000, 0xffff8000, "xvssrarn.b.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75030000, 0xffff8000, "xvssrarn.h.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75038000, 0xffff8000, "xvssrarn.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75048000, 0xffff8000, "xvssrln.bu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75050000, 0xffff8000, "xvssrln.hu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75058000, 0xffff8000, "xvssrln.wu.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75068000, 0xffff8000, "xvssran.bu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75070000, 0xffff8000, "xvssran.hu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75078000, 0xffff8000, "xvssran.wu.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75088000, 0xffff8000, "xvssrlrn.bu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75090000, 0xffff8000, "xvssrlrn.hu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75098000, 0xffff8000, "xvssrlrn.wu.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750a8000, 0xffff8000, "xvssrarn.bu.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750b0000, 0xffff8000, "xvssrarn.hu.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750b8000, 0xffff8000, "xvssrarn.wu.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750c0000, 0xffff8000, "xvbitclr.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750c8000, 0xffff8000, "xvbitclr.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750d0000, 0xffff8000, "xvbitclr.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750d8000, 0xffff8000, "xvbitclr.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750e0000, 0xffff8000, "xvbitset.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750e8000, 0xffff8000, "xvbitset.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750f0000, 0xffff8000, "xvbitset.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x750f8000, 0xffff8000, "xvbitset.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75100000, 0xffff8000, "xvbitrev.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75108000, 0xffff8000, "xvbitrev.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75110000, 0xffff8000, "xvbitrev.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75118000, 0xffff8000, "xvbitrev.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75160000, 0xffff8000, "xvpackev.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75168000, 0xffff8000, "xvpackev.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75170000, 0xffff8000, "xvpackev.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75178000, 0xffff8000, "xvpackev.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75180000, 0xffff8000, "xvpackod.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75188000, 0xffff8000, "xvpackod.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75190000, 0xffff8000, "xvpackod.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75198000, 0xffff8000, "xvpackod.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751a0000, 0xffff8000, "xvilvl.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751a8000, 0xffff8000, "xvilvl.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751b0000, 0xffff8000, "xvilvl.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751b8000, 0xffff8000, "xvilvl.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751c0000, 0xffff8000, "xvilvh.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751c8000, 0xffff8000, "xvilvh.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751d0000, 0xffff8000, "xvilvh.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751d8000, 0xffff8000, "xvilvh.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751e0000, 0xffff8000, "xvpickev.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751e8000, 0xffff8000, "xvpickev.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751f0000, 0xffff8000, "xvpickev.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x751f8000, 0xffff8000, "xvpickev.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75200000, 0xffff8000, "xvpickod.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75208000, 0xffff8000, "xvpickod.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75210000, 0xffff8000, "xvpickod.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75218000, 0xffff8000, "xvpickod.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75220000, 0xffff8000, "xvreplve.b", "x0:5,x5:5,r10:5", 0, 0, 0, 0},
++  { 0x75228000, 0xffff8000, "xvreplve.h", "x0:5,x5:5,r10:5", 0, 0, 0, 0},
++  { 0x75230000, 0xffff8000, "xvreplve.w", "x0:5,x5:5,r10:5", 0, 0, 0, 0},
++  { 0x75238000, 0xffff8000, "xvreplve.d", "x0:5,x5:5,r10:5", 0, 0, 0, 0},
++  { 0x75260000, 0xffff8000, "xvand.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75268000, 0xffff8000, "xvor.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75270000, 0xffff8000, "xvxor.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75278000, 0xffff8000, "xvnor.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75280000, 0xffff8000, "xvandn.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75288000, 0xffff8000, "xvorn.v", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752b0000, 0xffff8000, "xvfrstp.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752b8000, 0xffff8000, "xvfrstp.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752d0000, 0xffff8000, "xvadd.q", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752d8000, 0xffff8000, "xvsub.q", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752e0000, 0xffff8000, "xvsigncov.b", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752e8000, 0xffff8000, "xvsigncov.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752f0000, 0xffff8000, "xvsigncov.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x752f8000, 0xffff8000, "xvsigncov.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75308000, 0xffff8000, "xvfadd.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75310000, 0xffff8000, "xvfadd.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75328000, 0xffff8000, "xvfsub.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75330000, 0xffff8000, "xvfsub.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75388000, 0xffff8000, "xvfmul.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75390000, 0xffff8000, "xvfmul.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753a8000, 0xffff8000, "xvfdiv.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753b0000, 0xffff8000, "xvfdiv.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753c8000, 0xffff8000, "xvfmax.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753d0000, 0xffff8000, "xvfmax.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753e8000, 0xffff8000, "xvfmin.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x753f0000, 0xffff8000, "xvfmin.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75408000, 0xffff8000, "xvfmaxa.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75410000, 0xffff8000, "xvfmaxa.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75428000, 0xffff8000, "xvfmina.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75430000, 0xffff8000, "xvfmina.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75460000, 0xffff8000, "xvfcvt.h.s", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75468000, 0xffff8000, "xvfcvt.s.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75480000, 0xffff8000, "xvffint.s.l", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x75498000, 0xffff8000, "xvftint.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x754a0000, 0xffff8000, "xvftintrm.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x754a8000, 0xffff8000, "xvftintrp.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x754b0000, 0xffff8000, "xvftintrz.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x754b8000, 0xffff8000, "xvftintrne.w.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x757a8000, 0xffff8000, "xvshuf.h", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x757b0000, 0xffff8000, "xvshuf.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x757b8000, 0xffff8000, "xvshuf.d", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x757d0000, 0xffff8000, "xvperm.w", "x0:5,x5:5,x10:5",              0,                      0,      0,      0 },
++  { 0x76800000, 0xffff8000, "xvseqi.b", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76808000, 0xffff8000, "xvseqi.h", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76810000, 0xffff8000, "xvseqi.w", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76818000, 0xffff8000, "xvseqi.d", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76820000, 0xffff8000, "xvslei.b", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76828000, 0xffff8000, "xvslei.h", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76830000, 0xffff8000, "xvslei.w", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76838000, 0xffff8000, "xvslei.d", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76840000, 0xffff8000, "xvslei.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76848000, 0xffff8000, "xvslei.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76850000, 0xffff8000, "xvslei.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76858000, 0xffff8000, "xvslei.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76860000, 0xffff8000, "xvslti.b", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76868000, 0xffff8000, "xvslti.h", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76870000, 0xffff8000, "xvslti.w", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76878000, 0xffff8000, "xvslti.d", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76880000, 0xffff8000, "xvslti.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76888000, 0xffff8000, "xvslti.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76890000, 0xffff8000, "xvslti.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76898000, 0xffff8000, "xvslti.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768a0000, 0xffff8000, "xvaddi.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768a8000, 0xffff8000, "xvaddi.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768b0000, 0xffff8000, "xvaddi.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768b8000, 0xffff8000, "xvaddi.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768c0000, 0xffff8000, "xvsubi.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768c8000, 0xffff8000, "xvsubi.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768d0000, 0xffff8000, "xvsubi.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768d8000, 0xffff8000, "xvsubi.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768e0000, 0xffff8000, "xvbsll.v", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x768e8000, 0xffff8000, "xvbsrl.v", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76900000, 0xffff8000, "xvmaxi.b", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76908000, 0xffff8000, "xvmaxi.h", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76910000, 0xffff8000, "xvmaxi.w", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76918000, 0xffff8000, "xvmaxi.d", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76920000, 0xffff8000, "xvmini.b", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76928000, 0xffff8000, "xvmini.h", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76930000, 0xffff8000, "xvmini.w", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76938000, 0xffff8000, "xvmini.d", "x0:5,x5:5,s10:5", 0, 0, 0, 0},
++  { 0x76940000, 0xffff8000, "xvmaxi.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76948000, 0xffff8000, "xvmaxi.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76950000, 0xffff8000, "xvmaxi.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76958000, 0xffff8000, "xvmaxi.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76960000, 0xffff8000, "xvmini.bu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76968000, 0xffff8000, "xvmini.hu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76970000, 0xffff8000, "xvmini.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76978000, 0xffff8000, "xvmini.du", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x769a0000, 0xffff8000, "xvfrstpi.b", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x769a8000, 0xffff8000, "xvfrstpi.h", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x769c0000, 0xfffffc00, "xvclo.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c0400, 0xfffffc00, "xvclo.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c0800, 0xfffffc00, "xvclo.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c0c00, 0xfffffc00, "xvclo.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c1000, 0xfffffc00, "xvclz.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c1400, 0xfffffc00, "xvclz.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c1800, 0xfffffc00, "xvclz.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c1c00, 0xfffffc00, "xvclz.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c2000, 0xfffffc00, "xvpcnt.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c2400, 0xfffffc00, "xvpcnt.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c2800, 0xfffffc00, "xvpcnt.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c2c00, 0xfffffc00, "xvpcnt.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c3000, 0xfffffc00, "xvneg.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c3400, 0xfffffc00, "xvneg.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c3800, 0xfffffc00, "xvneg.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c3c00, 0xfffffc00, "xvneg.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c4000, 0xfffffc00, "xvmskltz.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c4400, 0xfffffc00, "xvmskltz.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c4800, 0xfffffc00, "xvmskltz.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c4c00, 0xfffffc00, "xvmskltz.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c5000, 0xfffffc00, "xvmskgez.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c6000, 0xfffffc00, "xvmsknz.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769c9800, 0xfffffc18, "xvseteqz.v", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769c9c00, 0xfffffc18, "xvsetnez.v", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769ca000, 0xfffffc18, "xvsetanyeqz.b", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769ca400, 0xfffffc18, "xvsetanyeqz.h", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769ca800, 0xfffffc18, "xvsetanyeqz.w", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cac00, 0xfffffc18, "xvsetanyeqz.d", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cb000, 0xfffffc18, "xvsetallnez.b", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cb400, 0xfffffc18, "xvsetallnez.h", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cb800, 0xfffffc18, "xvsetallnez.w", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cbc00, 0xfffffc18, "xvsetallnez.d", "c0:3,x5:5", 0, 0, 0, 0},
++  { 0x769cc400, 0xfffffc00, "xvflogb.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769cc800, 0xfffffc00, "xvflogb.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769cd400, 0xfffffc00, "xvfclass.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769cd800, 0xfffffc00, "xvfclass.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ce400, 0xfffffc00, "xvfsqrt.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ce800, 0xfffffc00, "xvfsqrt.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769cf400, 0xfffffc00, "xvfrecip.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769cf800, 0xfffffc00, "xvfrecip.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d0400, 0xfffffc00, "xvfrsqrt.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d0800, 0xfffffc00, "xvfrsqrt.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d3400, 0xfffffc00, "xvfrint.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d3800, 0xfffffc00, "xvfrint.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d4400, 0xfffffc00, "xvfrintrm.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d4800, 0xfffffc00, "xvfrintrm.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d5400, 0xfffffc00, "xvfrintrp.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d5800, 0xfffffc00, "xvfrintrp.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d6400, 0xfffffc00, "xvfrintrz.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d6800, 0xfffffc00, "xvfrintrz.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d7400, 0xfffffc00, "xvfrintrne.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769d7800, 0xfffffc00, "xvfrintrne.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769de800, 0xfffffc00, "xvfcvtl.s.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769dec00, 0xfffffc00, "xvfcvth.s.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769df000, 0xfffffc00, "xvfcvtl.d.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769df400, 0xfffffc00, "xvfcvth.d.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e0000, 0xfffffc00, "xvffint.s.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e0400, 0xfffffc00, "xvffint.s.wu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e0800, 0xfffffc00, "xvffint.d.l", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e0c00, 0xfffffc00, "xvffint.d.lu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e1000, 0xfffffc00, "xvffintl.d.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e1400, 0xfffffc00, "xvffinth.d.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e3000, 0xfffffc00, "xvftint.w.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e3400, 0xfffffc00, "xvftint.l.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e3800, 0xfffffc00, "xvftintrm.w.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e3c00, 0xfffffc00, "xvftintrm.l.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e4000, 0xfffffc00, "xvftintrp.w.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e4400, 0xfffffc00, "xvftintrp.l.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e4800, 0xfffffc00, "xvftintrz.w.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e4c00, 0xfffffc00, "xvftintrz.l.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e5000, 0xfffffc00, "xvftintrne.w.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e5400, 0xfffffc00, "xvftintrne.l.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e5800, 0xfffffc00, "xvftint.wu.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e5c00, 0xfffffc00, "xvftint.lu.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e7000, 0xfffffc00, "xvftintrz.wu.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e7400, 0xfffffc00, "xvftintrz.lu.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e8000, 0xfffffc00, "xvftintl.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e8400, 0xfffffc00, "xvftinth.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e8800, 0xfffffc00, "xvftintrml.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e8c00, 0xfffffc00, "xvftintrmh.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e9000, 0xfffffc00, "xvftintrpl.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e9400, 0xfffffc00, "xvftintrph.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e9800, 0xfffffc00, "xvftintrzl.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769e9c00, 0xfffffc00, "xvftintrzh.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ea000, 0xfffffc00, "xvftintrnel.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ea400, 0xfffffc00, "xvftintrneh.l.s", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ee000, 0xfffffc00, "xvexth.h.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ee400, 0xfffffc00, "xvexth.w.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ee800, 0xfffffc00, "xvexth.d.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769eec00, 0xfffffc00, "xvexth.q.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ef000, 0xfffffc00, "xvexth.hu.bu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ef400, 0xfffffc00, "xvexth.wu.hu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769ef800, 0xfffffc00, "xvexth.du.wu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769efc00, 0xfffffc00, "xvexth.qu.du", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f0000, 0xfffffc00, "xvreplgr2vr.b", "x0:5,r5:5", 0, 0, 0, 0},
++  { 0x769f0400, 0xfffffc00, "xvreplgr2vr.h", "x0:5,r5:5", 0, 0, 0, 0},
++  { 0x769f0800, 0xfffffc00, "xvreplgr2vr.w", "x0:5,r5:5", 0, 0, 0, 0},
++  { 0x769f0c00, 0xfffffc00, "xvreplgr2vr.d", "x0:5,r5:5", 0, 0, 0, 0},
++  { 0x769f1000, 0xfffffc00, "vext2xv.h.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f1400, 0xfffffc00, "vext2xv.w.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f1800, 0xfffffc00, "vext2xv.d.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f1c00, 0xfffffc00, "vext2xv.w.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f2000, 0xfffffc00, "vext2xv.d.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f2400, 0xfffffc00, "vext2xv.d.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f2800, 0xfffffc00, "vext2xv.hu.bu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f2c00, 0xfffffc00, "vext2xv.wu.bu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f3000, 0xfffffc00, "vext2xv.du.bu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f3400, 0xfffffc00, "vext2xv.wu.hu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f3800, 0xfffffc00, "vext2xv.du.hu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f3c00, 0xfffffc00, "vext2xv.du.wu", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x769f8000, 0xffff8000, "xvhseli.d", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76a02000, 0xffffe000, "xvrotri.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76a04000, 0xffffc000, "xvrotri.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x76a08000, 0xffff8000, "xvrotri.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76a10000, 0xffff0000, "xvrotri.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x76a42000, 0xffffe000, "xvsrlri.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76a44000, 0xffffc000, "xvsrlri.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x76a48000, 0xffff8000, "xvsrlri.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76a50000, 0xffff0000, "xvsrlri.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x76a82000, 0xffffe000, "xvsrari.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76a84000, 0xffffc000, "xvsrari.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x76a88000, 0xffff8000, "xvsrari.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x76a90000, 0xffff0000, "xvsrari.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x76ebc000, 0xffffe000, "xvinsgr2vr.w", "x0:5,r5:5,u10:3", 0, 0, 0, 0},
++  { 0x76ebe000, 0xfffff000, "xvinsgr2vr.d", "x0:5,r5:5,u10:2", 0, 0, 0, 0},
++  { 0x76efc000, 0xffffe000, "xvpickve2gr.w", "r0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76efe000, 0xfffff000, "xvpickve2gr.d", "r0:5,x5:5,u10:2", 0, 0, 0, 0},
++  { 0x76f3c000, 0xffffe000, "xvpickve2gr.wu", "r0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76f3e000, 0xfffff000, "xvpickve2gr.du", "r0:5,x5:5,u10:2", 0, 0, 0, 0},
++  { 0x76f78000, 0xffffc000, "xvrepl128vei.b", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x76f7c000, 0xffffe000, "xvrepl128vei.h", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76f7e000, 0xfffff000, "xvrepl128vei.w", "x0:5,x5:5,u10:2", 0, 0, 0, 0},
++  { 0x76f7f000, 0xfffff800, "xvrepl128vei.d", "x0:5,x5:5,u10:1", 0, 0, 0, 0},
++  { 0x76ffc000, 0xffffe000, "xvinsve0.w", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x76ffe000, 0xfffff000, "xvinsve0.d", "x0:5,x5:5,u10:2", 0, 0, 0, 0},
++  { 0x7703c000, 0xffffe000, "xvpickve.w", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x7703e000, 0xfffff000, "xvpickve.d", "x0:5,x5:5,u10:2", 0, 0, 0, 0},
++  { 0x77070000, 0xfffffc00, "xvreplve0.b", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x77078000, 0xfffffc00, "xvreplve0.h", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x7707c000, 0xfffffc00, "xvreplve0.w", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x7707e000, 0xfffffc00, "xvreplve0.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x7707f000, 0xfffffc00, "xvreplve0.q", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x77082000, 0xffffe000, "xvsllwil.h.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77084000, 0xffffc000, "xvsllwil.w.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77088000, 0xffff8000, "xvsllwil.d.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77090000, 0xfffffc00, "xvextl.q.d", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x770c2000, 0xffffe000, "xvsllwil.hu.bu", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x770c4000, 0xffffc000, "xvsllwil.wu.hu", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x770c8000, 0xffff8000, "xvsllwil.du.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x770d0000, 0xfffffc00, "xvextl.qu.du", "x0:5,x5:5", 0, 0, 0, 0},
++  { 0x77102000, 0xffffe000, "xvbitclri.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77104000, 0xffffc000, "xvbitclri.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77108000, 0xffff8000, "xvbitclri.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77110000, 0xffff0000, "xvbitclri.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77142000, 0xffffe000, "xvbitseti.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77144000, 0xffffc000, "xvbitseti.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77148000, 0xffff8000, "xvbitseti.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77150000, 0xffff0000, "xvbitseti.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77182000, 0xffffe000, "xvbitrevi.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77184000, 0xffffc000, "xvbitrevi.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77188000, 0xffff8000, "xvbitrevi.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77190000, 0xffff0000, "xvbitrevi.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77242000, 0xffffe000, "xvsat.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77244000, 0xffffc000, "xvsat.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77248000, 0xffff8000, "xvsat.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77250000, 0xffff0000, "xvsat.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77282000, 0xffffe000, "xvsat.bu", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77284000, 0xffffc000, "xvsat.hu", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77288000, 0xffff8000, "xvsat.wu", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77290000, 0xffff0000, "xvsat.du", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x772c2000, 0xffffe000, "xvslli.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x772c4000, 0xffffc000, "xvslli.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x772c8000, 0xffff8000, "xvslli.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x772d0000, 0xffff0000, "xvslli.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77302000, 0xffffe000, "xvsrli.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77304000, 0xffffc000, "xvsrli.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77308000, 0xffff8000, "xvsrli.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77310000, 0xffff0000, "xvsrli.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77342000, 0xffffe000, "xvsrai.b", "x0:5,x5:5,u10:3", 0, 0, 0, 0},
++  { 0x77344000, 0xffffc000, "xvsrai.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77348000, 0xffff8000, "xvsrai.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77350000, 0xffff0000, "xvsrai.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77404000, 0xffffc000, "xvsrlni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77408000, 0xffff8000, "xvsrlni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77410000, 0xffff0000, "xvsrlni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77420000, 0xfffe0000, "xvsrlni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77444000, 0xffffc000, "xvsrlrni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77448000, 0xffff8000, "xvsrlrni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77450000, 0xffff0000, "xvsrlrni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77460000, 0xfffe0000, "xvsrlrni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77484000, 0xffffc000, "xvssrlni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77488000, 0xffff8000, "xvssrlni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77490000, 0xffff0000, "xvssrlni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x774a0000, 0xfffe0000, "xvssrlni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x774c4000, 0xffffc000, "xvssrlni.bu.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x774c8000, 0xffff8000, "xvssrlni.hu.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x774d0000, 0xffff0000, "xvssrlni.wu.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x774e0000, 0xfffe0000, "xvssrlni.du.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77504000, 0xffffc000, "xvssrlrni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77508000, 0xffff8000, "xvssrlrni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77510000, 0xffff0000, "xvssrlrni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77520000, 0xfffe0000, "xvssrlrni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77544000, 0xffffc000, "xvssrlrni.bu.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77548000, 0xffff8000, "xvssrlrni.hu.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77550000, 0xffff0000, "xvssrlrni.wu.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77560000, 0xfffe0000, "xvssrlrni.du.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77584000, 0xffffc000, "xvsrani.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77588000, 0xffff8000, "xvsrani.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77590000, 0xffff0000, "xvsrani.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x775a0000, 0xfffe0000, "xvsrani.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x775c4000, 0xffffc000, "xvsrarni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x775c8000, 0xffff8000, "xvsrarni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x775d0000, 0xffff0000, "xvsrarni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x775e0000, 0xfffe0000, "xvsrarni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77604000, 0xffffc000, "xvssrani.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77608000, 0xffff8000, "xvssrani.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77610000, 0xffff0000, "xvssrani.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77620000, 0xfffe0000, "xvssrani.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77644000, 0xffffc000, "xvssrani.bu.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77648000, 0xffff8000, "xvssrani.hu.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77650000, 0xffff0000, "xvssrani.wu.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x77660000, 0xfffe0000, "xvssrani.du.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77684000, 0xffffc000, "xvssrarni.b.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x77688000, 0xffff8000, "xvssrarni.h.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x77690000, 0xffff0000, "xvssrarni.w.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x776a0000, 0xfffe0000, "xvssrarni.d.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x776c4000, 0xffffc000, "xvssrarni.bu.h", "x0:5,x5:5,u10:4", 0, 0, 0, 0},
++  { 0x776c8000, 0xffff8000, "xvssrarni.hu.w", "x0:5,x5:5,u10:5", 0, 0, 0, 0},
++  { 0x776d0000, 0xffff0000, "xvssrarni.wu.d", "x0:5,x5:5,u10:6", 0, 0, 0, 0},
++  { 0x776e0000, 0xfffe0000, "xvssrarni.du.q", "x0:5,x5:5,u10:7", 0, 0, 0, 0},
++  { 0x77800000, 0xfffc0000, "xvextrins.d", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77840000, 0xfffc0000, "xvextrins.w", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77880000, 0xfffc0000, "xvextrins.h", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x778c0000, 0xfffc0000, "xvextrins.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77900000, 0xfffc0000, "xvshuf4i.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77940000, 0xfffc0000, "xvshuf4i.h", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77980000, 0xfffc0000, "xvshuf4i.w", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x779c0000, 0xfffc0000, "xvshuf4i.d", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77c40000, 0xfffc0000, "xvbitseli.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77d00000, 0xfffc0000, "xvandi.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77d40000, 0xfffc0000, "xvori.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77d80000, 0xfffc0000, "xvxori.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77dc0000, 0xfffc0000, "xvnori.b", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0, 0, "xvrepli.b", "x,s0:10", "xvldi %1,(%2)&0x3ff", 0, 0, 0},
++  { 0, 0, "xvrepli.d", "x,s0:10", "xvldi %1,((%2)&0x3ff)|0xc00", 0, 0, 0},
++  { 0, 0, "xvrepli.h", "x,s0:10", "xvldi %1,((%2)&0x3ff)|0x400", 0, 0, 0},
++  { 0, 0, "xvrepli.w", "x,s0:10", "xvldi %1,((%2)&0x3ff)|0x800", 0, 0, 0},
++  { 0x77e00000, 0xfffc0000, "xvldi", "x0:5,s5:13", 0, 0, 0, 0},
++  { 0x77e40000, 0xfffc0000, "xvpermi.w", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77e80000, 0xfffc0000, "xvpermi.d", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0x77ec0000, 0xfffc0000, "xvpermi.q", "x0:5,x5:5,u10:8", 0, 0, 0, 0},
++  { 0} /* Terminate the list.  */
++
++};
++
+ struct loongarch_ase loongarch_ASEs[] =
+ {
+   { &LARCH_opts.ase_ilp32, loongarch_macro_opcodes,		0, 0, { 0 }, 0, 0 },
+@@ -860,5 +2322,7 @@ struct loongarch_ase loongarch_ASEs[] =
+   { &LARCH_opts.ase_df, loongarch_4opt_double_float_opcodes,		0, 0, { 0 }, 0, 0 },
+   { &LARCH_opts.ase_sf, loongarch_single_float_load_store_opcodes,	0, 0, { 0 }, 0, 0 },
+   { &LARCH_opts.ase_df, loongarch_double_float_load_store_opcodes,	0, 0, { 0 }, 0, 0 },
++  { &LARCH_opts.ase_lsx, loongarch_lsx_opcodes,                  0, 0, { 0},  0, 0 },
++  { &LARCH_opts.ase_lasx, loongarch_lasx_opcodes,                0, 0, { 0},  0, 0 },
+   { 0 },
+ };
diff -uNr a/debian/rules b/debian/rules
--- a/debian/rules	2023-05-10 20:34:20.000000000 +0800
+++ b/debian/rules	2023-05-29 15:23:23.000000000 +0800
@@ -117,7 +117,7 @@
 install_script = install -m 755
 install_binary = install -m 755 -s --strip-program="$(STRIP)"
 
-NATIVE_ARCHS ?= amd64 i386 arm64 armhf armel ppc64el s390x
+NATIVE_ARCHS ?= amd64 i386 arm64 armhf armel loong64 ppc64el s390x
 NATIVE_ARCHS += alpha arc hppa ia64 m68k powerpc ppc64 \
 	riscv64 sh4 sparc64 x32
 NATIVE_ARCHS += hurd-amd64 hurd-i386 kfreebsd-amd64 kfreebsd-i386
@@ -141,7 +141,7 @@
                    s390x ppc64el arm64 armhf armel \
                    alpha arc hppa m68k \
                    powerpc ppc64 sh4 sparc64 \
-                   ia64 riscv64 \
+                   ia64 riscv64 loong64 \
                    kfreebsd-amd64 kfreebsd-i386 hurd-i386
   else ifeq ($(DEB_HOST_ARCH),arm64)
     CROSS_ARCHS ?= amd64 armel armhf i386 ppc64el riscv64 s390x arc x32
@@ -200,6 +200,7 @@
 HOST_ARCHS_i386 = amd64 arm64 ppc64el x32
 HOST_ARCHS_ia64 = amd64 i386 x32
 HOST_ARCHS_riscv64 = amd64 i386 x32 arm64 ppc64el
+HOST_ARCHS_loong64 = amd64 i386 x32 arm64 
 
 HOST_ARCHS_alpha = amd64 i386 x32
 #HOST_ARCHS_arc = amd64 i386 x32
@@ -555,6 +556,9 @@
 
 CONFARGS_TARGET_arc		= --with-cpu=hs38_linux
 
+CONFARGS_TARGET_loong64		=
+
+
 with_check := yes
 ifneq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
   # override buildd admins to run the testsuite anyway ...
