diff -uNr a/debian/patches/fix-python-install.patch b/debian/patches/fix-python-install.patch
--- a/debian/patches/fix-python-install.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/fix-python-install.patch	2023-06-24 01:14:33.000000000 +0800
@@ -0,0 +1,38 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ libseccomp (2.5.4-1.ulb1) unstable; urgency=medium
+ .
+   * Non-maintainer upload.
+   * backport all upstream patches for loong64
+Author: root <root@debian-loongarch>
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-06-23
+
+--- libseccomp-2.5.4.orig/src/python/Makefile.am
++++ libseccomp-2.5.4/src/python/Makefile.am
+@@ -40,7 +40,7 @@ build: ../libseccomp.la libseccomp.pxd s
+ 	${PY_BUILD} && touch build
+ 
+ install-exec-local: build
+-	${PY_INSTALL} --install-lib=${DESTDIR}/${pyexecdir} \
++	${PY_INSTALL} --single-version-externally-managed --install-lib=${DESTDIR}/${pyexecdir} \
+ 		--record=${DESTDIR}/${pyexecdir}/install_files.txt
+ 
+ uninstall-local:
diff -uNr a/debian/patches/merge-update.patch b/debian/patches/merge-update.patch
--- a/debian/patches/merge-update.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/merge-update.patch	2023-06-24 01:14:33.000000000 +0800
@@ -0,0 +1,5702 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ libseccomp (2.5.4-1.ulb1) unstable; urgency=medium
+ .
+   * Non-maintainer upload.
+   * backport all upstream patches for loong64
+Author: root <root@debian-loongarch>
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-06-23
+
+--- /dev/null
++++ libseccomp-2.5.4/.github/dependabot.yml
+@@ -0,0 +1,23 @@
++#
++# Dependabot Workflow for libseccomp
++#
++# Copyright (c) 2023 Oracle and/or its affiliates.
++# Author: Tom Hromatka <tom.hromatka@oracle.com>
++#
++
++# based on this guide from GitHub:
++# https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot
++
++version: 2
++updates:
++
++  - package-ecosystem: "github-actions"
++    directory: "/"
++    schedule:
++      # Check for updates to GitHub Actions every week
++      interval: "weekly"
++    commit-message:
++      prefix: "RFE: "
++    labels:
++      - "enhancement"
++      - "priority/low"
+--- libseccomp-2.5.4.orig/CONTRIBUTING.md
++++ libseccomp-2.5.4/CONTRIBUTING.md
+@@ -1,4 +1,4 @@
+-How to Submit Patches to the libseccomp Project
++How to Contribute to the libseccomp Project
+ ===============================================================================
+ https://github.com/seccomp/libseccomp
+ 
+@@ -8,6 +8,20 @@ to the rules described here, but by foll
+ should have a much easier time getting your work merged with the upstream
+ project.
+ 
++## Interacting with the Community
++
++> "Be excellent to each other." - *Bill S. Preston, Esq.*
++
++The libseccomp project aims to be a welcoming place and we ask that anyone who
++interacts with the project, and the greater community, treat each other with
++dignity and respect.  Individuals who do not behave in such a manner will be
++warned and asked to adjust their behavior; in extreme cases the individual
++may be blocked from the project.
++
++Examples of inappropriate behavior includes: profane, abusive, or prejudicial
++language directed at another person, vandalism (e.g. GitHub issue/PR "litter"),
++or spam.
++
+ ## Test Your Code Using Existing Tests
+ 
+ There are three possible tests you can run to verify your code.  The first
+--- libseccomp-2.5.4.orig/CREDITS
++++ libseccomp-2.5.4/CREDITS
+@@ -29,12 +29,14 @@ Jan Willeke <willeke@linux.vnet.ibm.com>
+ Jay Guo <guojiannan@cn.ibm.com>
+ Jiannan Guo <guojiannan1101@gmail.com>
+ Joe MacDonald <joe@deserted.net>
++John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
+ Jonah Petri <jonah@petri.us>
+ Justin Cormack <justin.cormack@docker.com>
+ Kees Cook <keescook@chromium.org>
+ Kyle R. Conway <kyle.r.conway@gmail.com>
+ Kenta Tada <Kenta.Tada@sony.com>
+ Kir Kolyshkin <kolyshkin@gmail.com>
++Lin, Yong Xiang <r888800009@gmail.com>
+ Luca Bruno <lucab@debian.org>
+ Manabu Sugimoto <Manabu.Sugimoto@sony.com>
+ Marcin Juszkiewicz <mjuszkiewicz@redhat.com>
+@@ -61,7 +63,7 @@ Tom Hromatka <tom.hromatka@oracle.com>
+ Tudor Brindus <me@tbrindus.ca>
+ Tycho Andersen <tycho@tycho.ws>
+ Tyler Hicks <tyhicks@canonical.com>
+-valoq <valoq@mailbox.org>
++Valoq <valoq@mailbox.org>
+ Vicente Olivert Riera <Vincent.Riera@imgtec.com>
+ Vitaly Vi Shukela <vi0oss@gmail.com>
+ Vladimir Rutsky <vladimir@rutsky.org>
+--- libseccomp-2.5.4.orig/README.md
++++ libseccomp-2.5.4/README.md
+@@ -5,7 +5,7 @@ https://github.com/seccomp/libseccomp
+ [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/608/badge)](https://bestpractices.coreinfrastructure.org/projects/608)
+ [![Build Status](https://github.com/seccomp/libseccomp/workflows/Continuous%20Integration/badge.svg?branch=main)](https://github.com/seccomp/libseccomp/actions)
+ [![Coverage Status](https://img.shields.io/coveralls/github/seccomp/libseccomp/main.svg)](https://coveralls.io/github/seccomp/libseccomp?branch=main)
+-[![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/seccomp/libseccomp.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/seccomp/libseccomp/context:cpp)
++[![CodeQL Analysis](https://github.com/seccomp/libseccomp/actions/workflows/codeql-analysis.yml/badge.svg?branch=main)](https://github.com/seccomp/libseccomp/actions)
+ 
+ The libseccomp library provides an easy to use, platform independent, interface
+ to the Linux Kernel's syscall filtering mechanism.  The libseccomp API is
+@@ -33,6 +33,8 @@ The libseccomp library currently support
+ * 64-bit x86 x32 ABI (x32)
+ * 32-bit ARM EABI (arm)
+ * 64-bit ARM (aarch64)
++* 64-bit LoongArch (loongarch64)
++* 32-bit Motorola 68000 (m68k)
+ * 32-bit MIPS (mips)
+ * 32-bit MIPS little endian (mipsel)
+ * 64-bit MIPS (mips64)
+@@ -47,6 +49,8 @@ The libseccomp library currently support
+ * 32-bit s390 (s390)
+ * 64-bit s390x (s390x)
+ * 64-bit RISC-V (riscv64)
++* 32-bit SuperH big endian (sheb)
++* 32-bit SuperH (sh)
+ 
+ ## Documentation
+ 
+@@ -55,7 +59,7 @@ mostly in the form of manpages.  The top
+ file (this file) as well as the LICENSE, CREDITS, CONTRIBUTING, and
+ CHANGELOG files.
+ 
+-Those who are interested in contributing to the the project are encouraged to
++Those who are interested in contributing to the project are encouraged to
+ read the CONTRIBUTING in the top level directory.
+ 
+ ## Verifying Release Tarballs
+--- libseccomp-2.5.4.orig/configure.ac
++++ libseccomp-2.5.4/configure.ac
+@@ -95,9 +95,11 @@ dnl cython checks
+ dnl ####
+ AC_CHECK_PROGS(cython, cython3 cython, "no")
+ AS_IF([test "$cython" != no], [
+-	AS_ECHO("checking cython version... $($cython -V 2>&1 | cut -d' ' -f 3)")
+-	CYTHON_VER_MAJ=$($cython -V 2>&1 | cut -d' ' -f 3 | cut -d'.' -f 1);
+-	CYTHON_VER_MIN=$($cython -V 2>&1 | cut -d' ' -f 3 | cut -d'.' -f 2);
++	AC_MSG_CHECKING([cython version])
++	CYTHON_VER_FULL=$(cython -V 2>&1 | cut -d' ' -f 3);
++	CYTHON_VER_MAJ=$(echo $CYTHON_VER_FULL | cut -d'.' -f 1);
++	CYTHON_VER_MIN=$(echo $CYTHON_VER_FULL | cut -d'.' -f 2);
++	AC_MSG_RESULT([$CYTHON_VER_FULL])
+ ],[
+ 	CYTHON_VER_MAJ=0
+ 	CYTHON_VER_MIN=0
+@@ -118,7 +120,7 @@ AS_IF([test "$enable_python" = yes], [
+ ])
+ AM_CONDITIONAL([ENABLE_PYTHON], [test "$enable_python" = yes])
+ AC_DEFINE_UNQUOTED([ENABLE_PYTHON],
+-	[$(test "$enable_python" = yes && echo 1 || echo 0)],
++	[$(test "$enable_python" = "yes" && echo 1 || echo 0)],
+ 	[Python bindings build flag.])
+ 
+ AC_CHECK_TOOL(GPERF, gperf)
+--- libseccomp-2.5.4.orig/doc/Makefile.am
++++ libseccomp-2.5.4/doc/Makefile.am
+@@ -28,10 +28,12 @@ dist_man3_MANS = \
+ 	man/man3/seccomp_attr_get.3 \
+ 	man/man3/seccomp_attr_set.3 \
+ 	man/man3/seccomp_export_bpf.3 \
++	man/man3/seccomp_export_bpf_mem.3 \
+ 	man/man3/seccomp_export_pfc.3 \
+ 	man/man3/seccomp_init.3 \
+ 	man/man3/seccomp_load.3 \
+ 	man/man3/seccomp_merge.3 \
++	man/man3/seccomp_precompute.3 \
+ 	man/man3/seccomp_release.3 \
+ 	man/man3/seccomp_reset.3 \
+ 	man/man3/seccomp_rule_add.3 \
+--- libseccomp-2.5.4.orig/doc/man/man1/scmp_sys_resolver.1
++++ libseccomp-2.5.4/doc/man/man1/scmp_sys_resolver.1
+@@ -34,9 +34,9 @@ special manner by libseccomp depending o
+ .B \-a \fIARCH
+ The architecture to use for resolving the system call.  Valid
+ .I ARCH
+-values are "x86", "x86_64", "x32", "arm", "aarch64", "mips", "mipsel", "mips64",
+-"mipsel64", "mips64n32", "mipsel64n32", "parisc", "parisc64", "ppc", "ppc64",
+-"ppc64le", "s390" and "s390x".
++values are "x86", "x86_64", "x32", "arm", "aarch64", "loongarch64", "m68k",
++"mips", "mipsel", "mips64", "mipsel64", "mips64n32", "mipsel64n32", "parisc",
++"parisc64", "ppc", "ppc64", "ppc64le", "s390", "s390x", "sheb" and "sh".
+ .TP
+ .B \-t
+ If necessary, translate the system call name to the proper system call number,
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_api_get.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_api_get.3
+@@ -1,4 +1,4 @@
+-.TH "seccomp_api_get" 3 "6 November 2020" "paul@paul-moore.com" "libseccomp Documentation"
++.TH "seccomp_api_get" 3 "22 September 2022" "paul@paul-moore.com" "libseccomp Documentation"
+ .\" //////////////////////////////////////////////////////////////////////////
+ .SH NAME
+ .\" //////////////////////////////////////////////////////////////////////////
+@@ -60,6 +60,9 @@ The SCMP_ACT_NOTIFY action and the notif
+ .TP
+ .B 6
+ The simultaneous use of SCMP_FLTATR_CTL_TSYNC and the notify APIs are supported.
++.TP
++.B 7
++The SCMP_FLTATR_CTL_WAITKILL filter attribute is supported.
+ .\" //////////////////////////////////////////////////////////////////////////
+ .SH RETURN VALUE
+ .\" //////////////////////////////////////////////////////////////////////////
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_arch_add.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_arch_add.3
+@@ -17,6 +17,7 @@ seccomp_arch_add, seccomp_arch_remove, s
+ .B #define SCMP_ARCH_X32
+ .B #define SCMP_ARCH_ARM
+ .B #define SCMP_ARCH_AARCH64
++.B #define SCMP_ARCH_LOONGARCH64
+ .B #define SCMP_ARCH_MIPS
+ .B #define SCMP_ARCH_MIPS64
+ .B #define SCMP_ARCH_MIPS64N32
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_attr_set.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_attr_set.3
+@@ -1,4 +1,4 @@
+-.TH "seccomp_attr_set" 3 "06 June 2020" "paul@paul-moore.com" "libseccomp Documentation"
++.TH "seccomp_attr_set" 3 "21 September 2022" "paul@paul-moore.com" "libseccomp Documentation"
+ .\" //////////////////////////////////////////////////////////////////////////
+ .SH NAME
+ .\" //////////////////////////////////////////////////////////////////////////
+@@ -132,6 +132,12 @@ A flag to specify if libseccomp should p
+ caller instead of the default -ECANCELED.  Defaults to off
+ .RI ( value
+ == 0).
++.TP
++.B SCMP_FLTATR_CTL_WAITKILL
++A flag to specify if libseccomp should request wait killable semantics when
++possible.  Defaults to off
++.RI ( value
++== 0).
+ .\" //////////////////////////////////////////////////////////////////////////
+ .SH RETURN VALUE
+ .\" //////////////////////////////////////////////////////////////////////////
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_export_bpf.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_export_bpf.3
+@@ -13,6 +13,7 @@ seccomp_export_bpf, seccomp_export_pfc \
+ .sp
+ .BI "int seccomp_export_bpf(const scmp_filter_ctx " ctx ", int " fd ");"
+ .BI "int seccomp_export_pfc(const scmp_filter_ctx " ctx ", int " fd ");"
++.BI "int seccomp_export_bpf_mem(const scmp_filter_ctx " ctx ", void *" buf ", size_t *" len ");"
+ .sp
+ Link with \fI\-lseccomp\fP.
+ .fi
+@@ -42,6 +43,26 @@ is the value returned by the call to
+ While the two output formats are guaranteed to be functionally equivalent for
+ the given seccomp filter configuration, the filter instructions, and their
+ ordering, are not guaranteed to be the same in both the BPF and PFC formats.
++.P
++The
++.BR seccomp_export_bpf_mem ()
++function is largely the same as
++.BR seccomp_export_bpf (),
++but instead of writing to a file descriptor, the program will be written to the
++.I buf
++pointer provided by the caller.  The
++.I len
++argument must be initialized with the size of the
++.I buf
++buffer.  If the program was valid,
++.I len
++will be updated with its size in bytes.  If
++.I buf
++was too small to hold the program,
++.I len
++can be consulted to determine the required size.  Passing a NULL
++.I buf
++may also be used to query the required size ahead of time.
+ .\" //////////////////////////////////////////////////////////////////////////
+ .SH RETURN VALUE
+ .\" //////////////////////////////////////////////////////////////////////////
+@@ -59,6 +80,9 @@ Invalid input, either the context or arc
+ .TP
+ .B -ENOMEM
+ The library was unable to allocate enough memory.
++.TP
++.B -ERANGE
++The provided buffer was too small.
+ .P
+ If the \fISCMP_FLTATR_API_SYSRAWRC\fP filter attribute is non-zero then
+ additional error codes may be returned to the caller; these additional error
+--- /dev/null
++++ libseccomp-2.5.4/doc/man/man3/seccomp_export_bpf_mem.3
+@@ -0,0 +1 @@
++.so man3/seccomp_export_bpf.3
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_load.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_load.3
+@@ -22,7 +22,12 @@ Link with \fI\-lseccomp\fP.
+ Loads the seccomp filter provided by
+ .I ctx
+ into the kernel; if the function
+-succeeds the new seccomp filter will be active when the function returns.
++succeeds the new seccomp filter will be active when the function returns.  If
++.BR seccomp_precompute (3)
++was called prior to attempting to load the seccomp filter, and no changes have
++been made to the filter,
++.BR seccomp_load ()
++can be considered to be async-signal-safe.
+ .P
+ As it is possible to have multiple stacked seccomp filters for a given task
+ (defined as either a process or a thread), it is important to remember that
+@@ -108,5 +113,5 @@ Paul Moore <paul@paul-moore.com>
+ .BR seccomp_release (3),
+ .BR seccomp_rule_add (3),
+ .BR seccomp_rule_add_exact (3)
+-
+-
++.BR seccomp_precompute (3)
++.BR signal-safety (7)
+--- /dev/null
++++ libseccomp-2.5.4/doc/man/man3/seccomp_precompute.3
+@@ -0,0 +1,103 @@
++.TH "seccomp_precompute" 3 "19 September 2022" "paul@paul-moore.com" "libseccomp Documentation"
++.\" //////////////////////////////////////////////////////////////////////////
++.SH NAME
++.\" //////////////////////////////////////////////////////////////////////////
++seccomp_precompute \- Precompute the current seccomp filter
++.\" //////////////////////////////////////////////////////////////////////////
++.SH SYNOPSIS
++.\" //////////////////////////////////////////////////////////////////////////
++.nf
++.B #include <seccomp.h>
++.sp
++.B typedef void * scmp_filter_ctx;
++.sp
++.BI "int seccomp_precompute(scmp_filter_ctx " ctx ");"
++.sp
++Link with \fI\-lseccomp\fP.
++.fi
++.\" //////////////////////////////////////////////////////////////////////////
++.SH DESCRIPTION
++.\" //////////////////////////////////////////////////////////////////////////
++.P
++Precomputes the seccomp filter for later use by
++.BR seccomp_load ()
++and similar functions.  Not only does this improve performance of
++.BR seccomp_load ()
++it also ensures that the seccomp filter can be loaded in an async-signal-safe
++manner if no changes have been made to the filter since it was precomputed.
++.\" //////////////////////////////////////////////////////////////////////////
++.SH RETURN VALUE
++.\" //////////////////////////////////////////////////////////////////////////
++Returns zero on success or one of the following error codes on failure:
++.TP
++.B -ECANCELED
++There was a system failure beyond the control of the library.
++.TP
++.B -EFAULT
++Internal libseccomp failure.
++.TP
++.B -EINVAL
++Invalid input, either the context or architecture token is invalid.
++.TP
++.B -ENOMEM
++The library was unable to allocate enough memory.
++.P
++If the \fISCMP_FLTATR_API_SYSRAWRC\fP filter attribute is non-zero then
++additional error codes may be returned to the caller; these additional error
++codes are the negative \fIerrno\fP values returned by the system.  Unfortunately
++libseccomp can make no guarantees about these return values.
++.\" //////////////////////////////////////////////////////////////////////////
++.SH EXAMPLES
++.\" //////////////////////////////////////////////////////////////////////////
++.nf
++#include <seccomp.h>
++
++int main(int argc, char *argv[])
++{
++	int rc = \-1;
++	scmp_filter_ctx ctx;
++
++	ctx = seccomp_init(SCMP_ACT_KILL);
++	if (ctx == NULL)
++		goto out;
++
++	/* ... */
++
++	rc = seccomp_precompute(ctx);
++	if (rc < 0)
++		goto out;
++
++	/* ... */
++
++	rc = seccomp_load(ctx);
++	if (rc < 0)
++		goto out;
++
++	/* ... */
++
++out:
++	seccomp_release(ctx);
++	return \-rc;
++}
++.fi
++.\" //////////////////////////////////////////////////////////////////////////
++.SH NOTES
++.\" //////////////////////////////////////////////////////////////////////////
++.P
++While the seccomp filter can be generated independent of the kernel, kernel
++support is required to load and enforce the seccomp filter generated by
++libseccomp.
++.P
++The libseccomp project site, with more information and the source code
++repository, can be found at https://github.com/seccomp/libseccomp.  This tool,
++as well as the libseccomp library, is currently under development, please
++report any bugs at the project site or directly to the author.
++.\" //////////////////////////////////////////////////////////////////////////
++.SH AUTHOR
++.\" //////////////////////////////////////////////////////////////////////////
++Paul Moore <paul@paul-moore.com>
++.\" //////////////////////////////////////////////////////////////////////////
++.SH SEE ALSO
++.\" //////////////////////////////////////////////////////////////////////////
++.BR seccomp_load (3)
++.BR signal-safety (7)
+--- libseccomp-2.5.4.orig/doc/man/man3/seccomp_rule_add.3
++++ libseccomp-2.5.4/doc/man/man3/seccomp_rule_add.3
+@@ -222,7 +222,7 @@ When a filter utilizing
+ is loaded into the kernel, the kernel generates a notification fd that must be
+ used to communicate between the monitoring process and the process(es) being
+ filtered.  See
+-.B seccomp_notif_fd (3)
++.B seccomp_notify_fd (3)
+ for more information.
+ 
+ .P
+@@ -331,7 +331,7 @@ Architecture specific failure.
+ .B -EEXIST
+ The rule already exists.
+ .TP
+-.B -EACCCES
++.B -EACCES
+ The rule conflicts with the filter (for example, the rule
+ .I action
+ equals the default action of the filter).
+--- libseccomp-2.5.4.orig/include/seccomp-syscalls.h
++++ libseccomp-2.5.4/include/seccomp-syscalls.h
+@@ -24,7 +24,7 @@
+ #endif
+ 
+ /*
+- * psuedo syscall definitions
++ * pseudo syscall definitions
+  */
+ 
+ /* socket syscalls */
+@@ -276,6 +276,10 @@
+ #define __PNR_renameat				-10242
+ #define __PNR_riscv_flush_icache		-10243
+ #define __PNR_memfd_secret			-10244
++#define __PNR_fstat				-10245
++#define __PNR_atomic_barrier			-10246
++#define __PNR_atomic_cmpxchg_32			-10247
++#define __PNR_getpagesize			-10248
+ 
+ /*
+  * libseccomp syscall definitions
+@@ -353,6 +357,18 @@
+ #define __SNR_arch_prctl		__PNR_arch_prctl
+ #endif
+ 
++#ifdef __NR_atomic_barrier
++#define __SNR_atomic_barrier		__NR_atomic_barrier
++#else
++#define __SNR_atomic_barrier		__PNR_atomic_barrier
++#endif
++
++#ifdef __NR_atomic_cmpxchg_32
++#define __SNR_atomic_cmpxchg_32		__NR_atomic_cmpxchg_32
++#else
++#define __SNR_atomic_cmpxchg_32		__PNR_atomic_cmpxchg_32
++#endif
++
+ #ifdef __NR_bdflush
+ #define __SNR_bdflush			__NR_bdflush
+ #else
+@@ -823,6 +839,12 @@
+ 
+ #define __SNR_getitimer			__NR_getitimer
+ 
++#ifdef __NR_getpagesize
++#define __SNR_getpagesize		__NR_getpagesize
++#else
++#define __SNR_getpagesize		__PNR_getpagesize
++#endif
++
+ #ifdef __NR_getpeername
+ #define __SNR_getpeername		__NR_getpeername
+ #else
+--- libseccomp-2.5.4.orig/include/seccomp.h.in
++++ libseccomp-2.5.4/include/seccomp.h.in
+@@ -25,6 +25,7 @@
+ 
+ #include <elf.h>
+ #include <inttypes.h>
++#include <stdlib.h>
+ #include <asm/unistd.h>
+ #include <linux/audit.h>
+ #include <linux/types.h>
+@@ -77,6 +78,7 @@ enum scmp_filter_attr {
+ 					 *     number
+ 					 */
+ 	SCMP_FLTATR_API_SYSRAWRC = 9,	/**< return the system return codes */
++	SCMP_FLTATR_CTL_WAITKILL = 10,	/**< request wait killable semantics */
+ 	_SCMP_FLTATR_MAX,
+ };
+ 
+@@ -151,6 +153,23 @@ struct scmp_arg_cmp {
+ #define SCMP_ARCH_AARCH64	AUDIT_ARCH_AARCH64
+ 
+ /**
++ * The LoongArch architecture tokens
++ */
++/* 64-bit LoongArch audit support is upstream as of 5.19-rc1 */
++#ifndef AUDIT_ARCH_LOONGARCH64
++#ifndef EM_LOONGARCH
++#define EM_LOONGARCH		258
++#endif /* EM_LOONGARCH */
++#define AUDIT_ARCH_LOONGARCH64	(EM_LOONGARCH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
++#endif /* AUDIT_ARCH_LOONGARCH64 */
++#define SCMP_ARCH_LOONGARCH64	AUDIT_ARCH_LOONGARCH64
++
++/**
++ * The Motorola 68000 architecture tokens
++ */
++#define SCMP_ARCH_M68K		AUDIT_ARCH_M68K
++
++/**
+  * The MIPS architecture tokens
+  */
+ #ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
+@@ -217,6 +236,12 @@ struct scmp_arg_cmp {
+ #define SCMP_ARCH_RISCV64	AUDIT_ARCH_RISCV64
+ 
+ /**
++ * The SuperH architecture tokens
++ */
++#define SCMP_ARCH_SHEB		AUDIT_ARCH_SH
++#define SCMP_ARCH_SH		AUDIT_ARCH_SHEL /* Little-endian SH is more common than big */
++
++/**
+  * Convert a syscall name into the associated syscall number
+  * @param x the syscall name
+  */
+@@ -414,9 +439,10 @@ const struct scmp_version *seccomp_versi
+  *  3 : support for the SCMP_FLTATR_CTL_LOG filter attribute
+  *      support for the SCMP_ACT_LOG action
+  *      support for the SCMP_ACT_KILL_PROCESS action
+- *  4 : support for the SCMP_FLTATR_CTL_SSB filter attrbute
++ *  4 : support for the SCMP_FLTATR_CTL_SSB filter attribute
+  *  5 : support for the SCMP_ACT_NOTIFY action and notify APIs
+  *  6 : support the simultaneous use of SCMP_FLTATR_CTL_TSYNC and notify APIs
++ *  7 : support for the SCMP_FLTATR_CTL_WAITKILL filter attribute
+  *
+  */
+ unsigned int seccomp_api_get(void);
+@@ -800,16 +826,40 @@ int seccomp_notify_fd(const scmp_filter_
+ int seccomp_export_pfc(const scmp_filter_ctx ctx, int fd);
+ 
+ /**
+- * Generate seccomp Berkley Packet Filter (BPF) code and export it to a file
++ * Generate seccomp Berkeley Packet Filter (BPF) code and export it to a file
+  * @param ctx the filter context
+  * @param fd the destination fd
+  *
+- * This function generates seccomp Berkley Packer Filter (BPF) code and writes
++ * This function generates seccomp Berkeley Packer Filter (BPF) code and writes
+  * it to the given fd.  Returns zero on success, negative values on failure.
+  *
+  */
+ int seccomp_export_bpf(const scmp_filter_ctx ctx, int fd);
+ 
++/**
++ * Generate seccomp Berkeley Packet Filter (BPF) code and export it to a buffer
++ * @param ctx the filter context
++ * @param buf the destination buffer
++ * @param len on input the length of the buffer, on output the number of bytes
++ * in the program
++ *
++ * This function generates seccomp Berkeley Packer Filter (BPF) code and writes
++ * it to the given buffer.  Returns zero on success, negative values on failure.
++ *
++ */
++int seccomp_export_bpf_mem(const scmp_filter_ctx ctx, void *buf, size_t *len);
++
++/**
++ * Precompute the seccomp filter for future use
++ * @param ctx the filter context
++ *
++ * This function precomputes the seccomp filter and stores it internally for
++ * future use, speeding up seccomp_load() and other functions which require
++ * the generated filter.
++ *
++ */
++int seccomp_precompute(const scmp_filter_ctx ctx);
++
+ /*
+  * pseudo syscall definitions
+  */
+--- libseccomp-2.5.4.orig/src/Makefile.am
++++ libseccomp-2.5.4/src/Makefile.am
+@@ -32,6 +32,8 @@ SOURCES_ALL = \
+ 	arch-x32.h arch-x32.c \
+ 	arch-arm.h arch-arm.c \
+ 	arch-aarch64.h arch-aarch64.c \
++	arch-loongarch64.h arch-loongarch64.c \
++	arch-m68k.h arch-m68k.c \
+ 	arch-mips.h arch-mips.c \
+ 	arch-mips64.h arch-mips64.c \
+ 	arch-mips64n32.h arch-mips64n32.c \
+@@ -42,6 +44,7 @@ SOURCES_ALL = \
+ 	arch-riscv64.h arch-riscv64.c \
+ 	arch-s390.h arch-s390.c \
+ 	arch-s390x.h arch-s390x.c \
++	arch-sh.h arch-sh.c \
+ 	syscalls.h syscalls.c syscalls.perf.c
+ 
+ EXTRA_DIST = \
+--- libseccomp-2.5.4.orig/src/api.c
++++ libseccomp-2.5.4/src/api.c
+@@ -2,6 +2,7 @@
+  * Seccomp Library API
+  *
+  * Copyright (c) 2012,2013 Red Hat <pmoore@redhat.com>
++ * Copyright (c) 2022 Microsoft Corporation <paulmoore@microsoft.com>
+  * Author: Paul Moore <paul@paul-moore.com>
+  */
+ 
+@@ -83,6 +84,8 @@ static int _rc_filter(int err)
+ 	 *       requested operation */
+ 	case -EOPNOTSUPP:
+ 	/* NOTE: operation is not supported */
++	case -ERANGE:
++	/* NOTE: provided buffer is too small */
+ 	case -ESRCH:
+ 		/* NOTE: operation failed due to multi-threading */
+ 		return err;
+@@ -188,6 +191,10 @@ static unsigned int _seccomp_api_update(
+ 	    sys_chk_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH) == 1)
+ 		level = 6;
+ 
++	if (level == 6 &&
++	    sys_chk_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV) == 1)
++		level = 7;
++
+ 	/* update the stored api level and return */
+ 	seccomp_api_level = level;
+ 	return seccomp_api_level;
+@@ -220,6 +227,8 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, false);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, false);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, false);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
+ 		break;
+ 	case 2:
+ 		sys_set_seccomp_syscall(true);
+@@ -231,6 +240,8 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, false);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, false);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, false);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
+ 		break;
+ 	case 3:
+ 		sys_set_seccomp_syscall(true);
+@@ -242,6 +253,8 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, false);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, false);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, false);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
+ 		break;
+ 	case 4:
+ 		sys_set_seccomp_syscall(true);
+@@ -253,6 +266,8 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, false);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, false);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, false);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
+ 		break;
+ 	case 5:
+ 		sys_set_seccomp_syscall(true);
+@@ -264,6 +279,8 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, true);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, true);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, false);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
+ 		break;
+ 	case 6:
+ 		sys_set_seccomp_syscall(true);
+@@ -275,6 +292,21 @@ API int seccomp_api_set(unsigned int lev
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, true);
+ 		sys_set_seccomp_action(SCMP_ACT_NOTIFY, true);
+ 		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     false);
++		break;
++	case 7:
++		sys_set_seccomp_syscall(true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_LOG, true);
++		sys_set_seccomp_action(SCMP_ACT_LOG, true);
++		sys_set_seccomp_action(SCMP_ACT_KILL_PROCESS, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_SPEC_ALLOW, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_NEW_LISTENER, true);
++		sys_set_seccomp_action(SCMP_ACT_NOTIFY, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_TSYNC_ESRCH, true);
++		sys_set_seccomp_flag(SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV,
++				     true);
+ 		break;
+ 	default:
+ 		return _rc_filter(-EINVAL);
+@@ -721,13 +753,54 @@ API int seccomp_export_bpf(const scmp_fi
+ 		return _rc_filter(-EINVAL);
+ 	col = (struct db_filter_col *)ctx;
+ 
+-	rc = gen_bpf_generate(col, &program);
++	rc = db_col_precompute(col);
+ 	if (rc < 0)
+ 		return _rc_filter(rc);
++	program = col->prgm_bpf;
+ 	rc = write(fd, program->blks, BPF_PGM_SIZE(program));
+-	gen_bpf_release(program);
+ 	if (rc < 0)
+ 		return _rc_filter_sys(col, -errno);
+ 
+ 	return 0;
+ }
++
++/* NOTE - function header comment in include/seccomp.h */
++API int seccomp_export_bpf_mem(const scmp_filter_ctx ctx, void *buf,
++			       size_t *len)
++{
++	int rc;
++	struct db_filter_col *col;
++	struct bpf_program *program;
++
++	if (_ctx_valid(ctx) || !len)
++		return _rc_filter(-EINVAL);
++	col = (struct db_filter_col *)ctx;
++
++	rc = db_col_precompute(col);
++	if (rc < 0)
++		return _rc_filter(rc);
++	program = col->prgm_bpf;
++
++	if (buf) {
++		/* If we have a big enough buffer, write the program. */
++		if (BPF_PGM_SIZE(program) > *len)
++			rc = _rc_filter(-ERANGE);
++		else
++			memcpy(buf, program->blks, *len);
++	}
++	*len = BPF_PGM_SIZE(program);
++
++	return rc;
++}
++
++/* NOTE - function header comment in include/seccomp.h */
++API int seccomp_precompute(const scmp_filter_ctx ctx)
++{
++	struct db_filter_col *col;
++
++	if (_ctx_valid(ctx))
++		return _rc_filter(-EINVAL);
++	col = (struct db_filter_col *)ctx;
++
++	return _rc_filter(db_col_precompute(col));
++}
+--- libseccomp-2.5.4.orig/src/arch-aarch64.c
++++ libseccomp-2.5.4/src/arch-aarch64.c
+@@ -38,4 +38,6 @@ const struct arch_def arch_def_aarch64 =
+ 	.syscall_resolve_num_raw = aarch64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = aarch64_syscall_name_kver,
++	.syscall_num_kver = aarch64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-arm.c
++++ libseccomp-2.5.4/src/arch-arm.c
+@@ -92,4 +92,6 @@ const struct arch_def arch_def_arm = {
+ 	.syscall_resolve_num_raw = arm_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = arm_syscall_name_kver,
++	.syscall_num_kver = arm_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-gperf-generate
++++ libseccomp-2.5.4/src/arch-gperf-generate
+@@ -23,8 +23,9 @@ sys_csv_tmp=$(mktemp -t generate_syscall
+ 
+ # filter and prepare the syscall csv file
+ cat $sys_csv | grep -v '^#' | nl -ba -s, -v0 | \
+-    sed -e 's/^[[:space:]]\+\([0-9]\+\),\([^,]\+\),\(.*\)/\2,\1,\3/' \
+-        -e ':repeat; {s|\([^,]\+\)\(.*\)[^_]PNR|\1\2,__PNR_\1|g;}; t repeat' \
++    sed -e '{s|^[[:space:]]\+\([0-9]\+\),\([^,]\+\),\(.*\)|\2,\1,\3|;};' \
++        -e '{:r1; {s|\([^,]\+\)\(.*\)[^_]PNR|\1\2,__PNR_\1|g;}; t r1};' \
++        -e '{s|,KV_|,SCMP_KV_|g;};' \
+          > $sys_csv_tmp
+ [[ $? -ne 0 ]] && exit 1
+ 
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-loongarch64.c
+@@ -0,0 +1,42 @@
++/**
++ * Enhanced Seccomp 64-bit LoongArch Syscall Table
++ *
++ * Copyright (c) 2021 Xiaotian Wu <wuxiaotian@loongson.cn>
++ */
++
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#include <stdlib.h>
++#include <errno.h>
++#include <linux/audit.h>
++
++#include "arch.h"
++#include "arch-loongarch64.h"
++#include "syscalls.h"
++
++ARCH_DEF(loongarch64)
++
++const struct arch_def arch_def_loongarch64 = {
++	.token = SCMP_ARCH_LOONGARCH64,
++	.token_bpf = AUDIT_ARCH_LOONGARCH64,
++	.size = ARCH_SIZE_64,
++	.endian = ARCH_ENDIAN_LITTLE,
++	.syscall_resolve_name_raw = loongarch64_syscall_resolve_name,
++	.syscall_resolve_num_raw = loongarch64_syscall_resolve_num,
++	.syscall_rewrite = NULL,
++	.rule_add = NULL,
++	.syscall_name_kver = loongarch64_syscall_name_kver,
++	.syscall_num_kver = loongarch64_syscall_num_kver,
++};
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-loongarch64.h
+@@ -0,0 +1,28 @@
++/**
++ * Enhanced Seccomp 64-bit LoongArch Syscall Table
++ *
++ * Copyright (c) 2021 Xiaotian Wu <wuxiaotian@loongson.cn>
++ */
++
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#ifndef _ARCH_LOONGARCH64_H
++#define _ARCH_LOONGARCH64_H
++
++#include "arch.h"
++
++ARCH_DECL(loongarch64)
++
++#endif
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-m68k.c
+@@ -0,0 +1,58 @@
++/**
++ * Enhanced Seccomp m68k Specific Code
++ *
++ * Copyright (c) 2015 Freescale <bogdan.purcareata@freescale.com>
++ *               2017-2023 John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
++ * Author: Bogdan Purcareata <bogdan.purcareata@freescale.com>
++ *         John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
++ *
++ * Derived from the PPC-specific code
++ *
++ */
++
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#include <stdlib.h>
++#include <errno.h>
++#include <string.h>
++#include <linux/audit.h>
++
++#include "db.h"
++#include "syscalls.h"
++#include "arch.h"
++#include "arch-m68k.h"
++
++/* m68k syscall numbers */
++#define __m68k_NR_socketcall		102
++#define __m68k_NR_ipc			117
++
++ARCH_DEF(m68k)
++
++const struct arch_def arch_def_m68k = {
++	.token = SCMP_ARCH_M68K,
++	.token_bpf = AUDIT_ARCH_M68K,
++	.size = ARCH_SIZE_32,
++	.endian = ARCH_ENDIAN_BIG,
++	.sys_socketcall = __m68k_NR_socketcall,
++	.sys_ipc = __m68k_NR_ipc,
++	.syscall_resolve_name = abi_syscall_resolve_name_munge,
++	.syscall_resolve_name_raw = m68k_syscall_resolve_name,
++	.syscall_resolve_num = abi_syscall_resolve_num_munge,
++	.syscall_resolve_num_raw = m68k_syscall_resolve_num,
++	.syscall_rewrite = abi_syscall_rewrite,
++	.rule_add = abi_rule_add,
++	.syscall_name_kver = m68k_syscall_name_kver,
++	.syscall_num_kver = m68k_syscall_num_kver,
++};
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-m68k.h
+@@ -0,0 +1,34 @@
++/**
++ * Enhanced Seccomp m68k Specific Code
++ *
++ * Copyright (c) 2015 Freescale <bogdan.purcareata@freescale.com>
++ *               2017-2023 John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
++ * Author: Bogdan Purcareata <bogdan.purcareata@freescale.com>
++ *         John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
++ *
++ * Derived from the PPC-specific code
++ *
++ */
++
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#ifndef _ARCH_M68K_H
++#define _ARCH_M68K_H
++
++#include "arch.h"
++
++ARCH_DECL(m68k)
++
++#endif
+--- libseccomp-2.5.4.orig/src/arch-mips.c
++++ libseccomp-2.5.4/src/arch-mips.c
+@@ -90,6 +90,8 @@ const struct arch_def arch_def_mips = {
+ 	.syscall_resolve_num_raw = mips_syscall_resolve_num_raw,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = mips_syscall_name_kver,
++	.syscall_num_kver = mips_syscall_num_kver,
+ };
+ 
+ const struct arch_def arch_def_mipsel = {
+@@ -105,4 +107,6 @@ const struct arch_def arch_def_mipsel =
+ 	.syscall_resolve_num_raw = mips_syscall_resolve_num_raw,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = mips_syscall_name_kver,
++	.syscall_num_kver = mips_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-mips64.c
++++ libseccomp-2.5.4/src/arch-mips64.c
+@@ -84,6 +84,8 @@ const struct arch_def arch_def_mips64 =
+ 	.syscall_resolve_num_raw = mips64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = mips64_syscall_name_kver,
++	.syscall_num_kver = mips64_syscall_num_kver,
+ };
+ 
+ const struct arch_def arch_def_mipsel64 = {
+@@ -97,4 +99,6 @@ const struct arch_def arch_def_mipsel64
+ 	.syscall_resolve_num_raw = mips64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = mips64_syscall_name_kver,
++	.syscall_num_kver = mips64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-mips64n32.c
++++ libseccomp-2.5.4/src/arch-mips64n32.c
+@@ -86,6 +86,8 @@ const struct arch_def arch_def_mips64n32
+ 	.syscall_resolve_num_raw = mips64n32_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = mips64n32_syscall_name_kver,
++	.syscall_num_kver = mips64n32_syscall_num_kver,
+ };
+ 
+ const struct arch_def arch_def_mipsel64n32 = {
+@@ -99,4 +101,6 @@ const struct arch_def arch_def_mipsel64n
+ 	.syscall_resolve_num_raw = mips64n32_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = mips64n32_syscall_name_kver,
++	.syscall_num_kver = mips64n32_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-parisc.c
++++ libseccomp-2.5.4/src/arch-parisc.c
+@@ -22,4 +22,6 @@ const struct arch_def arch_def_parisc =
+ 	.syscall_resolve_num_raw = parisc_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = parisc_syscall_name_kver,
++	.syscall_num_kver = parisc_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-parisc64.c
++++ libseccomp-2.5.4/src/arch-parisc64.c
+@@ -22,4 +22,6 @@ const struct arch_def arch_def_parisc64
+ 	.syscall_resolve_num_raw = parisc64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = parisc64_syscall_name_kver,
++	.syscall_num_kver = parisc64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-ppc.c
++++ libseccomp-2.5.4/src/arch-ppc.c
+@@ -49,4 +49,6 @@ const struct arch_def arch_def_ppc = {
+ 	.syscall_resolve_num_raw = ppc_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = ppc_syscall_name_kver,
++	.syscall_num_kver = ppc_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-ppc64.c
++++ libseccomp-2.5.4/src/arch-ppc64.c
+@@ -49,6 +49,8 @@ const struct arch_def arch_def_ppc64 = {
+ 	.syscall_resolve_num_raw = ppc64_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = ppc64_syscall_name_kver,
++	.syscall_num_kver = ppc64_syscall_num_kver,
+ };
+ 
+ const struct arch_def arch_def_ppc64le = {
+@@ -64,4 +66,6 @@ const struct arch_def arch_def_ppc64le =
+ 	.syscall_resolve_num_raw = ppc64_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = ppc64_syscall_name_kver,
++	.syscall_num_kver = ppc64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-riscv64.c
++++ libseccomp-2.5.4/src/arch-riscv64.c
+@@ -31,4 +31,6 @@ const struct arch_def arch_def_riscv64 =
+ 	.syscall_resolve_num_raw = riscv64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = riscv64_syscall_name_kver,
++	.syscall_num_kver = riscv64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-s390.c
++++ libseccomp-2.5.4/src/arch-s390.c
+@@ -32,4 +32,6 @@ const struct arch_def arch_def_s390 = {
+ 	.syscall_resolve_num_raw = s390_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = s390_syscall_name_kver,
++	.syscall_num_kver = s390_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-s390x.c
++++ libseccomp-2.5.4/src/arch-s390x.c
+@@ -32,4 +32,6 @@ const struct arch_def arch_def_s390x = {
+ 	.syscall_resolve_num_raw = s390x_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = s390x_syscall_name_kver,
++	.syscall_num_kver = s390x_syscall_num_kver,
+ };
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-sh.c
+@@ -0,0 +1,63 @@
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#include <stdlib.h>
++#include <errno.h>
++#include <string.h>
++#include <linux/audit.h>
++
++#include "db.h"
++#include "syscalls.h"
++#include "arch.h"
++#include "arch-sh.h"
++
++/* sh syscall numbers */
++#define __sh_NR_socketcall		102
++#define __sh_NR_ipc			117
++
++ARCH_DEF(sh)
++
++const struct arch_def arch_def_sheb = {
++	.token = SCMP_ARCH_SHEB,
++	.token_bpf = AUDIT_ARCH_SH,
++	.size = ARCH_SIZE_32,
++	.endian = ARCH_ENDIAN_BIG,
++	.sys_socketcall = __sh_NR_socketcall,
++	.sys_ipc = __sh_NR_ipc,
++	.syscall_resolve_name = abi_syscall_resolve_name_munge,
++	.syscall_resolve_name_raw = sh_syscall_resolve_name,
++	.syscall_resolve_num = abi_syscall_resolve_num_munge,
++	.syscall_resolve_num_raw = sh_syscall_resolve_num,
++	.syscall_rewrite = abi_syscall_rewrite,
++	.rule_add = abi_rule_add,
++	.syscall_name_kver = sh_syscall_name_kver,
++	.syscall_num_kver = sh_syscall_num_kver,
++};
++
++const struct arch_def arch_def_sh = {
++	.token = SCMP_ARCH_SH,
++	.token_bpf = AUDIT_ARCH_SHEL,
++	.size = ARCH_SIZE_32,
++	.endian = ARCH_ENDIAN_LITTLE,
++	.sys_socketcall = __sh_NR_socketcall,
++	.sys_ipc = __sh_NR_ipc,
++	.syscall_resolve_name = abi_syscall_resolve_name_munge,
++	.syscall_resolve_name_raw = sh_syscall_resolve_name,
++	.syscall_resolve_num = abi_syscall_resolve_num_munge,
++	.syscall_resolve_num_raw = sh_syscall_resolve_num,
++	.syscall_rewrite = abi_syscall_rewrite,
++	.rule_add = abi_rule_add,
++	.syscall_name_kver = sh_syscall_name_kver,
++	.syscall_num_kver = sh_syscall_num_kver,
++};
+--- /dev/null
++++ libseccomp-2.5.4/src/arch-sh.h
+@@ -0,0 +1,23 @@
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#ifndef _ARCH_SH_H
++#define _ARCH_SH_H
++
++#include "arch.h"
++
++ARCH_DECL(sheb)
++ARCH_DECL(sh)
++
++#endif
+--- libseccomp-2.5.4.orig/src/arch-syscall-check
++++ libseccomp-2.5.4/src/arch-syscall-check
+@@ -22,8 +22,11 @@
+ # along with this library; if not, see <http://www.gnu.org/licenses>.
+ #
+ 
+-SYSCALL_CSV="./syscalls.csv"
+-SYSCALL_HDR="../include/seccomp-syscalls.h"
++# Based on an idea from GNU coreutils
++abs_topsrcdir="$(unset CDPATH; cd $(dirname $0)/.. && pwd)"
++
++SYSCALL_CSV="$abs_topsrcdir/src/syscalls.csv"
++SYSCALL_HDR="$abs_topsrcdir/include/seccomp-syscalls.h"
+ 
+ function check_snr() {
+ 	(export LC_ALL=C; diff \
+--- libseccomp-2.5.4.orig/src/arch-syscall-dump.c
++++ libseccomp-2.5.4/src/arch-syscall-dump.c
+@@ -34,6 +34,8 @@
+ #include "arch-x86_64.h"
+ #include "arch-x32.h"
+ #include "arch-arm.h"
++#include "arch-loongarch64.h"
++#include "arch-m68k.h"
+ #include "arch-mips.h"
+ #include "arch-mips64.h"
+ #include "arch-mips64n32.h"
+@@ -45,6 +47,7 @@
+ #include "arch-riscv64.h"
+ #include "arch-s390.h"
+ #include "arch-s390x.h"
++#include "arch-sh.h"
+ 
+ /**
+  * Print the usage information to stderr and exit
+@@ -106,6 +109,11 @@ int main(int argc, char *argv[])
+ 		case SCMP_ARCH_AARCH64:
+ 			sys = aarch64_syscall_iterate(iter);
+ 			break;
++		case SCMP_ARCH_LOONGARCH64:
++			sys = loongarch64_syscall_iterate(iter);
++		case SCMP_ARCH_M68K:
++			sys = m68k_syscall_iterate(iter);
++			break;
+ 		case SCMP_ARCH_MIPS:
+ 		case SCMP_ARCH_MIPSEL:
+ 			sys = mips_syscall_iterate(iter);
+@@ -140,6 +148,10 @@ int main(int argc, char *argv[])
+ 		case SCMP_ARCH_S390X:
+ 			sys = s390x_syscall_iterate(iter);
+ 			break;
++		case SCMP_ARCH_SH:
++		case SCMP_ARCH_SHEB:
++			sys = sh_syscall_iterate(iter);
++			break;
+ 		default:
+ 			/* invalid arch */
+ 			exit_usage(argv[0]);
+--- libseccomp-2.5.4.orig/src/arch-syscall-validate
++++ libseccomp-2.5.4/src/arch-syscall-validate
+@@ -5,6 +5,7 @@
+ #
+ # Copyright (c) 2014 Red Hat <pmoore@redhat.com>
+ # Copyright (c) 2020 Cisco Systems, Inc. <pmoore2@cisco.com>
++# Copyright (c) 2022 Microsoft Corporation. <paulmoore@microsoft.com>
+ #
+ # Author: Paul Moore <paul@paul-moore.com>
+ #
+@@ -59,7 +60,7 @@ function verify_deps() {
+ #
+ function usage() {
+ cat << EOF
+-usage: arch-syscall-validate [-h] [-c] [-a <arch>] <kernel_directory>
++usage: arch-syscall-validate [-h] [-c <file>] [-a <arch>] <kernel_directory>
+ 
+ libseccomp syscall validation script
+ optional arguments:
+@@ -67,7 +68,7 @@ optional arguments:
+   -a             architecture
+   -l             output the library's syscall definitions
+   -s             output the kernel's syscall definitions
+-  -c             generate a CSV of the kernel's syscall definitions
++  -c <file>      generate a CSV of the kernel's syscall definitions
+ EOF
+ }
+ 
+@@ -306,6 +307,72 @@ function dump_lib_aarch64() {
+ }
+ 
+ #
++# Dump the loongarch64 syscall table
++#
++# Arguments:
++#     1    path to the kernel source
++#
++#  Dump the architecture's syscall table to stdout.
++#
++function dump_sys_loongarch64() {
++	local sed_filter=""
++
++	sed_filter+='s/__NR3264_fadvise64/223/;'
++	sed_filter+='s/__NR3264_fcntl/25/;'
++	sed_filter+='s/__NR3264_fstatfs/44/;'
++	sed_filter+='s/__NR3264_ftruncate/46/;'
++	sed_filter+='s/__NR3264_lseek/62/;'
++	sed_filter+='s/__NR3264_mmap/222/;'
++	sed_filter+='s/__NR3264_sendfile/71/;'
++	sed_filter+='s/__NR3264_statfs/43/;'
++	sed_filter+='s/__NR3264_truncate/45/;'
++
++	gcc -E -dM -I$1/include/uapi \
++		-D__BITS_PER_LONG=64 \
++		-D__ARCH_WANT_SYS_CLONE \
++		-D__ARCH_WANT_SYS_CLONE3 \
++		$1/arch/loongarch/include/uapi/asm/unistd.h | \
++		grep "^#define __NR_" | \
++		sed '/__NR_syscalls/d' | \
++		sed '/__NR_arch_specific_syscall/d' | \
++		sed 's/#define[ \t]\+__NR_\([^ \t]\+\)[ \t]\+\(.*\)/\1,\2/' | \
++		sed $sed_filter | sort
++}
++
++#
++# Dump the loongarch64 library syscall table
++#
++#  Dump the library's syscall table to stdout.
++#
++function dump_lib_loongarch64() {
++	dump_lib_arch loongarch64 | mangle_lib_syscall loongarch64
++}
++
++# Dump the m68k system syscall table
++#
++# Arguments:
++#     1    path to the kernel source
++#
++#  Dump the architecture's syscall table to stdout.
++#
++function dump_sys_m68k() {
++	cat $1/arch/m68k/kernel/syscalls/syscall.tbl | \
++		grep -v "^#" | \
++		sed -n "/[0-9]\+[ \t]\+\(common\)/p" | \
++		awk '{ print $3","$1 }' | \
++		sort
++}
++
++#
++# Dump the m68k library syscall table
++#
++#  Dump the library's syscall table to stdout.
++#
++function dump_lib_m68k() {
++	dump_lib_arch m68k | mangle_lib_syscall m68k
++}
++
++#
+ # Dump the mips system syscall table
+ #
+ # Arguments:
+@@ -568,6 +635,31 @@ function dump_lib_s390x() {
+ }
+ 
+ #
++# Dump the sh system syscall table
++#
++# Arguments:
++#     1    path to the kernel source
++#
++#  Dump the architecture's syscall table to stdout.
++#
++function dump_sys_sh() {
++	cat $1/arch/sh/kernel/syscalls/syscall.tbl | \
++		grep -v "^#" | \
++		sed -n "/[0-9]\+[ \t]\+\(common\)/p" | \
++		awk '{ print $3","$1 }' | \
++		sort
++}
++
++#
++# Dump the sh library syscall table
++#
++#  Dump the library's syscall table to stdout.
++#
++function dump_lib_sh() {
++	dump_lib_arch sh | mangle_lib_syscall sh
++}
++
++#
+ # Dump the system syscall table
+ #
+ # Arguments:
+@@ -593,6 +685,12 @@ function dump_sys() {
+ 	aarch64)
+ 		dump_sys_aarch64 "$2"
+ 		;;
++	loongarch64)
++		dump_sys_loongarch64 "$2"
++		;;
++	m68k)
++		dump_sys_m68k "$2"
++		;;
+ 	mips)
+ 		dump_sys_mips "$2"
+ 		;;
+@@ -623,6 +721,9 @@ function dump_sys() {
+ 	s390x)
+ 		dump_sys_s390x "$2"
+ 		;;
++	sh)
++		dump_sys_sh "$2"
++		;;
+ 	*)
+ 		echo ""
+ 		return 1
+@@ -657,6 +758,12 @@ function dump_lib() {
+ 	aarch64)
+ 		dump_lib_aarch64
+ 		;;
++	loongarch64)
++		dump_lib_loongarch64
++		;;
++	m68k)
++		dump_lib_m68k
++		;;
+ 	mips)
+ 		dump_lib_mips
+ 		;;
+@@ -687,6 +794,9 @@ function dump_lib() {
+ 	s390x)
+ 		dump_lib_s390x
+ 		;;
++	sh)
++		dump_lib_sh
++		;;
+ 	*)
+ 		echo ""
+ 		return 1
+@@ -702,8 +812,9 @@ function dump_lib() {
+ # Arguments:
+ #     1    path to the kernel source
+ #     2    "sys" or "lib" depending on the syscall list to use
++#     3    csv file to use as input for saved fields
+ #
+-#   Generare a syscall csv file from the given kernel sources.
++#   Generate a syscall csv file from the given kernel sources.
+ #
+ function gen_csv() {
+ 
+@@ -717,41 +828,69 @@ function gen_csv() {
+ 	abi_list=""
+ 	abi_list+=" x86 x86_64 x32"
+ 	abi_list+=" arm aarch64"
++	abi_list+=" loongarch64"
++	abi_list+=" m68k"
+ 	abi_list+=" mips mips64 mips64n32"
+ 	abi_list+=" parisc parisc64"
+ 	abi_list+=" ppc ppc64"
+ 	abi_list+=" riscv64"
+ 	abi_list+=" s390 s390x"
++	abi_list+=" sh"
++
++	# read the csv to get the existing data
++	local -A csv
++	local csv_has_kver=0
++	local csv_input="$3"
++	[[ ! -e "$3" ]] && csv_input=/dev/null
++	grep -q "KV_" "$csv_input" && csv_has_kver=1
++	while read line; do
++		sc=$(echo $line | cut -d, -f 1)
++		local field=2
++		for abi in $abi_list; do
++			csv[$sc,$abi]=$(echo $line | cut -d, -f $field)
++			((field++))
++			if [[ $csv_has_kver -eq 1 ]]; then
++				csv[$sc,${abi}_KVER]=$(echo $line | \
++						       cut -d, -f $field)
++				((field++))
++			fi
++		done
++	done < <(sed 's/#.*//;/^[ \t]*$/d' "$csv_input")
+ 
+ 	# get the full syscall list
+ 	for abi in $abi_list; do
+ 		eval output_$abi=$(mktemp -t syscall_validate_XXXXXX)
+ 		dump_$2_$abi "$1" > $(eval echo $`eval echo output_$abi`)
+ 	done
+-	sc_list=$((for abi in $abi_list; do
++	sc_list=$( (for abi in $abi_list; do
+ 			cat $(eval echo $`eval echo output_$abi`);
+-		   done) | awk -F "," '{ print $1 }' | sort -u)
++		    done) | awk -F "," '{ print $1 }' | sort -u)
+ 
+-	# output a simple header
+-	printf "#syscall (v%s %s)" \
+-		"$(kernel_version "$1")" "$(TZ=UTC date "+%Y-%m-%d")"
+-	for abi in $abi_list; do
+-		printf ",%s" $abi
+-	done
+-	printf "\n"
+-
+-	# output the syscall csv details
+-	for sc in $sc_list; do
+-		printf "%s" $sc
++	# redirect the subshell to the csv file
++	(
++		# output a simple header
++		printf "#syscall (v%s %s)" \
++			"$(kernel_version "$1")" "$(TZ=UTC date "+%Y-%m-%d")"
+ 		for abi in $abi_list; do
+-			num=$(grep "^$sc," \
+-				$(eval echo $`eval echo output_$abi`) | \
+-			      awk -F "," '{ print $2 }' )
+-			[[ -z $num ]] && num="PNR"
+-			printf ",%s" $num
++			printf ",%s,%s_kver" $abi $abi
+ 		done
+ 		printf "\n"
+-	done
++
++		# output the syscall csv details
++		for sc in $sc_list; do
++			printf "%s" $sc
++			for abi in $abi_list; do
++				num=$(grep "^$sc," \
++				      $(eval echo $`eval echo output_$abi`) | \
++				awk -F "," '{ print $2 }' )
++				kver=${csv[$sc,${abi}_KVER]}
++				[[ -z $num ]] && num="PNR"
++				[[ -z $kver ]] && kver="KV_UNDEF"
++				printf ",%s,%s" $num $kver
++			done
++			printf "\n"
++		done
++	) > "$3"
+ 
+ 	# cleanup
+ 	for abi in $abi_list; do
+@@ -767,23 +906,19 @@ verify_deps gcc
+ verify_deps grep
+ verify_deps mktemp
+ verify_deps sed
+-if [[ ! -x $LIB_SYS_DUMP ]]; then
+-	echo "error: \"$LIB_SYS_DUMP\" is not in the current working directory"
+-	exit 1
+-fi
+ 
+ opt_arches=""
+-opt_csv=0
++opt_csv=""
+ opt_sys=0
+ opt_lib=0
+ 
+-while getopts "a:cslh" opt; do
++while getopts "a:c:slh" opt; do
+ 	case $opt in
+ 	a)
+ 		opt_arches+="$OPTARG "
+ 		;;
+ 	c)
+-		opt_csv=1
++		opt_csv="$OPTARG"
+ 		;;
+ 	s)
+ 		opt_sys=1
+@@ -806,10 +941,13 @@ if [[ $opt_arches == "" ]]; then
+ 	opt_arches=" \
+ 		x86 x86_64 x32 \
+ 		arm aarch64 \
++		loongarch64 \
++		m68k \
+ 		mips mips64 mips64n32 \
+ 		parisc parisc64 \
+ 		ppc ppc64 \
+-		s390 s390x"
++		s390 s390x \
++		sh"
+ fi
+ 
+ # sanity checks
+@@ -823,16 +961,21 @@ if [[ ! -d $kernel_dir ]]; then
+ 	exit 1
+ fi
+ 
++if [[ ! -x "$LIB_SYS_DUMP" ]]; then
++	echo "error: \"$LIB_SYS_DUMP\" is not present"
++	exit 1
++fi
++
+ # generate some temp files
+ tmp_lib=$(mktemp -t syscall_validate_XXXXXX)
+ tmp_sys=$(mktemp -t syscall_validate_XXXXXX)
+ 
+-if [[ $opt_csv -eq 1 ]]; then
++if [[ -n $opt_csv ]]; then
+ 	# generate the syscall csv file
+ 	if [[ $opt_lib -eq 1 ]]; then
+-		gen_csv $kernel_dir "lib"
++		gen_csv $kernel_dir "lib" $opt_csv
+ 	else
+-		gen_csv $kernel_dir "sys"
++		gen_csv $kernel_dir "sys" $opt_csv
+ 	fi
+ else
+ 	# loop through the architectures and compare
+--- libseccomp-2.5.4.orig/src/arch-x32.c
++++ libseccomp-2.5.4/src/arch-x32.c
+@@ -83,4 +83,6 @@ const struct arch_def arch_def_x32 = {
+ 	.syscall_resolve_num_raw = x32_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = x32_syscall_name_kver,
++	.syscall_num_kver = x32_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-x86.c
++++ libseccomp-2.5.4/src/arch-x86.c
+@@ -48,4 +48,6 @@ const struct arch_def arch_def_x86 = {
+ 	.syscall_resolve_num_raw = x86_syscall_resolve_num,
+ 	.syscall_rewrite = abi_syscall_rewrite,
+ 	.rule_add = abi_rule_add,
++	.syscall_name_kver = x86_syscall_name_kver,
++	.syscall_num_kver = x86_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch-x86_64.c
++++ libseccomp-2.5.4/src/arch-x86_64.c
+@@ -38,4 +38,6 @@ const struct arch_def arch_def_x86_64 =
+ 	.syscall_resolve_num_raw = x86_64_syscall_resolve_num,
+ 	.syscall_rewrite = NULL,
+ 	.rule_add = NULL,
++	.syscall_name_kver = x86_64_syscall_name_kver,
++	.syscall_num_kver = x86_64_syscall_num_kver,
+ };
+--- libseccomp-2.5.4.orig/src/arch.c
++++ libseccomp-2.5.4/src/arch.c
+@@ -35,6 +35,8 @@
+ #include "arch-x32.h"
+ #include "arch-arm.h"
+ #include "arch-aarch64.h"
++#include "arch-loongarch64.h"
++#include "arch-m68k.h"
+ #include "arch-mips.h"
+ #include "arch-mips64.h"
+ #include "arch-mips64n32.h"
+@@ -45,6 +47,7 @@
+ #include "arch-riscv64.h"
+ #include "arch-s390.h"
+ #include "arch-s390x.h"
++#include "arch-sh.h"
+ #include "db.h"
+ #include "system.h"
+ 
+@@ -62,6 +65,10 @@ const struct arch_def *arch_def_native =
+ const struct arch_def *arch_def_native = &arch_def_arm;
+ #elif __aarch64__
+ const struct arch_def *arch_def_native = &arch_def_aarch64;
++#elif __loongarch_lp64
++const struct arch_def *arch_def_native = &arch_def_loongarch64;
++#elif __m68k__
++const struct arch_def *arch_def_native = &arch_def_m68k;
+ #elif __mips__ && _MIPS_SIM == _MIPS_SIM_ABI32
+ #if __MIPSEB__
+ const struct arch_def *arch_def_native = &arch_def_mips;
+@@ -98,6 +105,12 @@ const struct arch_def *arch_def_native =
+ const struct arch_def *arch_def_native = &arch_def_s390;
+ #elif __riscv && __riscv_xlen == 64
+ const struct arch_def *arch_def_native = &arch_def_riscv64;
++#elif __sh__
++#ifdef __BIG_ENDIAN__
++const struct arch_def *arch_def_native = &arch_def_sheb;
++#else
++const struct arch_def *arch_def_native = &arch_def_sh;
++#endif
+ #else
+ #error the arch code needs to know about your machine type
+ #endif /* machine type guess */
+@@ -116,7 +129,7 @@ int arch_valid(uint32_t arch)
+ 
+ /**
+  * Lookup the architecture definition
+- * @param token the architecure token
++ * @param token the architecture token
+  *
+  * Return the matching architecture definition, returns NULL on failure.
+  *
+@@ -134,6 +147,10 @@ const struct arch_def *arch_def_lookup(u
+ 		return &arch_def_arm;
+ 	case SCMP_ARCH_AARCH64:
+ 		return &arch_def_aarch64;
++	case SCMP_ARCH_LOONGARCH64:
++		return &arch_def_loongarch64;
++	case SCMP_ARCH_M68K:
++		return &arch_def_m68k;
+ 	case SCMP_ARCH_MIPS:
+ 		return &arch_def_mips;
+ 	case SCMP_ARCH_MIPSEL:
+@@ -162,6 +179,10 @@ const struct arch_def *arch_def_lookup(u
+ 		return &arch_def_s390x;
+ 	case SCMP_ARCH_RISCV64:
+ 		return &arch_def_riscv64;
++	case SCMP_ARCH_SHEB:
++		return &arch_def_sheb;
++	case SCMP_ARCH_SH:
++		return &arch_def_sh;
+ 	}
+ 
+ 	return NULL;
+@@ -169,7 +190,7 @@ const struct arch_def *arch_def_lookup(u
+ 
+ /**
+  * Lookup the architecture definition by name
+- * @param arch_name the architecure name
++ * @param arch_name the architecture name
+  *
+  * Return the matching architecture definition, returns NULL on failure.
+  *
+@@ -186,6 +207,10 @@ const struct arch_def *arch_def_lookup_n
+ 		return &arch_def_arm;
+ 	else if (strcmp(arch_name, "aarch64") == 0)
+ 		return &arch_def_aarch64;
++	else if (strcmp(arch_name, "loongarch64") == 0)
++		return &arch_def_loongarch64;
++	else if (strcmp(arch_name, "m68k") == 0)
++		return &arch_def_m68k;
+ 	else if (strcmp(arch_name, "mips") == 0)
+ 		return &arch_def_mips;
+ 	else if (strcmp(arch_name, "mipsel") == 0)
+@@ -214,6 +239,10 @@ const struct arch_def *arch_def_lookup_n
+ 		return &arch_def_s390x;
+ 	else if (strcmp(arch_name, "riscv64") == 0)
+ 		return &arch_def_riscv64;
++	else if (strcmp(arch_name, "sheb") == 0)
++		return &arch_def_sheb;
++	else if (strcmp(arch_name, "sh") == 0)
++		return &arch_def_sh;
+ 
+ 	return NULL;
+ }
+@@ -332,8 +361,8 @@ const char *arch_syscall_resolve_num(con
+  * @param arch the architecture definition
+  * @param syscall the syscall number
+  *
+- * Translate the syscall number, in the context of the native architecure, to
+- * the provided architecure.  Returns zero on success, negative values on
++ * Translate the syscall number, in the context of the native architecture, to
++ * the provided architecture.  Returns zero on success, negative values on
+  * failure.
+  *
+  */
+--- libseccomp-2.5.4.orig/src/arch.h
++++ libseccomp-2.5.4/src/arch.h
+@@ -2,6 +2,8 @@
+  * Enhanced Seccomp Architecture/Machine Specific Code
+  *
+  * Copyright (c) 2012 Red Hat <pmoore@redhat.com>
++ * Copyright (c) 2022 Microsoft Corporation. <paulmoore@microsoft.com>
++ *
+  * Author: Paul Moore <paul@paul-moore.com>
+  */
+ 
+@@ -62,6 +64,8 @@ struct arch_def {
+ 	const char *(*syscall_resolve_num_raw)(int num);
+ 	int (*syscall_rewrite)(const struct arch_def *arch, int *syscall);
+ 	int (*rule_add)(struct db_filter *db, struct db_api_rule_list *rule);
++	enum scmp_kver (*syscall_name_kver)(const char *name);
++	enum scmp_kver (*syscall_num_kver)(int num);
+ };
+ 
+ /* arch_def for the current architecture */
+@@ -72,21 +76,34 @@ extern const struct arch_def *arch_def_n
+ 	extern const struct arch_def arch_def_##NAME; \
+ 	int NAME##_syscall_resolve_name(const char *name); \
+ 	const char *NAME##_syscall_resolve_num(int num); \
++	enum scmp_kver NAME##_syscall_name_kver(const char *name); \
++	enum scmp_kver NAME##_syscall_num_kver(int num); \
+ 	const struct arch_syscall_def *NAME##_syscall_iterate(unsigned int spot);
+ 
+ /* macro to define the arch specific structures and functions */
+ #define ARCH_DEF(NAME) \
+ 	int NAME##_syscall_resolve_name(const char *name) \
+ 	{ \
+-		return syscall_resolve_name(name, OFFSET_ARCH(NAME)); \
++		return syscall_resolve_name(name, SYSTBL_OFFSET(NAME)); \
+ 	} \
+ 	const char *NAME##_syscall_resolve_num(int num) \
+ 	{ \
+-		return syscall_resolve_num(num, OFFSET_ARCH(NAME)); \
++		return syscall_resolve_num(num, SYSTBL_OFFSET(NAME)); \
++	} \
++	enum scmp_kver NAME##_syscall_name_kver(const char *name) \
++	{ \
++		return syscall_resolve_name_kver(name, \
++						 SYSTBL_OFFSET(NAME##_kver)); \
++	} \
++	enum scmp_kver NAME##_syscall_num_kver(int num) \
++	{ \
++		return syscall_resolve_num_kver(num, \
++						SYSTBL_OFFSET(NAME), \
++						SYSTBL_OFFSET(NAME##_kver)); \
+ 	} \
+ 	const struct arch_syscall_def *NAME##_syscall_iterate(unsigned int spot) \
+ 	{ \
+-		return syscall_iterate(spot, OFFSET_ARCH(NAME)); \
++		return syscall_iterate(spot, SYSTBL_OFFSET(NAME)); \
+ 	}
+ 
+ /* syscall name/num mapping */
+--- libseccomp-2.5.4.orig/src/db.c
++++ libseccomp-2.5.4/src/db.c
+@@ -3,6 +3,7 @@
+  *
+  * Copyright (c) 2012,2016,2018 Red Hat <pmoore@redhat.com>
+  * Copyright (c) 2019 Cisco Systems, Inc. <pmoore2@cisco.com>
++ * Copyright (c) 2022 Microsoft Corporation <paulmoore@microsoft.com>
+  * Author: Paul Moore <paul@paul-moore.com>
+  */
+ 
+@@ -654,7 +655,7 @@ prune_next_node:
+ 		x_iter = x_iter_next;
+ 	} while (x_iter);
+ 
+-	// if we are falling through, we clearly didn't match on anything
++	/* if we are falling through, we clearly didn't match on anything */
+ 	state_new.flags &= ~_DB_IST_MATCH;
+ 
+ prune_return:
+@@ -1058,7 +1059,7 @@ int db_col_reset(struct db_filter_col *c
+ 		free(col->filters);
+ 	col->filters = NULL;
+ 
+-	/* set the endianess to undefined */
++	/* set the endianness to undefined */
+ 	col->endian = 0;
+ 
+ 	/* set the default attribute values */
+@@ -1071,6 +1072,7 @@ int db_col_reset(struct db_filter_col *c
+ 	col->attr.spec_allow = 0;
+ 	col->attr.optimize = 1;
+ 	col->attr.api_sysrawrc = 0;
++	col->attr.wait_killable_recv = 0;
+ 
+ 	/* set the state */
+ 	col->state = _DB_STA_VALID;
+@@ -1098,6 +1100,9 @@ int db_col_reset(struct db_filter_col *c
+ 		free(snap);
+ 	}
+ 
++	/* reset the precomputed programs */
++	db_col_precompute_reset(col);
++
+ 	return 0;
+ }
+ 
+@@ -1118,14 +1123,12 @@ struct db_filter_col *db_col_init(uint32
+ 		return NULL;
+ 
+ 	/* reset the DB to a known state */
+-	if (db_col_reset(col, def_action) < 0)
+-		goto init_failure;
++	if (db_col_reset(col, def_action) < 0) {
++		db_col_release(col);
++		return NULL;
++	}
+ 
+ 	return col;
+-
+-init_failure:
+-	db_col_release(col);
+-	return NULL;
+ }
+ 
+ /**
+@@ -1162,6 +1165,9 @@ void db_col_release(struct db_filter_col
+ 		free(col->filters);
+ 	col->filters = NULL;
+ 
++	/* free any precompute */
++	db_col_precompute_reset(col);
++
+ 	/* free the collection */
+ 	free(col);
+ }
+@@ -1222,7 +1228,7 @@ int db_col_merge(struct db_filter_col *c
+ 	unsigned int iter_a, iter_b;
+ 	struct db_filter **dbs;
+ 
+-	/* verify that the endianess is a match */
++	/* verify that the endianness is a match */
+ 	if (col_dst->endian != col_src->endian)
+ 		return -EDOM;
+ 
+@@ -1250,6 +1256,9 @@ int db_col_merge(struct db_filter_col *c
+ 		col_dst->filter_cnt++;
+ 	}
+ 
++	/* reset the precompute */
++	db_col_precompute_reset(col_dst);
++
+ 	/* free the source */
+ 	col_src->filter_cnt = 0;
+ 	db_col_release(col_src);
+@@ -1321,6 +1330,9 @@ int db_col_attr_get(const struct db_filt
+ 	case SCMP_FLTATR_API_SYSRAWRC:
+ 		*value = col->attr.api_sysrawrc;
+ 		break;
++	case SCMP_FLTATR_CTL_WAITKILL:
++		*value = col->attr.wait_killable_recv;
++		break;
+ 	default:
+ 		rc = -EINVAL;
+ 		break;
+@@ -1373,6 +1385,7 @@ int db_col_attr_set(struct db_filter_col
+ 			col->attr.act_badarch = value;
+ 		else
+ 			return -EINVAL;
++		db_col_precompute_reset(col);
+ 		break;
+ 	case SCMP_FLTATR_CTL_NNP:
+ 		col->attr.nnp_enable = (value ? 1 : 0);
+@@ -1394,6 +1407,7 @@ int db_col_attr_set(struct db_filter_col
+ 		break;
+ 	case SCMP_FLTATR_API_TSKIP:
+ 		col->attr.api_tskip = (value ? 1 : 0);
++		db_col_precompute_reset(col);
+ 		break;
+ 	case SCMP_FLTATR_CTL_LOG:
+ 		rc = sys_chk_seccomp_flag(SECCOMP_FILTER_FLAG_LOG);
+@@ -1427,10 +1441,14 @@ int db_col_attr_set(struct db_filter_col
+ 			rc = -EOPNOTSUPP;
+ 			break;
+ 		}
++		db_col_precompute_reset(col);
+ 		break;
+ 	case SCMP_FLTATR_API_SYSRAWRC:
+ 		col->attr.api_sysrawrc = (value ? 1 : 0);
+ 		break;
++	case SCMP_FLTATR_CTL_WAITKILL:
++		col->attr.wait_killable_recv = (value ? 1 : 0);
++		break;
+ 	default:
+ 		rc = -EINVAL;
+ 		break;
+@@ -1460,6 +1478,8 @@ int db_col_db_new(struct db_filter_col *
+ 	rc = db_col_db_add(col, db);
+ 	if (rc < 0)
+ 		_db_release(db);
++	else
++		db_col_precompute_reset(col);
+ 
+ 	return rc;
+ }
+@@ -1540,6 +1560,8 @@ int db_col_db_remove(struct db_filter_co
+ 		col->endian = 0;
+ 	}
+ 
++	db_col_precompute_reset(col);
++
+ 	return 0;
+ }
+ 
+@@ -2233,6 +2255,9 @@ priority_failure:
+ 			rc = rc_tmp;
+ 	}
+ 
++	if (rc == 0)
++		db_col_precompute_reset(col);
++
+ 	return rc;
+ }
+ 
+@@ -2377,8 +2402,11 @@ add_arch_fail:
+ 
+ add_return:
+ 	/* update the misc state */
+-	if (rc == 0 && action == SCMP_ACT_NOTIFY)
+-		col->notify_used = true;
++	if (rc == 0) {
++		if (action == SCMP_ACT_NOTIFY)
++			col->notify_used = true;
++		db_col_precompute_reset(col);
++	}
+ 	if (chain != NULL)
+ 		free(chain);
+ 	return rc;
+@@ -2501,6 +2529,9 @@ void db_col_transaction_abort(struct db_
+ 	for (iter = 0; iter < filter_cnt; iter++)
+ 		_db_release(filters[iter]);
+ 	free(filters);
++
++	/* free any precompute */
++	db_col_precompute_reset(col);
+ }
+ 
+ /**
+@@ -2618,3 +2649,33 @@ shadow_err:
+ 	_db_snap_release(snap);
+ 	return;
+ }
++
++/**
++ * Precompute the seccomp filters
++ * @param col the filter collection
++ *
++ * This function precomputes the seccomp filters before they are needed,
++ * returns zero on success, negative values on error.
++ *
++ */
++int db_col_precompute(struct db_filter_col *col)
++{
++	if (!col->prgm_bpf)
++		return gen_bpf_generate(col, &col->prgm_bpf);
++	return 0;
++}
++
++/**
++ * Free any precomputed filter programs
++ * @param col the filter collection
++ *
++ * This function releases any precomputed filter programs.
++ */
++void db_col_precompute_reset(struct db_filter_col *col)
++{
++	if (!col->prgm_bpf)
++		return;
++
++	gen_bpf_release(col->prgm_bpf);
++	col->prgm_bpf = NULL;
++}
+--- libseccomp-2.5.4.orig/src/db.h
++++ libseccomp-2.5.4/src/db.h
+@@ -2,6 +2,7 @@
+  * Enhanced Seccomp Filter DB
+  *
+  * Copyright (c) 2012,2016 Red Hat <pmoore@redhat.com>
++ * Copyright (c) 2022 Microsoft Corporation <paulmoore@microsoft.com>
+  * Author: Paul Moore <paul@paul-moore.com>
+  */
+ 
+@@ -28,6 +29,7 @@
+ #include <seccomp.h>
+ 
+ #include "arch.h"
++#include "gen_bpf.h"
+ 
+ /* XXX - need to provide doxygen comments for the types here */
+ 
+@@ -122,6 +124,8 @@ struct db_filter_attr {
+ 	uint32_t optimize;
+ 	/* return the raw system return codes */
+ 	uint32_t api_sysrawrc;
++	/* request SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV */
++	uint32_t wait_killable_recv;
+ };
+ 
+ struct db_filter {
+@@ -162,6 +166,9 @@ struct db_filter_col {
+ 
+ 	/* userspace notification */
+ 	bool notify_used;
++
++	/* precomputed programs */
++	struct bpf_program *prgm_bpf;
+ };
+ 
+ /**
+@@ -212,6 +219,9 @@ int db_col_transaction_start(struct db_f
+ void db_col_transaction_abort(struct db_filter_col *col);
+ void db_col_transaction_commit(struct db_filter_col *col);
+ 
++int db_col_precompute(struct db_filter_col *col);
++void db_col_precompute_reset(struct db_filter_col *col);
++
+ int db_rule_add(struct db_filter *db, const struct db_api_rule_list *rule);
+ 
+ #endif
+--- libseccomp-2.5.4.orig/src/gen_bpf.c
++++ libseccomp-2.5.4/src/gen_bpf.c
+@@ -205,11 +205,11 @@ static struct bpf_blk *_hsh_remove(struc
+ static struct bpf_blk *_hsh_find(const struct bpf_state *state, uint64_t h_val);
+ 
+ /**
+- * Convert a 16-bit host integer into the target's endianess
++ * Convert a 16-bit host integer into the target's endianness
+  * @param arch the architecture definition
+  * @param val the 16-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ static uint16_t _htot16(const struct arch_def *arch, uint16_t val)
+@@ -221,11 +221,11 @@ static uint16_t _htot16(const struct arc
+ }
+ 
+ /**
+- * Convert a 32-bit host integer into the target's endianess
++ * Convert a 32-bit host integer into the target's endianness
+  * @param arch the architecture definition
+  * @param val the 32-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ static uint32_t _htot32(const struct arch_def *arch, uint32_t val)
+@@ -351,6 +351,7 @@ static struct bpf_blk *_blk_resize(struc
+ {
+ 	unsigned int size_adj = (AINC_BLK > size_add ? AINC_BLK : size_add);
+ 	struct bpf_instr *new;
++	size_t old_size, new_size;
+ 
+ 	if (blk == NULL)
+ 		return NULL;
+@@ -358,8 +359,10 @@ static struct bpf_blk *_blk_resize(struc
+ 	if ((blk->blk_cnt + size_adj) <= blk->blk_alloc)
+ 		return blk;
+ 
++	old_size = blk->blk_alloc * sizeof(*new);
+ 	blk->blk_alloc += size_adj;
+-	new = realloc(blk->blks, blk->blk_alloc * sizeof(*(blk->blks)));
++	new_size = blk->blk_alloc * sizeof(*new);
++	new = zrealloc(blk->blks, old_size, new_size);
+ 	if (new == NULL) {
+ 		_blk_free(state, blk);
+ 		return NULL;
+@@ -443,10 +446,13 @@ static int _bpf_append_blk(struct bpf_pr
+ 	bpf_instr_raw *i_iter;
+ 	unsigned int old_cnt = prg->blk_cnt;
+ 	unsigned int iter;
++	size_t old_size, new_size;
+ 
+ 	/* (re)allocate the program memory */
++	old_size = BPF_PGM_SIZE(prg);
+ 	prg->blk_cnt += blk->blk_cnt;
+-	i_new = realloc(prg->blks, BPF_PGM_SIZE(prg));
++	new_size = BPF_PGM_SIZE(prg);
++	i_new = zrealloc(prg->blks, old_size, new_size);
+ 	if (i_new == NULL) {
+ 		rc = -ENOMEM;
+ 		goto bpf_append_blk_failure;
+@@ -1303,7 +1309,7 @@ static inline bool _skip_syscall(struct
+ 	if (!syscall->valid)
+ 		return true;
+ 
+-	/* psuedo-syscalls should not be added to the filter unless explicity
++	/* pseudo-syscalls should not be added to the filter unless explicitly
+ 	 * requested via SCMP_FLTATR_API_TSKIP
+ 	 */
+ 	if (((int)syscall->num < 0) &&
+@@ -1665,7 +1671,7 @@ out:
+  * @param db_secondary the secondary DB
+  *
+  * Generate the BPF instruction block for the given filter DB(s)/architecture(s)
+- * and return a pointer to the block on succes, NULL on failure.  The resulting
++ * and return a pointer to the block on success, NULL on failure.  The resulting
+  * block assumes that the architecture token has already been loaded into the
+  * BPF accumulator.
+  *
+@@ -2084,15 +2090,19 @@ static int _gen_bpf_build_bpf(struct bpf
+ 			if (i_iter->jt.type == TGT_NXT) {
+ 				b_jmp = _gen_bpf_find_nxt(b_iter,
+ 							  i_iter->jt.tgt.nxt);
+-				if (b_jmp == NULL)
+-					return -EFAULT;
++				if (b_jmp == NULL) {
++					rc = -EFAULT;
++					goto state_reset;
++				}
+ 				i_iter->jt = _BPF_JMP_HSH(b_jmp->hash);
+ 			}
+ 			if (i_iter->jf.type == TGT_NXT) {
+ 				b_jmp = _gen_bpf_find_nxt(b_iter,
+ 							  i_iter->jf.tgt.nxt);
+-				if (b_jmp == NULL)
+-					return -EFAULT;
++				if (b_jmp == NULL) {
++					rc = -EFAULT;
++					goto state_reset;
++				}
+ 				i_iter->jf = _BPF_JMP_HSH(b_jmp->hash);
+ 			}
+ 			/* we shouldn't need to worry about a TGT_NXT in k */
+@@ -2134,8 +2144,10 @@ static int _gen_bpf_build_bpf(struct bpf
+ 						b_jmp = _blk_prepend(state,
+ 								     b_jmp,
+ 								     &instr);
+-						if (b_jmp == NULL)
+-							return -EFAULT;
++						if (b_jmp == NULL) {
++							rc = -EFAULT;
++							goto state_reset;
++						}
+ 					}
+ 					_BPF_INSTR(instr,
+ 						   _BPF_OP(state->arch,
+@@ -2145,8 +2157,10 @@ static int _gen_bpf_build_bpf(struct bpf
+ 							  b_jmp->acc_start.offset));
+ 					b_jmp = _blk_prepend(state,
+ 							     b_jmp, &instr);
+-					if (b_jmp == NULL)
+-						return -EFAULT;
++					if (b_jmp == NULL) {
++						rc = -EFAULT;
++						goto state_reset;
++					}
+ 					/* not reliant on the accumulator */
+ 					b_jmp->acc_start = _ACC_STATE_UNDEF;
+ 				}
+@@ -2282,6 +2296,7 @@ static int _gen_bpf_build_bpf(struct bpf
+ 		_blk_free(state, b_iter);
+ 	} while (b_head != NULL);
+ 
++	state->arch = NULL;
+ 	return 0;
+ 
+ build_bpf_free_blks:
+@@ -2292,6 +2307,8 @@ build_bpf_free_blks:
+ 		__blk_free(state, b_iter);
+ 		b_iter = b_jmp;
+ 	}
++state_reset:
++	state->arch = NULL;
+ 	return rc;
+ }
+ 
+--- libseccomp-2.5.4.orig/src/gen_pfc.c
++++ libseccomp-2.5.4/src/gen_pfc.c
+@@ -61,6 +61,10 @@ static const char *_pfc_arch(const struc
+ 		return "arm";
+ 	case SCMP_ARCH_AARCH64:
+ 		return "aarch64";
++	case SCMP_ARCH_LOONGARCH64:
++		return "loongarch64";
++	case SCMP_ARCH_M68K:
++		return "m68k";
+ 	case SCMP_ARCH_MIPS:
+ 		return "mips";
+ 	case SCMP_ARCH_MIPSEL:
+@@ -89,6 +93,10 @@ static const char *_pfc_arch(const struc
+ 		return "s390";
+ 	case SCMP_ARCH_RISCV64:
+ 		return "riscv64";
++	case SCMP_ARCH_SHEB:
++		return "sheb";
++	case SCMP_ARCH_SH:
++		return "sh";
+ 	default:
+ 		return "UNKNOWN";
+ 	}
+@@ -238,7 +246,7 @@ static void _gen_pfc_chain(const struct
+  * @param sys the syscall filter
+  * @param fds the file stream to send the output
+  *
+- * This function generates a pseduo filter code representation of the given
++ * This function generates a pseudo filter code representation of the given
+  * syscall filter and writes it to the given output stream.
+  *
+  */
+--- libseccomp-2.5.4.orig/src/helper.c
++++ libseccomp-2.5.4/src/helper.c
+@@ -34,16 +34,34 @@
+  */
+ void *zmalloc(size_t size)
+ {
+-	void *ptr;
++	/* NOTE: unlike malloc() zero size allocations always return NULL */
++	if (size == 0)
++		return NULL;
++
++	return calloc(1, size);
++}
+ 
++/**
++ * Change the size of an allocated buffer
++ * @param ptr pointer to the allocated buffer.  If NULL it is equivalent to zmalloc.
++ * @param old_size the current size of the allocated buffer
++ * @param size the new size of the buffer
++ *
++ * This function changes the size of an allocated memory buffer and return a pointer
++ * to the buffer on success, the new buffer portion is initialized to zero.  NULL is
++ * returned on failure.  The returned buffer could be different than the specified
++ * ptr param.
++ *
++ */
++void *zrealloc(void *ptr, size_t old_size, size_t size)
++{
+ 	/* NOTE: unlike malloc() zero size allocations always return NULL */
+ 	if (size == 0)
+ 		return NULL;
+ 
+-	ptr = malloc(size);
++	ptr = realloc(ptr, size);
+ 	if (!ptr)
+ 		return NULL;
+-	memset(ptr, 0, size);
+-
++	memset(ptr + old_size, 0, size - old_size);
+ 	return ptr;
+ }
+--- libseccomp-2.5.4.orig/src/helper.h
++++ libseccomp-2.5.4/src/helper.h
+@@ -23,5 +23,6 @@
+ #define _FILTER_HELPER_H
+ 
+ void *zmalloc(size_t size);
++void *zrealloc(void *ptr, size_t old_size, size_t size);
+ 
+ #endif
+--- libseccomp-2.5.4.orig/src/python/Makefile.am
++++ libseccomp-2.5.4/src/python/Makefile.am
+@@ -36,7 +36,7 @@ EXTRA_DIST = libseccomp.pxd seccomp.pyx
+ all-local: build
+ 
+ build: ../libseccomp.la libseccomp.pxd seccomp.pyx setup.py
+-	[ ${srcdir} == ${builddir} ] || cp ${srcdir}/seccomp.pyx ${builddir}
++	[ ${srcdir} = ${builddir} ] || cp ${srcdir}/seccomp.pyx ${builddir}
+ 	${PY_BUILD} && touch build
+ 
+ install-exec-local: build
+@@ -48,5 +48,5 @@ uninstall-local:
+ 	${RM} -f ${DESTDIR}/${pyexecdir}/install_files.txt
+ 
+ clean-local:
+-	[ ${srcdir} == ${builddir} ] || ${RM} -f ${builddir}/seccomp.pyx
++	[ ${srcdir} = ${builddir} ] || ${RM} -f ${builddir}/seccomp.pyx
+ 	${RM} -rf seccomp.c build
+--- libseccomp-2.5.4.orig/src/python/libseccomp.pxd
++++ libseccomp-2.5.4/src/python/libseccomp.pxd
+@@ -38,6 +38,8 @@ cdef extern from "seccomp.h":
+         SCMP_ARCH_X32
+         SCMP_ARCH_ARM
+         SCMP_ARCH_AARCH64
++        SCMP_ARCH_LOONGARCH64
++        SCMP_ARCH_M68K
+         SCMP_ARCH_MIPS
+         SCMP_ARCH_MIPS64
+         SCMP_ARCH_MIPS64N32
+@@ -63,6 +65,7 @@ cdef extern from "seccomp.h":
+         SCMP_FLTATR_CTL_SSB
+         SCMP_FLTATR_CTL_OPTIMIZE
+         SCMP_FLTATR_API_SYSRAWRC
++        SCMP_FLTATR_CTL_WAITKILL
+ 
+     cdef enum scmp_compare:
+         SCMP_CMP_NE
+@@ -167,6 +170,10 @@ cdef extern from "seccomp.h":
+ 
+     int seccomp_export_pfc(scmp_filter_ctx ctx, int fd)
+     int seccomp_export_bpf(scmp_filter_ctx ctx, int fd)
++    int seccomp_export_bpf_mem(const scmp_filter_ctx ctx, void *buf,
++                               size_t *len)
++
++    int seccomp_precompute(const scmp_filter_ctx ctx)
+ 
+ # kate: syntax python;
+ # kate: indent-mode python; space-indent on; indent-width 4; mixedindent off;
+--- libseccomp-2.5.4.orig/src/python/seccomp.pyx
++++ libseccomp-2.5.4/src/python/seccomp.pyx
+@@ -80,10 +80,12 @@ Example:
+ __author__ =  'Paul Moore <paul@paul-moore.com>'
+ __date__ = "3 February 2017"
+ 
++from cpython cimport array
+ from cpython.version cimport PY_MAJOR_VERSION
+ from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
+ from libc.stdint cimport uint8_t, uint16_t, uint32_t, uint64_t
+ from libc.stdlib cimport free
++import array
+ import errno
+ 
+ cimport libseccomp
+@@ -204,6 +206,8 @@ cdef class Arch:
+     X32 - 64-bit x86 using the x32 ABI
+     ARM - ARM
+     AARCH64 - 64-bit ARM
++    LOONGARCH64 - 64-bit LoongArch
++    M68K - 32-bit Motorola 68000
+     MIPS - MIPS O32 ABI
+     MIPS64 - MIPS 64-bit ABI
+     MIPS64N32 - MIPS N32 ABI
+@@ -225,6 +229,8 @@ cdef class Arch:
+     X32 = libseccomp.SCMP_ARCH_X32
+     ARM = libseccomp.SCMP_ARCH_ARM
+     AARCH64 = libseccomp.SCMP_ARCH_AARCH64
++    LOONGARCH64 = libseccomp.SCMP_ARCH_LOONGARCH64
++    M68K = libseccomp.SCMP_ARCH_M68K
+     MIPS = libseccomp.SCMP_ARCH_MIPS
+     MIPS64 = libseccomp.SCMP_ARCH_MIPS64
+     MIPS64N32 = libseccomp.SCMP_ARCH_MIPS64N32
+@@ -262,6 +268,10 @@ cdef class Arch:
+                 self._token = libseccomp.SCMP_ARCH_ARM
+             elif arch == libseccomp.SCMP_ARCH_AARCH64:
+                 self._token = libseccomp.SCMP_ARCH_AARCH64
++            elif arch == libseccomp.SCMP_ARCH_LOONGARCH64:
++                self._token = libseccomp.SCMP_ARCH_LOONGARCH64
++            elif arch == libseccomp.SCMP_ARCH_M68K:
++                self._token = libseccomp.SCMP_ARCH_M68K
+             elif arch == libseccomp.SCMP_ARCH_MIPS:
+                 self._token = libseccomp.SCMP_ARCH_MIPS
+             elif arch == libseccomp.SCMP_ARCH_MIPS64:
+@@ -323,6 +333,7 @@ cdef class Attr:
+                    1: rules weighted by priority and complexity (DEFAULT)
+                    2: binary tree sorted by syscall number
+     API_SYSRAWRC - return the raw syscall codes
++    CTL_WAITKILL - request wait killable semantics
+     """
+     ACT_DEFAULT = libseccomp.SCMP_FLTATR_ACT_DEFAULT
+     ACT_BADARCH = libseccomp.SCMP_FLTATR_ACT_BADARCH
+@@ -333,6 +344,7 @@ cdef class Attr:
+     CTL_SSB = libseccomp.SCMP_FLTATR_CTL_SSB
+     CTL_OPTIMIZE = libseccomp.SCMP_FLTATR_CTL_OPTIMIZE
+     API_SYSRAWRC = libseccomp.SCMP_FLTATR_API_SYSRAWRC
++    CTL_WAITKILL = libseccomp.SCMP_FLTATR_CTL_WAITKILL
+ 
+ cdef class Arg:
+     """ Python object representing a SyscallFilter syscall argument.
+@@ -621,7 +633,7 @@ cdef class SyscallFilter:
+         Resets the seccomp filter state to an initial default state, if a
+         default filter action is not specified in the reset call the
+         original action will be reused.  This function does not affect any
+-        seccomp filters alread loaded into the kernel.
++        seccomp filters already loaded into the kernel.
+         """
+         if defaction == -1:
+             defaction = self._defaction
+@@ -798,7 +810,7 @@ cdef class SyscallFilter:
+ 
+         In the case where the specific rule is not valid on a specific
+         architecture, e.g. socket() on 32-bit x86, this method rewrites
+-        the rule to the best possible match.  If you don't want this fule
++        the rule to the best possible match.  If you don't want this rule
+         rewriting to take place use add_rule_exactly().
+         """
+         cdef libseccomp.scmp_arg_cmp c_arg[6]
+@@ -1044,5 +1056,40 @@ cdef class SyscallFilter:
+         if rc != 0:
+             raise RuntimeError(str.format("Library error (errno = {0})", rc))
+ 
++    def export_bpf_mem(self):
++        """ Export the filter in BPF format.
++
++        Description:
++        Return the filter in Berkeley Packet Filter (BPF) as bytes.
++        The output is identical to what is loaded into the Linux Kernel.
++        """
++        cdef size_t len = 0
++
++        # Figure out how big the program is.
++        rc = libseccomp.seccomp_export_bpf_mem(self._ctx, NULL, <size_t *>&len)
++        if rc != 0:
++            raise RuntimeError(str.format("Library error (errno = {0})", rc))
++
++        # Get the program.
++        cdef array.array data = array.array('B', bytes(len))
++        cdef unsigned char[:] program = data
++        rc = libseccomp.seccomp_export_bpf_mem(self._ctx, <void *>&program[0],
++                                               <size_t *>&len)
++        if rc != 0:
++            raise RuntimeError(str.format("Library error (errno = {0})", rc))
++        return program
++
++    def precompute(self):
++        """ Precompute the seccomp filter.
++
++        Description:
++        Precompute the seccomp filter and store it internally for future use,
++        speeding up filter loads and other functions which require the
++        generated filter.
++        """
++        rc = libseccomp.seccomp_precompute(self._ctx)
++        if rc != 0:
++            raise RuntimeError(str.format("Library error (errno = {0})", rc))
++
+ # kate: syntax python;
+ # kate: indent-mode python; space-indent on; indent-width 4; mixedindent off;
+--- libseccomp-2.5.4.orig/src/python/setup.py
++++ libseccomp-2.5.4/src/python/setup.py
+@@ -23,9 +23,9 @@
+ 
+ import os
+ 
+-from distutils.core import setup
+-from distutils.extension import Extension
+-from Cython.Distutils import build_ext
++from setuptools import setup
++from setuptools.extension import Extension
++from Cython.Build import cythonize
+ 
+ setup(
+ 	name = "seccomp",
+@@ -37,12 +37,9 @@ setup(
+ 	maintainer_email = "paul@paul-moore.com",
+ 	license = "LGPLv2.1",
+ 	platforms = "Linux",
+-	cmdclass = {'build_ext': build_ext},
+-	ext_modules = [
++	ext_modules = cythonize([
+ 		Extension("seccomp", ["seccomp.pyx"],
+ 			# unable to handle libtool libraries directly
+-			extra_objects=["../.libs/libseccomp.a"],
+-			# fix build warnings, see PEP 3123
+-			extra_compile_args=["-fno-strict-aliasing"])
+-	]
++			extra_objects=["../.libs/libseccomp.a"]),
++	])
+ )
+--- libseccomp-2.5.4.orig/src/syscalls.c
++++ libseccomp-2.5.4/src/syscalls.c
+@@ -146,7 +146,7 @@ static bool _abi_syscall_socket_test(con
+ {
+ 	const char *name;
+ 
+-	/* multiplexed pseduo-syscalls */
++	/* multiplexed pseudo-syscalls */
+ 	if (sys <= -100 && sys >= -120)
+ 		return true;
+ 
+@@ -193,7 +193,7 @@ static bool _abi_syscall_ipc_test(const
+ {
+ 	const char *name;
+ 
+-	/* multiplexed pseduo-syscalls */
++	/* multiplexed pseudo-syscalls */
+ 	if (sys <= -200 && sys >= -224)
+ 		return true;
+ 
+@@ -289,7 +289,7 @@ case __PNR_##NAME: \
+  * @param arch the arch definition
+  * @param syscall the direct syscall
+  *
+- * Return the related multiplexed pseduo syscall number, __NR_SCMP_UNDEF is
++ * Return the related multiplexed pseudo syscall number, __NR_SCMP_UNDEF is
+  * there is no related pseudo syscall, or __NR_SCMP_ERROR otherwise.
+  *
+  */
+--- libseccomp-2.5.4.orig/src/syscalls.csv
++++ libseccomp-2.5.4/src/syscalls.csv
+@@ -1,482 +1,485 @@
+-#syscall (v5.17.0 2022-04-05),x86,x86_64,x32,arm,aarch64,mips,mips64,mips64n32,parisc,parisc64,ppc,ppc64,riscv64,s390,s390x
+-accept,PNR,43,43,285,202,168,42,42,35,35,330,330,202,PNR,PNR
+-accept4,364,288,288,366,242,334,293,297,320,320,344,344,242,364,364
+-access,33,21,21,33,PNR,33,20,20,33,33,33,33,PNR,33,33
+-acct,51,163,163,51,89,51,158,158,51,51,51,51,89,51,51
+-add_key,286,248,248,309,217,280,239,243,264,264,269,269,217,278,278
+-adjtimex,124,159,159,124,171,124,154,154,124,124,124,124,171,124,124
+-afs_syscall,137,183,183,PNR,PNR,137,176,176,PNR,PNR,137,137,PNR,137,137
+-alarm,27,37,37,PNR,PNR,27,37,37,27,27,27,27,PNR,27,27
+-arch_prctl,384,158,158,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-arm_fadvise64_64,PNR,PNR,PNR,270,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-arm_sync_file_range,PNR,PNR,PNR,341,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-bdflush,134,PNR,PNR,134,PNR,134,PNR,PNR,134,134,134,134,PNR,134,134
+-bind,361,49,49,282,200,169,48,48,22,22,327,327,200,361,361
+-bpf,357,321,321,386,280,355,315,319,341,341,361,361,280,351,351
+-break,17,PNR,PNR,PNR,PNR,17,PNR,PNR,PNR,PNR,17,17,PNR,PNR,PNR
+-breakpoint,PNR,PNR,PNR,983041,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-brk,45,12,12,45,214,45,12,12,45,45,45,45,214,45,45
+-cachectl,PNR,PNR,PNR,PNR,PNR,148,198,198,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-cacheflush,PNR,PNR,PNR,983042,PNR,147,197,197,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-capget,184,125,125,184,90,204,123,123,106,106,183,183,90,184,184
+-capset,185,126,126,185,91,205,124,124,107,107,184,184,91,185,185
+-chdir,12,80,80,12,49,12,78,78,12,12,12,12,49,12,12
+-chmod,15,90,90,15,PNR,15,88,88,15,15,15,15,PNR,15,15
+-chown,182,92,92,182,PNR,202,90,90,180,180,181,181,PNR,182,212
+-chown32,212,PNR,PNR,212,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,212,PNR
+-chroot,61,161,161,61,51,61,156,156,61,61,61,61,51,61,61
+-clock_adjtime,343,305,305,372,266,341,300,305,324,324,347,347,266,337,337
+-clock_adjtime64,405,PNR,PNR,405,PNR,405,PNR,405,405,PNR,405,PNR,PNR,405,PNR
+-clock_getres,266,229,229,264,114,264,223,227,257,257,247,247,114,261,261
+-clock_getres_time64,406,PNR,PNR,406,PNR,406,PNR,406,406,PNR,406,PNR,PNR,406,PNR
+-clock_gettime,265,228,228,263,113,263,222,226,256,256,246,246,113,260,260
+-clock_gettime64,403,PNR,PNR,403,PNR,403,PNR,403,403,PNR,403,PNR,PNR,403,PNR
+-clock_nanosleep,267,230,230,265,115,265,224,228,258,258,248,248,115,262,262
+-clock_nanosleep_time64,407,PNR,PNR,407,PNR,407,PNR,407,407,PNR,407,PNR,PNR,407,PNR
+-clock_settime,264,227,227,262,112,262,221,225,255,255,245,245,112,259,259
+-clock_settime64,404,PNR,PNR,404,PNR,404,PNR,404,404,PNR,404,PNR,PNR,404,PNR
+-clone,120,56,56,120,220,120,55,55,120,120,120,120,220,120,120
+-clone3,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435
+-close,6,3,3,6,57,6,3,3,6,6,6,6,57,6,6
+-close_range,436,436,436,436,436,436,436,436,436,436,436,436,436,436,436
+-connect,362,42,42,283,203,170,41,41,31,31,328,328,203,362,362
+-copy_file_range,377,326,326,391,285,360,320,324,346,346,379,379,285,375,375
+-creat,8,85,85,8,PNR,8,83,83,8,8,8,8,PNR,8,8
+-create_module,127,174,PNR,PNR,PNR,127,167,167,PNR,PNR,127,127,PNR,127,127
+-delete_module,129,176,176,129,106,129,169,169,129,129,129,129,106,129,129
+-dup,41,32,32,41,23,41,31,31,41,41,41,41,23,41,41
+-dup2,63,33,33,63,PNR,63,32,32,63,63,63,63,PNR,63,63
+-dup3,330,292,292,358,24,327,286,290,312,312,316,316,24,326,326
+-epoll_create,254,213,213,250,PNR,248,207,207,224,224,236,236,PNR,249,249
+-epoll_create1,329,291,291,357,20,326,285,289,311,311,315,315,20,327,327
+-epoll_ctl,255,233,233,251,21,249,208,208,225,225,237,237,21,250,250
+-epoll_ctl_old,PNR,214,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-epoll_pwait,319,281,281,346,22,313,272,276,297,297,303,303,22,312,312
+-epoll_pwait2,441,441,441,441,441,441,441,441,441,441,441,441,441,441,441
+-epoll_wait,256,232,232,252,PNR,250,209,209,226,226,238,238,PNR,251,251
+-epoll_wait_old,PNR,215,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-eventfd,323,284,284,351,PNR,319,278,282,304,304,307,307,PNR,318,318
+-eventfd2,328,290,290,356,19,325,284,288,310,310,314,314,19,323,323
+-execve,11,59,520,11,221,11,57,57,11,11,11,11,221,11,11
+-execveat,358,322,545,387,281,356,316,320,342,342,362,362,281,354,354
+-exit,1,60,60,1,93,1,58,58,1,1,1,1,93,1,1
+-exit_group,252,231,231,248,94,246,205,205,222,222,234,234,94,248,248
+-faccessat,307,269,269,334,48,300,259,263,287,287,298,298,48,300,300
+-faccessat2,439,439,439,439,439,439,439,439,439,439,439,439,439,439,439
+-fadvise64,250,221,221,PNR,223,254,215,216,PNR,PNR,233,233,223,253,253
+-fadvise64_64,272,PNR,PNR,PNR,PNR,PNR,PNR,PNR,236,236,254,PNR,PNR,264,PNR
+-fallocate,324,285,285,352,47,320,279,283,305,305,309,309,47,314,314
+-fanotify_init,338,300,300,367,262,336,295,300,322,322,323,323,262,332,332
+-fanotify_mark,339,301,301,368,263,337,296,301,323,323,324,324,263,333,333
+-fchdir,133,81,81,133,50,133,79,79,133,133,133,133,50,133,133
+-fchmod,94,91,91,94,52,94,89,89,94,94,94,94,52,94,94
+-fchmodat,306,268,268,333,53,299,258,262,286,286,297,297,53,299,299
+-fchown,95,93,93,95,55,95,91,91,95,95,95,95,55,95,207
+-fchown32,207,PNR,PNR,207,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,207,PNR
+-fchownat,298,260,260,325,54,291,250,254,278,278,289,289,54,291,291
+-fcntl,55,72,72,55,25,55,70,70,55,55,55,55,25,55,55
+-fcntl64,221,PNR,PNR,221,PNR,220,PNR,212,202,202,204,PNR,PNR,221,PNR
+-fdatasync,148,75,75,148,83,152,73,73,148,148,148,148,83,148,148
+-fgetxattr,231,193,193,231,10,229,185,185,243,243,214,214,10,229,229
+-finit_module,350,313,313,379,273,348,307,312,333,333,353,353,273,344,344
+-flistxattr,234,196,196,234,13,232,188,188,246,246,217,217,13,232,232
+-flock,143,73,73,143,32,143,71,71,143,143,143,143,32,143,143
+-fork,2,57,57,2,PNR,2,56,56,2,2,2,2,PNR,2,2
+-fremovexattr,237,199,199,237,16,235,191,191,249,249,220,220,16,235,235
+-fsconfig,431,431,431,431,431,431,431,431,431,431,431,431,431,431,431
+-fsetxattr,228,190,190,228,7,226,182,182,240,240,211,211,7,226,226
+-fsmount,432,432,432,432,432,432,432,432,432,432,432,432,432,432,432
+-fsopen,430,430,430,430,430,430,430,430,430,430,430,430,430,430,430
+-fspick,433,433,433,433,433,433,433,433,433,433,433,433,433,433,433
+-fstat,108,5,5,108,80,108,5,5,28,28,108,108,80,108,108
+-fstat64,197,PNR,PNR,197,PNR,215,PNR,PNR,112,112,197,PNR,PNR,197,PNR
+-fstatat64,300,PNR,PNR,327,PNR,293,PNR,PNR,280,280,291,PNR,PNR,293,PNR
+-fstatfs,100,138,138,100,44,100,135,135,100,100,100,100,44,100,100
+-fstatfs64,269,PNR,PNR,267,PNR,256,PNR,218,299,299,253,253,PNR,266,266
+-fsync,118,74,74,118,82,118,72,72,118,118,118,118,82,118,118
+-ftime,35,PNR,PNR,PNR,PNR,35,PNR,PNR,PNR,PNR,35,35,PNR,PNR,PNR
+-ftruncate,93,77,77,93,46,93,75,75,93,93,93,93,46,93,93
+-ftruncate64,194,PNR,PNR,194,PNR,212,PNR,PNR,200,200,194,PNR,PNR,194,PNR
+-futex,240,202,202,240,98,238,194,194,210,210,221,221,98,238,238
+-futex_time64,422,PNR,PNR,422,PNR,422,PNR,422,422,PNR,422,PNR,PNR,422,PNR
+-futex_waitv,449,449,449,449,449,449,449,449,449,449,449,449,449,449,449
+-futimesat,299,261,261,326,PNR,292,251,255,279,279,290,290,PNR,292,292
+-getcpu,318,309,309,345,168,312,271,275,296,296,302,302,168,311,311
+-getcwd,183,79,79,183,17,203,77,77,110,110,182,182,17,183,183
+-getdents,141,78,78,141,PNR,141,76,76,141,141,141,141,PNR,141,141
+-getdents64,220,217,217,217,61,219,308,299,201,201,202,202,61,220,220
+-getegid,50,108,108,50,177,50,106,106,50,50,50,50,177,50,202
+-getegid32,202,PNR,PNR,202,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,202,PNR
+-geteuid,49,107,107,49,175,49,105,105,49,49,49,49,175,49,201
+-geteuid32,201,PNR,PNR,201,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,201,PNR
+-getgid,47,104,104,47,176,47,102,102,47,47,47,47,176,47,200
+-getgid32,200,PNR,PNR,200,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,200,PNR
+-getgroups,80,115,115,80,158,80,113,113,80,80,80,80,158,80,205
+-getgroups32,205,PNR,PNR,205,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,205,PNR
+-getitimer,105,36,36,105,102,105,35,35,105,105,105,105,102,105,105
+-get_kernel_syms,130,177,PNR,PNR,PNR,130,170,170,PNR,PNR,130,130,PNR,130,130
+-get_mempolicy,275,239,239,320,236,269,228,232,261,261,260,260,236,269,269
+-getpeername,368,52,52,287,205,171,51,51,53,53,332,332,205,368,368
+-getpgid,132,121,121,132,155,132,119,119,132,132,132,132,155,132,132
+-getpgrp,65,111,111,65,PNR,65,109,109,65,65,65,65,PNR,65,65
+-getpid,20,39,39,20,172,20,38,38,20,20,20,20,172,20,20
+-getpmsg,188,181,181,PNR,PNR,208,174,174,PNR,PNR,187,187,PNR,188,188
+-getppid,64,110,110,64,173,64,108,108,64,64,64,64,173,64,64
+-getpriority,96,140,140,96,141,96,137,137,96,96,96,96,141,96,96
+-getrandom,355,318,318,384,278,353,313,317,339,339,359,359,278,349,349
+-getresgid,171,120,120,171,150,191,118,118,171,171,170,170,150,171,211
+-getresgid32,211,PNR,PNR,211,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,211,PNR
+-getresuid,165,118,118,165,148,186,116,116,165,165,165,165,148,165,209
+-getresuid32,209,PNR,PNR,209,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,209,PNR
+-getrlimit,76,97,97,PNR,163,76,95,95,76,76,76,76,163,76,191
+-get_robust_list,312,274,531,339,100,310,269,273,290,290,299,299,100,305,305
+-getrusage,77,98,98,77,165,77,96,96,77,77,77,77,165,77,77
+-getsid,147,124,124,147,156,151,122,122,147,147,147,147,156,147,147
+-getsockname,367,51,51,286,204,172,50,50,44,44,331,331,204,367,367
+-getsockopt,365,55,542,295,209,173,54,54,182,182,340,340,209,365,365
+-get_thread_area,244,211,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-gettid,224,186,186,224,178,222,178,178,206,206,207,207,178,236,236
+-gettimeofday,78,96,96,78,169,78,94,94,78,78,78,78,169,78,78
+-get_tls,PNR,PNR,PNR,983046,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-getuid,24,102,102,24,174,24,100,100,24,24,24,24,174,24,199
+-getuid32,199,PNR,PNR,199,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,199,PNR
+-getxattr,229,191,191,229,8,227,183,183,241,241,212,212,8,227,227
+-gtty,32,PNR,PNR,PNR,PNR,32,PNR,PNR,PNR,PNR,32,32,PNR,PNR,PNR
+-idle,112,PNR,PNR,PNR,PNR,112,PNR,PNR,PNR,PNR,112,112,PNR,112,112
+-init_module,128,175,175,128,105,128,168,168,128,128,128,128,105,128,128
+-inotify_add_watch,292,254,254,317,27,285,244,248,270,270,276,276,27,285,285
+-inotify_init,291,253,253,316,PNR,284,243,247,269,269,275,275,PNR,284,284
+-inotify_init1,332,294,294,360,26,329,288,292,314,314,318,318,26,324,324
+-inotify_rm_watch,293,255,255,318,28,286,245,249,271,271,277,277,28,286,286
+-io_cancel,249,210,210,247,3,245,204,204,219,219,231,231,3,247,247
+-ioctl,54,16,514,54,29,54,15,15,54,54,54,54,29,54,54
+-io_destroy,246,207,207,244,1,242,201,201,216,216,228,228,1,244,244
+-io_getevents,247,208,208,245,4,243,202,202,217,217,229,229,4,245,245
+-ioperm,101,173,173,PNR,PNR,101,PNR,PNR,PNR,PNR,101,101,PNR,101,PNR
+-io_pgetevents,385,333,333,399,292,368,328,332,350,350,388,388,292,382,382
+-io_pgetevents_time64,416,PNR,PNR,416,PNR,416,PNR,416,416,PNR,416,PNR,PNR,416,PNR
+-iopl,110,172,172,PNR,PNR,110,PNR,PNR,PNR,PNR,110,110,PNR,PNR,PNR
+-ioprio_get,290,252,252,315,31,315,274,278,268,268,274,274,31,283,283
+-ioprio_set,289,251,251,314,30,314,273,277,267,267,273,273,30,282,282
+-io_setup,245,206,543,243,0,241,200,200,215,215,227,227,0,243,243
+-io_submit,248,209,544,246,2,244,203,203,218,218,230,230,2,246,246
+-io_uring_enter,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426
+-io_uring_register,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427
+-io_uring_setup,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425
+-ipc,117,PNR,PNR,PNR,PNR,117,PNR,PNR,PNR,PNR,117,117,PNR,117,117
+-kcmp,349,312,312,378,272,347,306,311,332,332,354,354,272,343,343
+-kexec_file_load,PNR,320,320,401,294,PNR,PNR,PNR,355,355,382,382,294,381,381
+-kexec_load,283,246,528,347,104,311,270,274,300,300,268,268,104,277,277
+-keyctl,288,250,250,311,219,282,241,245,266,266,271,271,219,280,280
+-kill,37,62,62,37,129,37,60,60,37,37,37,37,129,37,37
+-landlock_add_rule,445,445,445,445,445,445,445,445,445,445,445,445,445,445,445
+-landlock_create_ruleset,444,444,444,444,444,444,444,444,444,444,444,444,444,444,444
+-landlock_restrict_self,446,446,446,446,446,446,446,446,446,446,446,446,446,446,446
+-lchown,16,94,94,16,PNR,16,92,92,16,16,16,16,PNR,16,198
+-lchown32,198,PNR,PNR,198,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,198,PNR
+-lgetxattr,230,192,192,230,9,228,184,184,242,242,213,213,9,228,228
+-link,9,86,86,9,PNR,9,84,84,9,9,9,9,PNR,9,9
+-linkat,303,265,265,330,37,296,255,259,283,283,294,294,37,296,296
+-listen,363,50,50,284,201,174,49,49,32,32,329,329,201,363,363
+-listxattr,232,194,194,232,11,230,186,186,244,244,215,215,11,230,230
+-llistxattr,233,195,195,233,12,231,187,187,245,245,216,216,12,231,231
+-_llseek,140,PNR,PNR,140,PNR,140,PNR,PNR,140,140,140,140,PNR,140,PNR
+-lock,53,PNR,PNR,PNR,PNR,53,PNR,PNR,PNR,PNR,53,53,PNR,PNR,PNR
+-lookup_dcookie,253,212,212,249,18,247,206,206,223,223,235,235,18,110,110
+-lremovexattr,236,198,198,236,15,234,190,190,248,248,219,219,15,234,234
+-lseek,19,8,8,19,62,19,8,8,19,19,19,19,62,19,19
+-lsetxattr,227,189,189,227,6,225,181,181,239,239,210,210,6,225,225
+-lstat,107,6,6,107,PNR,107,6,6,84,84,107,107,PNR,107,107
+-lstat64,196,PNR,PNR,196,PNR,214,PNR,PNR,198,198,196,PNR,PNR,196,PNR
+-madvise,219,28,28,220,233,218,27,27,119,119,205,205,233,219,219
+-mbind,274,237,237,319,235,268,227,231,260,260,259,259,235,268,268
+-membarrier,375,324,324,389,283,358,318,322,343,343,365,365,283,356,356
+-memfd_create,356,319,319,385,279,354,314,318,340,340,360,360,279,350,350
+-memfd_secret,447,447,447,PNR,447,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-migrate_pages,294,256,256,400,238,287,246,250,272,272,258,258,238,287,287
+-mincore,218,27,27,219,232,217,26,26,72,72,206,206,232,218,218
+-mkdir,39,83,83,39,PNR,39,81,81,39,39,39,39,PNR,39,39
+-mkdirat,296,258,258,323,34,289,248,252,276,276,287,287,34,289,289
+-mknod,14,133,133,14,PNR,14,131,131,14,14,14,14,PNR,14,14
+-mknodat,297,259,259,324,33,290,249,253,277,277,288,288,33,290,290
+-mlock,150,149,149,150,228,154,146,146,150,150,150,150,228,150,150
+-mlock2,376,325,325,390,284,359,319,323,345,345,378,378,284,374,374
+-mlockall,152,151,151,152,230,156,148,148,152,152,152,152,230,152,152
+-mmap,90,9,9,PNR,222,90,9,9,90,90,90,90,222,90,90
+-mmap2,192,PNR,PNR,192,PNR,210,PNR,PNR,89,89,192,PNR,PNR,192,PNR
+-modify_ldt,123,154,154,PNR,PNR,123,PNR,PNR,PNR,PNR,123,123,PNR,PNR,PNR
+-mount,21,165,165,21,40,21,160,160,21,21,21,21,40,21,21
+-mount_setattr,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442
+-move_mount,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429
+-move_pages,317,279,533,344,239,308,267,271,295,295,301,301,239,310,310
+-mprotect,125,10,10,125,226,125,10,10,125,125,125,125,226,125,125
+-mpx,56,PNR,PNR,PNR,PNR,56,PNR,PNR,PNR,PNR,56,56,PNR,PNR,PNR
+-mq_getsetattr,282,245,245,279,185,276,235,239,234,234,267,267,185,276,276
+-mq_notify,281,244,527,278,184,275,234,238,233,233,266,266,184,275,275
+-mq_open,277,240,240,274,180,271,230,234,229,229,262,262,180,271,271
+-mq_timedreceive,280,243,243,277,183,274,233,237,232,232,265,265,183,274,274
+-mq_timedreceive_time64,419,PNR,PNR,419,PNR,419,PNR,419,419,PNR,419,PNR,PNR,419,PNR
+-mq_timedsend,279,242,242,276,182,273,232,236,231,231,264,264,182,273,273
+-mq_timedsend_time64,418,PNR,PNR,418,PNR,418,PNR,418,418,PNR,418,PNR,PNR,418,PNR
+-mq_unlink,278,241,241,275,181,272,231,235,230,230,263,263,181,272,272
+-mremap,163,25,25,163,216,167,24,24,163,163,163,163,216,163,163
+-msgctl,402,71,71,304,187,402,69,69,191,191,402,402,187,402,402
+-msgget,399,68,68,303,186,399,66,66,190,190,399,399,186,399,399
+-msgrcv,401,70,70,302,188,401,68,68,189,189,401,401,188,401,401
+-msgsnd,400,69,69,301,189,400,67,67,188,188,400,400,189,400,400
+-msync,144,26,26,144,227,144,25,25,144,144,144,144,227,144,144
+-multiplexer,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,201,201,PNR,PNR,PNR
+-munlock,151,150,150,151,229,155,147,147,151,151,151,151,229,151,151
+-munlockall,153,152,152,153,231,157,149,149,153,153,153,153,231,153,153
+-munmap,91,11,11,91,215,91,11,11,91,91,91,91,215,91,91
+-name_to_handle_at,341,303,303,370,264,339,298,303,325,325,345,345,264,335,335
+-nanosleep,162,35,35,162,101,166,34,34,162,162,162,162,101,162,162
+-newfstatat,PNR,262,262,PNR,79,PNR,252,256,PNR,PNR,PNR,291,79,PNR,293
+-_newselect,142,PNR,PNR,142,PNR,142,22,22,142,142,142,142,PNR,142,PNR
+-nfsservctl,169,180,PNR,169,42,189,173,173,PNR,PNR,168,168,42,169,169
+-nice,34,PNR,PNR,34,PNR,34,PNR,PNR,34,34,34,34,PNR,34,34
+-oldfstat,28,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,28,28,PNR,PNR,PNR
+-oldlstat,84,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,84,84,PNR,PNR,PNR
+-oldolduname,59,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,59,59,PNR,PNR,PNR
+-oldstat,18,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,18,18,PNR,PNR,PNR
+-olduname,109,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,109,109,PNR,PNR,PNR
+-open,5,2,2,5,PNR,5,2,2,5,5,5,5,PNR,5,5
+-openat,295,257,257,322,56,288,247,251,275,275,286,286,56,288,288
+-openat2,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437
+-open_by_handle_at,342,304,304,371,265,340,299,304,326,326,346,346,265,336,336
+-open_tree,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428
+-pause,29,34,34,29,PNR,29,33,33,29,29,29,29,PNR,29,29
+-pciconfig_iobase,PNR,PNR,PNR,271,PNR,PNR,PNR,PNR,PNR,PNR,200,200,PNR,PNR,PNR
+-pciconfig_read,PNR,PNR,PNR,272,PNR,PNR,PNR,PNR,PNR,PNR,198,198,PNR,PNR,PNR
+-pciconfig_write,PNR,PNR,PNR,273,PNR,PNR,PNR,PNR,PNR,PNR,199,199,PNR,PNR,PNR
+-perf_event_open,336,298,298,364,241,333,292,296,318,318,319,319,241,331,331
+-personality,136,135,135,136,92,136,132,132,136,136,136,136,92,136,136
+-pidfd_getfd,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438
+-pidfd_open,434,434,434,434,434,434,434,434,434,434,434,434,434,434,434
+-pidfd_send_signal,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424
+-pipe,42,22,22,42,PNR,42,21,21,42,42,42,42,PNR,42,42
+-pipe2,331,293,293,359,59,328,287,291,313,313,317,317,59,325,325
+-pivot_root,217,155,155,218,41,216,151,151,67,67,203,203,41,217,217
+-pkey_alloc,381,330,330,395,289,364,324,328,352,352,384,384,289,385,385
+-pkey_free,382,331,331,396,290,365,325,329,353,353,385,385,290,386,386
+-pkey_mprotect,380,329,329,394,288,363,323,327,351,351,386,386,288,384,384
+-poll,168,7,7,168,PNR,188,7,7,168,168,167,167,PNR,168,168
+-ppoll,309,271,271,336,73,302,261,265,274,274,281,281,73,302,302
+-ppoll_time64,414,PNR,PNR,414,PNR,414,PNR,414,414,PNR,414,PNR,PNR,414,PNR
+-prctl,172,157,157,172,167,192,153,153,172,172,171,171,167,172,172
+-pread64,180,17,17,180,67,200,16,16,108,108,179,179,67,180,180
+-preadv,333,295,534,361,69,330,289,293,315,315,320,320,69,328,328
+-preadv2,378,327,546,392,286,361,321,325,347,347,380,380,286,376,376
+-prlimit64,340,302,302,369,261,338,297,302,321,321,325,325,261,334,334
+-process_madvise,440,440,440,440,440,440,440,440,440,440,440,440,440,440,440
+-process_mrelease,448,448,448,448,448,448,448,448,448,448,448,448,448,448,448
+-process_vm_readv,347,310,539,376,270,345,304,309,330,330,351,351,270,340,340
+-process_vm_writev,348,311,540,377,271,346,305,310,331,331,352,352,271,341,341
+-prof,44,PNR,PNR,PNR,PNR,44,PNR,PNR,PNR,PNR,44,44,PNR,PNR,PNR
+-profil,98,PNR,PNR,PNR,PNR,98,PNR,PNR,PNR,PNR,98,98,PNR,PNR,PNR
+-pselect6,308,270,270,335,72,301,260,264,273,273,280,280,72,301,301
+-pselect6_time64,413,PNR,PNR,413,PNR,413,PNR,413,413,PNR,413,PNR,PNR,413,PNR
+-ptrace,26,101,521,26,117,26,99,99,26,26,26,26,117,26,26
+-putpmsg,189,182,182,PNR,PNR,209,175,175,PNR,PNR,188,188,PNR,189,189
+-pwrite64,181,18,18,181,68,201,17,17,109,109,180,180,68,181,181
+-pwritev,334,296,535,362,70,331,290,294,316,316,321,321,70,329,329
+-pwritev2,379,328,547,393,287,362,322,326,348,348,381,381,287,377,377
+-query_module,167,178,PNR,PNR,PNR,187,171,171,PNR,PNR,166,166,PNR,167,167
+-quotactl,131,179,179,131,60,131,172,172,131,131,131,131,60,131,131
+-quotactl_fd,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443
+-read,3,0,0,3,63,3,0,0,3,3,3,3,63,3,3
+-readahead,225,187,187,225,213,223,179,179,207,207,191,191,213,222,222
+-readdir,89,PNR,PNR,PNR,PNR,89,PNR,PNR,PNR,PNR,89,89,PNR,89,89
+-readlink,85,89,89,85,PNR,85,87,87,85,85,85,85,PNR,85,85
+-readlinkat,305,267,267,332,78,298,257,261,285,285,296,296,78,298,298
+-readv,145,19,515,145,65,145,18,18,145,145,145,145,65,145,145
+-reboot,88,169,169,88,142,88,164,164,88,88,88,88,142,88,88
+-recv,PNR,PNR,PNR,291,PNR,175,PNR,PNR,98,98,336,336,PNR,PNR,PNR
+-recvfrom,371,45,517,292,207,176,44,44,123,123,337,337,207,371,371
+-recvmmsg,337,299,537,365,243,335,294,298,319,319,343,343,243,357,357
+-recvmmsg_time64,417,PNR,PNR,417,PNR,417,PNR,417,417,PNR,417,PNR,PNR,417,PNR
+-recvmsg,372,47,519,297,212,177,46,46,184,184,342,342,212,372,372
+-remap_file_pages,257,216,216,253,234,251,210,210,227,227,239,239,234,267,267
+-removexattr,235,197,197,235,14,233,189,189,247,247,218,218,14,233,233
+-rename,38,82,82,38,PNR,38,80,80,38,38,38,38,PNR,38,38
+-renameat,302,264,264,329,38,295,254,258,282,282,293,293,PNR,295,295
+-renameat2,353,316,316,382,276,351,311,315,337,337,357,357,276,347,347
+-request_key,287,249,249,310,218,281,240,244,265,265,270,270,218,279,279
+-restart_syscall,0,219,219,0,128,253,213,214,0,0,0,0,128,7,7
+-riscv_flush_icache,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,259,PNR,PNR
+-rmdir,40,84,84,40,PNR,40,82,82,40,40,40,40,PNR,40,40
+-rseq,386,334,334,398,293,367,327,331,354,354,387,387,293,383,383
+-rtas,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,255,255,PNR,PNR,PNR
+-rt_sigaction,174,13,512,174,134,194,13,13,174,174,173,173,134,174,174
+-rt_sigpending,176,127,522,176,136,196,125,125,176,176,175,175,136,176,176
+-rt_sigprocmask,175,14,14,175,135,195,14,14,175,175,174,174,135,175,175
+-rt_sigqueueinfo,178,129,524,178,138,198,127,127,178,178,177,177,138,178,178
+-rt_sigreturn,173,15,513,173,139,193,211,211,173,173,172,172,139,173,173
+-rt_sigsuspend,179,130,130,179,133,199,128,128,179,179,178,178,133,179,179
+-rt_sigtimedwait,177,128,523,177,137,197,126,126,177,177,176,176,137,177,177
+-rt_sigtimedwait_time64,421,PNR,PNR,421,PNR,421,PNR,421,421,PNR,421,PNR,PNR,421,PNR
+-rt_tgsigqueueinfo,335,297,536,363,240,332,291,295,317,317,322,322,240,330,330
+-s390_guarded_storage,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,378,378
+-s390_pci_mmio_read,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,353,353
+-s390_pci_mmio_write,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,352,352
+-s390_runtime_instr,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,342,342
+-s390_sthyi,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,380,380
+-sched_getaffinity,242,204,204,242,123,240,196,196,212,212,223,223,123,240,240
+-sched_getattr,352,315,315,381,275,350,310,314,335,335,356,356,275,346,346
+-sched_getparam,155,143,143,155,121,159,140,140,155,155,155,155,121,155,155
+-sched_get_priority_max,159,146,146,159,125,163,143,143,159,159,159,159,125,159,159
+-sched_get_priority_min,160,147,147,160,126,164,144,144,160,160,160,160,126,160,160
+-sched_getscheduler,157,145,145,157,120,161,142,142,157,157,157,157,120,157,157
+-sched_rr_get_interval,161,148,148,161,127,165,145,145,161,161,161,161,127,161,161
+-sched_rr_get_interval_time64,423,PNR,PNR,423,PNR,423,PNR,423,423,PNR,423,PNR,PNR,423,PNR
+-sched_setaffinity,241,203,203,241,122,239,195,195,211,211,222,222,122,239,239
+-sched_setattr,351,314,314,380,274,349,309,313,334,334,355,355,274,345,345
+-sched_setparam,154,142,142,154,118,158,139,139,154,154,154,154,118,154,154
+-sched_setscheduler,156,144,144,156,119,160,141,141,156,156,156,156,119,156,156
+-sched_yield,158,24,24,158,124,162,23,23,158,158,158,158,124,158,158
+-seccomp,354,317,317,383,277,352,312,316,338,338,358,358,277,348,348
+-security,PNR,185,185,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-select,82,23,23,PNR,PNR,PNR,PNR,PNR,PNR,PNR,82,82,PNR,PNR,142
+-semctl,394,66,66,300,191,394,64,64,187,187,394,394,191,394,394
+-semget,393,64,64,299,190,393,62,62,186,186,393,393,190,393,393
+-semop,PNR,65,65,298,193,PNR,63,63,185,185,PNR,PNR,193,PNR,PNR
+-semtimedop,PNR,220,220,312,192,PNR,214,215,228,228,PNR,392,192,PNR,392
+-semtimedop_time64,420,PNR,PNR,420,PNR,420,PNR,420,420,PNR,420,PNR,PNR,420,PNR
+-send,PNR,PNR,PNR,289,PNR,178,PNR,PNR,58,58,334,334,PNR,PNR,PNR
+-sendfile,187,40,40,187,71,207,39,39,122,122,186,186,71,187,187
+-sendfile64,239,PNR,PNR,239,PNR,237,PNR,219,209,209,226,PNR,PNR,223,PNR
+-sendmmsg,345,307,538,374,269,343,302,307,329,329,349,349,269,358,358
+-sendmsg,370,46,518,296,211,179,45,45,183,183,341,341,211,370,370
+-sendto,369,44,44,290,206,180,43,43,82,82,335,335,206,369,369
+-setdomainname,121,171,171,121,162,121,166,166,121,121,121,121,162,121,121
+-setfsgid,139,123,123,139,152,139,121,121,139,139,139,139,152,139,216
+-setfsgid32,216,PNR,PNR,216,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,216,PNR
+-setfsuid,138,122,122,138,151,138,120,120,138,138,138,138,151,138,215
+-setfsuid32,215,PNR,PNR,215,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,215,PNR
+-setgid,46,106,106,46,144,46,104,104,46,46,46,46,144,46,214
+-setgid32,214,PNR,PNR,214,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,214,PNR
+-setgroups,81,116,116,81,159,81,114,114,81,81,81,81,159,81,206
+-setgroups32,206,PNR,PNR,206,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,206,PNR
+-sethostname,74,170,170,74,161,74,165,165,74,74,74,74,161,74,74
+-setitimer,104,38,38,104,103,104,36,36,104,104,104,104,103,104,104
+-set_mempolicy,276,238,238,321,237,270,229,233,262,262,261,261,237,270,270
+-set_mempolicy_home_node,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450
+-setns,346,308,308,375,268,344,303,308,328,328,350,350,268,339,339
+-setpgid,57,109,109,57,154,57,107,107,57,57,57,57,154,57,57
+-setpriority,97,141,141,97,140,97,138,138,97,97,97,97,140,97,97
+-setregid,71,114,114,71,143,71,112,112,71,71,71,71,143,71,204
+-setregid32,204,PNR,PNR,204,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,204,PNR
+-setresgid,170,119,119,170,149,190,117,117,170,170,169,169,149,170,210
+-setresgid32,210,PNR,PNR,210,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,210,PNR
+-setresuid,164,117,117,164,147,185,115,115,164,164,164,164,147,164,208
+-setresuid32,208,PNR,PNR,208,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,208,PNR
+-setreuid,70,113,113,70,145,70,111,111,70,70,70,70,145,70,203
+-setreuid32,203,PNR,PNR,203,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,203,PNR
+-setrlimit,75,160,160,75,164,75,155,155,75,75,75,75,164,75,75
+-set_robust_list,311,273,530,338,99,309,268,272,289,289,300,300,99,304,304
+-setsid,66,112,112,66,157,66,110,110,66,66,66,66,157,66,66
+-setsockopt,366,54,541,294,208,181,53,53,181,181,339,339,208,366,366
+-set_thread_area,243,205,PNR,PNR,PNR,283,242,246,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-set_tid_address,258,218,218,256,96,252,212,213,237,237,232,232,96,252,252
+-settimeofday,79,164,164,79,170,79,159,159,79,79,79,79,170,79,79
+-set_tls,PNR,PNR,PNR,983045,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-setuid,23,105,105,23,146,23,103,103,23,23,23,23,146,23,213
+-setuid32,213,PNR,PNR,213,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,213,PNR
+-setxattr,226,188,188,226,5,224,180,180,238,238,209,209,5,224,224
+-sgetmask,68,PNR,PNR,PNR,PNR,68,PNR,PNR,68,68,68,68,PNR,PNR,PNR
+-shmat,397,30,30,305,196,397,29,29,192,192,397,397,196,397,397
+-shmctl,396,31,31,308,195,396,30,30,195,195,396,396,195,396,396
+-shmdt,398,67,67,306,197,398,65,65,193,193,398,398,197,398,398
+-shmget,395,29,29,307,194,395,28,28,194,194,395,395,194,395,395
+-shutdown,373,48,48,293,210,182,47,47,117,117,338,338,210,373,373
+-sigaction,67,PNR,PNR,67,PNR,67,PNR,PNR,PNR,PNR,67,67,PNR,67,67
+-sigaltstack,186,131,525,186,132,206,129,129,166,166,185,185,132,186,186
+-signal,48,PNR,PNR,PNR,PNR,48,PNR,PNR,48,48,48,48,PNR,48,48
+-signalfd,321,282,282,349,PNR,317,276,280,302,302,305,305,PNR,316,316
+-signalfd4,327,289,289,355,74,324,283,287,309,309,313,313,74,322,322
+-sigpending,73,PNR,PNR,73,PNR,73,PNR,PNR,73,73,73,73,PNR,73,73
+-sigprocmask,126,PNR,PNR,126,PNR,126,PNR,PNR,126,126,126,126,PNR,126,126
+-sigreturn,119,PNR,PNR,119,PNR,119,PNR,PNR,PNR,PNR,119,119,PNR,119,119
+-sigsuspend,72,PNR,PNR,72,PNR,72,PNR,PNR,PNR,PNR,72,72,PNR,72,72
+-socket,359,41,41,281,198,183,40,40,17,17,326,326,198,359,359
+-socketcall,102,PNR,PNR,PNR,PNR,102,PNR,PNR,PNR,PNR,102,102,PNR,102,102
+-socketpair,360,53,53,288,199,184,52,52,56,56,333,333,199,360,360
+-splice,313,275,275,340,76,304,263,267,291,291,283,283,76,306,306
+-spu_create,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,279,279,PNR,PNR,PNR
+-spu_run,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,278,278,PNR,PNR,PNR
+-ssetmask,69,PNR,PNR,PNR,PNR,69,PNR,PNR,69,69,69,69,PNR,PNR,PNR
+-stat,106,4,4,106,PNR,106,4,4,18,18,106,106,PNR,106,106
+-stat64,195,PNR,PNR,195,PNR,213,PNR,PNR,101,101,195,PNR,PNR,195,PNR
+-statfs,99,137,137,99,43,99,134,134,99,99,99,99,43,99,99
+-statfs64,268,PNR,PNR,266,PNR,255,PNR,217,298,298,252,252,PNR,265,265
+-statx,383,332,332,397,291,366,326,330,349,349,383,383,291,379,379
+-stime,25,PNR,PNR,PNR,PNR,25,PNR,PNR,25,25,25,25,PNR,25,PNR
+-stty,31,PNR,PNR,PNR,PNR,31,PNR,PNR,PNR,PNR,31,31,PNR,PNR,PNR
+-subpage_prot,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,310,310,PNR,PNR,PNR
+-swapcontext,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,249,249,PNR,PNR,PNR
+-swapoff,115,168,168,115,225,115,163,163,115,115,115,115,225,115,115
+-swapon,87,167,167,87,224,87,162,162,87,87,87,87,224,87,87
+-switch_endian,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,363,363,PNR,PNR,PNR
+-symlink,83,88,88,83,PNR,83,86,86,83,83,83,83,PNR,83,83
+-symlinkat,304,266,266,331,36,297,256,260,284,284,295,295,36,297,297
+-sync,36,162,162,36,81,36,157,157,36,36,36,36,81,36,36
+-sync_file_range,314,277,277,PNR,84,305,264,268,292,292,PNR,PNR,84,307,307
+-sync_file_range2,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,308,308,PNR,PNR,PNR
+-syncfs,344,306,306,373,267,342,301,306,327,327,348,348,267,338,338
+-syscall,PNR,PNR,PNR,PNR,PNR,0,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-_sysctl,149,156,PNR,149,PNR,153,152,152,149,149,149,149,PNR,149,149
+-sys_debug_setcontext,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,256,256,PNR,PNR,PNR
+-sysfs,135,139,139,135,PNR,135,136,136,135,135,135,135,PNR,135,135
+-sysinfo,116,99,99,116,179,116,97,97,116,116,116,116,179,116,116
+-syslog,103,103,103,103,116,103,101,101,103,103,103,103,116,103,103
+-sysmips,PNR,PNR,PNR,PNR,PNR,149,199,199,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-tee,315,276,276,342,77,306,265,269,293,293,284,284,77,308,308
+-tgkill,270,234,234,268,131,266,225,229,259,259,250,250,131,241,241
+-time,13,201,201,PNR,PNR,13,PNR,PNR,13,13,13,13,PNR,13,PNR
+-timer_create,259,222,526,257,107,257,216,220,250,250,240,240,107,254,254
+-timer_delete,263,226,226,261,111,261,220,224,254,254,244,244,111,258,258
+-timerfd,PNR,PNR,PNR,PNR,PNR,318,277,281,PNR,PNR,PNR,PNR,PNR,317,317
+-timerfd_create,322,283,283,350,85,321,280,284,306,306,306,306,85,319,319
+-timerfd_gettime,326,287,287,354,87,322,281,285,308,308,312,312,87,321,321
+-timerfd_gettime64,410,PNR,PNR,410,PNR,410,PNR,410,410,PNR,410,PNR,PNR,410,PNR
+-timerfd_settime,325,286,286,353,86,323,282,286,307,307,311,311,86,320,320
+-timerfd_settime64,411,PNR,PNR,411,PNR,411,PNR,411,411,PNR,411,PNR,PNR,411,PNR
+-timer_getoverrun,262,225,225,260,109,260,219,223,253,253,243,243,109,257,257
+-timer_gettime,261,224,224,259,108,259,218,222,252,252,242,242,108,256,256
+-timer_gettime64,408,PNR,PNR,408,PNR,408,PNR,408,408,PNR,408,PNR,PNR,408,PNR
+-timer_settime,260,223,223,258,110,258,217,221,251,251,241,241,110,255,255
+-timer_settime64,409,PNR,PNR,409,PNR,409,PNR,409,409,PNR,409,PNR,PNR,409,PNR
+-times,43,100,100,43,153,43,98,98,43,43,43,43,153,43,43
+-tkill,238,200,200,238,130,236,192,192,208,208,208,208,130,237,237
+-truncate,92,76,76,92,45,92,74,74,92,92,92,92,45,92,92
+-truncate64,193,PNR,PNR,193,PNR,211,PNR,PNR,199,199,193,PNR,PNR,193,PNR
+-tuxcall,PNR,184,184,PNR,PNR,PNR,PNR,PNR,PNR,PNR,225,225,PNR,PNR,PNR
+-ugetrlimit,191,PNR,PNR,191,PNR,PNR,PNR,PNR,PNR,PNR,190,190,PNR,191,PNR
+-ulimit,58,PNR,PNR,PNR,PNR,58,PNR,PNR,PNR,PNR,58,58,PNR,PNR,PNR
+-umask,60,95,95,60,166,60,93,93,60,60,60,60,166,60,60
+-umount,22,PNR,PNR,PNR,PNR,22,PNR,PNR,PNR,PNR,22,22,PNR,22,22
+-umount2,52,166,166,52,39,52,161,161,52,52,52,52,39,52,52
+-uname,122,63,63,122,160,122,61,61,59,59,122,122,160,122,122
+-unlink,10,87,87,10,PNR,10,85,85,10,10,10,10,PNR,10,10
+-unlinkat,301,263,263,328,35,294,253,257,281,281,292,292,35,294,294
+-unshare,310,272,272,337,97,303,262,266,288,288,282,282,97,303,303
+-uselib,86,134,PNR,86,PNR,86,PNR,PNR,86,86,86,86,PNR,86,86
+-userfaultfd,374,323,323,388,282,357,317,321,344,344,364,364,282,355,355
+-usr26,PNR,PNR,PNR,983043,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-usr32,PNR,PNR,PNR,983044,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-ustat,62,136,136,62,PNR,62,133,133,62,62,62,62,PNR,62,62
+-utime,30,132,132,PNR,PNR,30,130,130,30,30,30,30,PNR,30,30
+-utimensat,320,280,280,348,88,316,275,279,301,301,304,304,88,315,315
+-utimensat_time64,412,PNR,PNR,412,PNR,412,PNR,412,412,PNR,412,PNR,PNR,412,PNR
+-utimes,271,235,235,269,PNR,267,226,230,336,336,251,251,PNR,313,313
+-vfork,190,58,58,190,PNR,PNR,PNR,PNR,113,113,189,189,PNR,190,190
+-vhangup,111,153,153,111,58,111,150,150,111,111,111,111,58,111,111
+-vm86,166,PNR,PNR,PNR,PNR,113,PNR,PNR,PNR,PNR,113,113,PNR,PNR,PNR
+-vm86old,113,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-vmsplice,316,278,532,343,75,307,266,270,294,294,285,285,75,309,309
+-vserver,273,236,PNR,313,PNR,277,236,240,PNR,PNR,PNR,PNR,PNR,PNR,PNR
+-wait4,114,61,61,114,260,114,59,59,114,114,114,114,260,114,114
+-waitid,284,247,529,280,95,278,237,241,235,235,272,272,95,281,281
+-waitpid,7,PNR,PNR,PNR,PNR,7,PNR,PNR,7,7,7,7,PNR,PNR,PNR
+-write,4,1,1,4,64,4,1,1,4,4,4,4,64,4,4
+-writev,146,20,516,146,66,146,19,19,146,146,146,146,66,146,146
++#syscall (v6.2.0 2023-03-02),x86,x86_kver,x86_64,x86_64_kver,x32,x32_kver,arm,arm_kver,aarch64,aarch64_kver,loongarch64,loongarch64_kver,m68k,m68k_kver,mips,mips_kver,mips64,mips64_kver,mips64n32,mips64n32_kver,parisc,parisc_kver,parisc64,parisc64_kver,ppc,ppc_kver,ppc64,ppc64_kver,riscv64,riscv64_kver,s390,s390_kver,s390x,s390x_kver,sh,sh_kver
++accept,PNR,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,285,KV_UNDEF,202,KV_UNDEF,202,KV_UNDEF,PNR,KV_UNDEF,168,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,35,KV_UNDEF,35,KV_UNDEF,330,KV_UNDEF,330,KV_UNDEF,202,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,344,KV_UNDEF
++accept4,364,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,366,KV_UNDEF,242,KV_UNDEF,242,KV_UNDEF,361,KV_UNDEF,334,KV_UNDEF,293,KV_UNDEF,297,KV_UNDEF,320,KV_UNDEF,320,KV_UNDEF,344,KV_UNDEF,344,KV_UNDEF,242,KV_UNDEF,364,KV_UNDEF,364,KV_UNDEF,358,KV_UNDEF
++access,33,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,33,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,PNR,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF
++acct,51,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,51,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,89,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF
++add_key,286,KV_UNDEF,248,KV_UNDEF,248,KV_UNDEF,309,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,279,KV_UNDEF,280,KV_UNDEF,239,KV_UNDEF,243,KV_UNDEF,264,KV_UNDEF,264,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,217,KV_UNDEF,278,KV_UNDEF,278,KV_UNDEF,285,KV_UNDEF
++adjtimex,124,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,124,KV_UNDEF,171,KV_UNDEF,171,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,171,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF
++afs_syscall,137,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,137,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,137,KV_UNDEF,137,KV_UNDEF,PNR,KV_UNDEF,137,KV_UNDEF,137,KV_UNDEF,PNR,KV_UNDEF
++alarm,27,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,PNR,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF
++arch_prctl,384,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++arm_fadvise64_64,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,270,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++arm_sync_file_range,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,341,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++atomic_barrier,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,336,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++atomic_cmpxchg_32,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,335,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++bdflush,134,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,134,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,PNR,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF
++bind,361,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,282,KV_UNDEF,200,KV_UNDEF,200,KV_UNDEF,358,KV_UNDEF,169,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,327,KV_UNDEF,327,KV_UNDEF,200,KV_UNDEF,361,KV_UNDEF,361,KV_UNDEF,341,KV_UNDEF
++bpf,357,KV_UNDEF,321,KV_UNDEF,321,KV_UNDEF,386,KV_UNDEF,280,KV_UNDEF,280,KV_UNDEF,354,KV_UNDEF,355,KV_UNDEF,315,KV_UNDEF,319,KV_UNDEF,341,KV_UNDEF,341,KV_UNDEF,361,KV_UNDEF,361,KV_UNDEF,280,KV_UNDEF,351,KV_UNDEF,351,KV_UNDEF,375,KV_UNDEF
++break,17,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,17,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,17,KV_UNDEF,17,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++breakpoint,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983041,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++brk,45,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,45,KV_UNDEF,214,KV_UNDEF,214,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,214,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF
++cachectl,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,148,KV_UNDEF,198,KV_UNDEF,198,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++cacheflush,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983042,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,123,KV_UNDEF,147,KV_UNDEF,197,KV_UNDEF,197,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,123,KV_UNDEF
++capget,184,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,184,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,184,KV_UNDEF,204,KV_UNDEF,123,KV_UNDEF,123,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,90,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF
++capset,185,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,185,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,185,KV_UNDEF,205,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,91,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF
++chdir,12,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,12,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,49,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF
++chmod,15,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,15,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,PNR,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF
++chown,182,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,182,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,16,KV_UNDEF,202,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,PNR,KV_UNDEF,182,KV_UNDEF,212,KV_UNDEF,182,KV_UNDEF
++chown32,212,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,212,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,212,KV_UNDEF,PNR,KV_UNDEF,212,KV_UNDEF
++chroot,61,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,61,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,51,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF
++clock_adjtime,343,KV_UNDEF,305,KV_UNDEF,305,KV_UNDEF,372,KV_UNDEF,266,KV_UNDEF,266,KV_UNDEF,342,KV_UNDEF,341,KV_UNDEF,300,KV_UNDEF,305,KV_UNDEF,324,KV_UNDEF,324,KV_UNDEF,347,KV_UNDEF,347,KV_UNDEF,266,KV_UNDEF,337,KV_UNDEF,337,KV_UNDEF,361,KV_UNDEF
++clock_adjtime64,405,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF,405,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF,405,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF,PNR,KV_UNDEF,405,KV_UNDEF
++clock_getres,266,KV_UNDEF,229,KV_UNDEF,229,KV_UNDEF,264,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,261,KV_UNDEF,264,KV_UNDEF,223,KV_UNDEF,227,KV_UNDEF,257,KV_UNDEF,257,KV_UNDEF,247,KV_UNDEF,247,KV_UNDEF,114,KV_UNDEF,261,KV_UNDEF,261,KV_UNDEF,266,KV_UNDEF
++clock_getres_time64,406,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF,406,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF,406,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF,PNR,KV_UNDEF,406,KV_UNDEF
++clock_gettime,265,KV_UNDEF,228,KV_UNDEF,228,KV_UNDEF,263,KV_UNDEF,113,KV_UNDEF,113,KV_UNDEF,260,KV_UNDEF,263,KV_UNDEF,222,KV_UNDEF,226,KV_UNDEF,256,KV_UNDEF,256,KV_UNDEF,246,KV_UNDEF,246,KV_UNDEF,113,KV_UNDEF,260,KV_UNDEF,260,KV_UNDEF,265,KV_UNDEF
++clock_gettime64,403,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF,403,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF,403,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF,PNR,KV_UNDEF,403,KV_UNDEF
++clock_nanosleep,267,KV_UNDEF,230,KV_UNDEF,230,KV_UNDEF,265,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,262,KV_UNDEF,265,KV_UNDEF,224,KV_UNDEF,228,KV_UNDEF,258,KV_UNDEF,258,KV_UNDEF,248,KV_UNDEF,248,KV_UNDEF,115,KV_UNDEF,262,KV_UNDEF,262,KV_UNDEF,267,KV_UNDEF
++clock_nanosleep_time64,407,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF,407,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF,407,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF,PNR,KV_UNDEF,407,KV_UNDEF
++clock_settime,264,KV_UNDEF,227,KV_UNDEF,227,KV_UNDEF,262,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,259,KV_UNDEF,262,KV_UNDEF,221,KV_UNDEF,225,KV_UNDEF,255,KV_UNDEF,255,KV_UNDEF,245,KV_UNDEF,245,KV_UNDEF,112,KV_UNDEF,259,KV_UNDEF,259,KV_UNDEF,264,KV_UNDEF
++clock_settime64,404,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF,404,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF,404,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF,PNR,KV_UNDEF,404,KV_UNDEF
++clone,120,KV_UNDEF,56,KV_UNDEF,56,KV_UNDEF,120,KV_UNDEF,220,KV_UNDEF,220,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,220,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF
++clone3,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,435,KV_UNDEF,PNR,KV_UNDEF
++close,6,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,6,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,57,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF
++close_range,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF,436,KV_UNDEF
++connect,362,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,283,KV_UNDEF,203,KV_UNDEF,203,KV_UNDEF,359,KV_UNDEF,170,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,31,KV_UNDEF,31,KV_UNDEF,328,KV_UNDEF,328,KV_UNDEF,203,KV_UNDEF,362,KV_UNDEF,362,KV_UNDEF,342,KV_UNDEF
++copy_file_range,377,KV_UNDEF,326,KV_UNDEF,326,KV_UNDEF,391,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,376,KV_UNDEF,360,KV_UNDEF,320,KV_UNDEF,324,KV_UNDEF,346,KV_UNDEF,346,KV_UNDEF,379,KV_UNDEF,379,KV_UNDEF,285,KV_UNDEF,375,KV_UNDEF,375,KV_UNDEF,380,KV_UNDEF
++creat,8,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,8,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,PNR,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF
++create_module,127,KV_UNDEF,174,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,127,KV_UNDEF,127,KV_UNDEF,167,KV_UNDEF,167,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,127,KV_UNDEF,127,KV_UNDEF,PNR,KV_UNDEF,127,KV_UNDEF,127,KV_UNDEF,PNR,KV_UNDEF
++delete_module,129,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,129,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,106,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF
++dup,41,KV_UNDEF,32,KV_UNDEF,32,KV_UNDEF,41,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,31,KV_UNDEF,31,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,23,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF
++dup2,63,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,63,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,32,KV_UNDEF,32,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,PNR,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF
++dup3,330,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,358,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,326,KV_UNDEF,327,KV_UNDEF,286,KV_UNDEF,290,KV_UNDEF,312,KV_UNDEF,312,KV_UNDEF,316,KV_UNDEF,316,KV_UNDEF,24,KV_UNDEF,326,KV_UNDEF,326,KV_UNDEF,330,KV_UNDEF
++epoll_create,254,KV_UNDEF,213,KV_UNDEF,213,KV_UNDEF,250,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,249,KV_UNDEF,248,KV_UNDEF,207,KV_UNDEF,207,KV_UNDEF,224,KV_UNDEF,224,KV_UNDEF,236,KV_UNDEF,236,KV_UNDEF,PNR,KV_UNDEF,249,KV_UNDEF,249,KV_UNDEF,254,KV_UNDEF
++epoll_create1,329,KV_UNDEF,291,KV_UNDEF,291,KV_UNDEF,357,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,325,KV_UNDEF,326,KV_UNDEF,285,KV_UNDEF,289,KV_UNDEF,311,KV_UNDEF,311,KV_UNDEF,315,KV_UNDEF,315,KV_UNDEF,20,KV_UNDEF,327,KV_UNDEF,327,KV_UNDEF,329,KV_UNDEF
++epoll_ctl,255,KV_UNDEF,233,KV_UNDEF,233,KV_UNDEF,251,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,250,KV_UNDEF,249,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,225,KV_UNDEF,225,KV_UNDEF,237,KV_UNDEF,237,KV_UNDEF,21,KV_UNDEF,250,KV_UNDEF,250,KV_UNDEF,255,KV_UNDEF
++epoll_ctl_old,PNR,KV_UNDEF,214,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++epoll_pwait,319,KV_UNDEF,281,KV_UNDEF,281,KV_UNDEF,346,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,315,KV_UNDEF,313,KV_UNDEF,272,KV_UNDEF,276,KV_UNDEF,297,KV_UNDEF,297,KV_UNDEF,303,KV_UNDEF,303,KV_UNDEF,22,KV_UNDEF,312,KV_UNDEF,312,KV_UNDEF,319,KV_UNDEF
++epoll_pwait2,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF,441,KV_UNDEF
++epoll_wait,256,KV_UNDEF,232,KV_UNDEF,232,KV_UNDEF,252,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,251,KV_UNDEF,250,KV_UNDEF,209,KV_UNDEF,209,KV_UNDEF,226,KV_UNDEF,226,KV_UNDEF,238,KV_UNDEF,238,KV_UNDEF,PNR,KV_UNDEF,251,KV_UNDEF,251,KV_UNDEF,256,KV_UNDEF
++epoll_wait_old,PNR,KV_UNDEF,215,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++eventfd,323,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,351,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,319,KV_UNDEF,319,KV_UNDEF,278,KV_UNDEF,282,KV_UNDEF,304,KV_UNDEF,304,KV_UNDEF,307,KV_UNDEF,307,KV_UNDEF,PNR,KV_UNDEF,318,KV_UNDEF,318,KV_UNDEF,323,KV_UNDEF
++eventfd2,328,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,356,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,324,KV_UNDEF,325,KV_UNDEF,284,KV_UNDEF,288,KV_UNDEF,310,KV_UNDEF,310,KV_UNDEF,314,KV_UNDEF,314,KV_UNDEF,19,KV_UNDEF,323,KV_UNDEF,323,KV_UNDEF,328,KV_UNDEF
++execve,11,KV_UNDEF,59,KV_UNDEF,520,KV_UNDEF,11,KV_UNDEF,221,KV_UNDEF,221,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,221,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF
++execveat,358,KV_UNDEF,322,KV_UNDEF,545,KV_UNDEF,387,KV_UNDEF,281,KV_UNDEF,281,KV_UNDEF,355,KV_UNDEF,356,KV_UNDEF,316,KV_UNDEF,320,KV_UNDEF,342,KV_UNDEF,342,KV_UNDEF,362,KV_UNDEF,362,KV_UNDEF,281,KV_UNDEF,354,KV_UNDEF,354,KV_UNDEF,376,KV_UNDEF
++exit,1,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,1,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,58,KV_UNDEF,58,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,93,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF
++exit_group,252,KV_UNDEF,231,KV_UNDEF,231,KV_UNDEF,248,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,247,KV_UNDEF,246,KV_UNDEF,205,KV_UNDEF,205,KV_UNDEF,222,KV_UNDEF,222,KV_UNDEF,234,KV_UNDEF,234,KV_UNDEF,94,KV_UNDEF,248,KV_UNDEF,248,KV_UNDEF,252,KV_UNDEF
++faccessat,307,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,334,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,300,KV_UNDEF,300,KV_UNDEF,259,KV_UNDEF,263,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,298,KV_UNDEF,298,KV_UNDEF,48,KV_UNDEF,300,KV_UNDEF,300,KV_UNDEF,307,KV_UNDEF
++faccessat2,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF,439,KV_UNDEF
++fadvise64,250,KV_UNDEF,221,KV_UNDEF,221,KV_UNDEF,PNR,KV_UNDEF,223,KV_UNDEF,223,KV_UNDEF,246,KV_UNDEF,254,KV_UNDEF,215,KV_UNDEF,216,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,233,KV_UNDEF,233,KV_UNDEF,223,KV_UNDEF,253,KV_UNDEF,253,KV_UNDEF,250,KV_UNDEF
++fadvise64_64,272,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,267,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,236,KV_UNDEF,236,KV_UNDEF,254,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,264,KV_UNDEF,PNR,KV_UNDEF,272,KV_UNDEF
++fallocate,324,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,352,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,320,KV_UNDEF,320,KV_UNDEF,279,KV_UNDEF,283,KV_UNDEF,305,KV_UNDEF,305,KV_UNDEF,309,KV_UNDEF,309,KV_UNDEF,47,KV_UNDEF,314,KV_UNDEF,314,KV_UNDEF,324,KV_UNDEF
++fanotify_init,338,KV_UNDEF,300,KV_UNDEF,300,KV_UNDEF,367,KV_UNDEF,262,KV_UNDEF,262,KV_UNDEF,337,KV_UNDEF,336,KV_UNDEF,295,KV_UNDEF,300,KV_UNDEF,322,KV_UNDEF,322,KV_UNDEF,323,KV_UNDEF,323,KV_UNDEF,262,KV_UNDEF,332,KV_UNDEF,332,KV_UNDEF,337,KV_UNDEF
++fanotify_mark,339,KV_UNDEF,301,KV_UNDEF,301,KV_UNDEF,368,KV_UNDEF,263,KV_UNDEF,263,KV_UNDEF,338,KV_UNDEF,337,KV_UNDEF,296,KV_UNDEF,301,KV_UNDEF,323,KV_UNDEF,323,KV_UNDEF,324,KV_UNDEF,324,KV_UNDEF,263,KV_UNDEF,333,KV_UNDEF,333,KV_UNDEF,338,KV_UNDEF
++fchdir,133,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,133,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,50,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF
++fchmod,94,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,94,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,52,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF
++fchmodat,306,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,333,KV_UNDEF,53,KV_UNDEF,53,KV_UNDEF,299,KV_UNDEF,299,KV_UNDEF,258,KV_UNDEF,262,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,297,KV_UNDEF,297,KV_UNDEF,53,KV_UNDEF,299,KV_UNDEF,299,KV_UNDEF,306,KV_UNDEF
++fchown,95,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,95,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,55,KV_UNDEF,95,KV_UNDEF,207,KV_UNDEF,95,KV_UNDEF
++fchown32,207,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,207,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,207,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,207,KV_UNDEF,PNR,KV_UNDEF,207,KV_UNDEF
++fchownat,298,KV_UNDEF,260,KV_UNDEF,260,KV_UNDEF,325,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,291,KV_UNDEF,291,KV_UNDEF,250,KV_UNDEF,254,KV_UNDEF,278,KV_UNDEF,278,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,54,KV_UNDEF,291,KV_UNDEF,291,KV_UNDEF,298,KV_UNDEF
++fcntl,55,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,55,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,25,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF,55,KV_UNDEF
++fcntl64,221,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,221,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,239,KV_UNDEF,220,KV_UNDEF,PNR,KV_UNDEF,212,KV_UNDEF,202,KV_UNDEF,202,KV_UNDEF,204,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,221,KV_UNDEF,PNR,KV_UNDEF,221,KV_UNDEF
++fdatasync,148,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,148,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,148,KV_UNDEF,152,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,83,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF
++fgetxattr,231,KV_UNDEF,193,KV_UNDEF,193,KV_UNDEF,231,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,228,KV_UNDEF,229,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,214,KV_UNDEF,214,KV_UNDEF,10,KV_UNDEF,229,KV_UNDEF,229,KV_UNDEF,231,KV_UNDEF
++finit_module,350,KV_UNDEF,313,KV_UNDEF,313,KV_UNDEF,379,KV_UNDEF,273,KV_UNDEF,273,KV_UNDEF,348,KV_UNDEF,348,KV_UNDEF,307,KV_UNDEF,312,KV_UNDEF,333,KV_UNDEF,333,KV_UNDEF,353,KV_UNDEF,353,KV_UNDEF,273,KV_UNDEF,344,KV_UNDEF,344,KV_UNDEF,368,KV_UNDEF
++flistxattr,234,KV_UNDEF,196,KV_UNDEF,196,KV_UNDEF,234,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,231,KV_UNDEF,232,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,246,KV_UNDEF,246,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,13,KV_UNDEF,232,KV_UNDEF,232,KV_UNDEF,234,KV_UNDEF
++flock,143,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,143,KV_UNDEF,32,KV_UNDEF,32,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,32,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF
++fork,2,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,2,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,56,KV_UNDEF,56,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,PNR,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF
++fremovexattr,237,KV_UNDEF,199,KV_UNDEF,199,KV_UNDEF,237,KV_UNDEF,16,KV_UNDEF,16,KV_UNDEF,234,KV_UNDEF,235,KV_UNDEF,191,KV_UNDEF,191,KV_UNDEF,249,KV_UNDEF,249,KV_UNDEF,220,KV_UNDEF,220,KV_UNDEF,16,KV_UNDEF,235,KV_UNDEF,235,KV_UNDEF,237,KV_UNDEF
++fsconfig,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF,431,KV_UNDEF
++fsetxattr,228,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,228,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,225,KV_UNDEF,226,KV_UNDEF,182,KV_UNDEF,182,KV_UNDEF,240,KV_UNDEF,240,KV_UNDEF,211,KV_UNDEF,211,KV_UNDEF,7,KV_UNDEF,226,KV_UNDEF,226,KV_UNDEF,228,KV_UNDEF
++fsmount,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF,432,KV_UNDEF
++fsopen,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF,430,KV_UNDEF
++fspick,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF,433,KV_UNDEF
++fstat,108,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,108,KV_UNDEF,80,KV_UNDEF,PNR,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,28,KV_UNDEF,28,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,80,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF
++fstat64,197,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,197,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,197,KV_UNDEF,215,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,197,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,197,KV_UNDEF,PNR,KV_UNDEF,197,KV_UNDEF
++fstatat64,300,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,327,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,293,KV_UNDEF,293,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,280,KV_UNDEF,280,KV_UNDEF,291,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,293,KV_UNDEF,PNR,KV_UNDEF,300,KV_UNDEF
++fstatfs,100,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,100,KV_UNDEF,44,KV_UNDEF,44,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,44,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF
++fstatfs64,269,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,267,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,264,KV_UNDEF,256,KV_UNDEF,PNR,KV_UNDEF,218,KV_UNDEF,299,KV_UNDEF,299,KV_UNDEF,253,KV_UNDEF,253,KV_UNDEF,PNR,KV_UNDEF,266,KV_UNDEF,266,KV_UNDEF,269,KV_UNDEF
++fsync,118,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,118,KV_UNDEF,82,KV_UNDEF,82,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,82,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF
++ftime,35,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,35,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,35,KV_UNDEF,35,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++ftruncate,93,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,93,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,46,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF
++ftruncate64,194,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,194,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,194,KV_UNDEF,212,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF,200,KV_UNDEF,194,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,194,KV_UNDEF,PNR,KV_UNDEF,194,KV_UNDEF
++futex,240,KV_UNDEF,202,KV_UNDEF,202,KV_UNDEF,240,KV_UNDEF,98,KV_UNDEF,98,KV_UNDEF,235,KV_UNDEF,238,KV_UNDEF,194,KV_UNDEF,194,KV_UNDEF,210,KV_UNDEF,210,KV_UNDEF,221,KV_UNDEF,221,KV_UNDEF,98,KV_UNDEF,238,KV_UNDEF,238,KV_UNDEF,240,KV_UNDEF
++futex_time64,422,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF,422,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF,422,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF,PNR,KV_UNDEF,422,KV_UNDEF
++futex_waitv,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF,449,KV_UNDEF
++futimesat,299,KV_UNDEF,261,KV_UNDEF,261,KV_UNDEF,326,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,251,KV_UNDEF,255,KV_UNDEF,279,KV_UNDEF,279,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,PNR,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,299,KV_UNDEF
++getcpu,318,KV_UNDEF,309,KV_UNDEF,309,KV_UNDEF,345,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,314,KV_UNDEF,312,KV_UNDEF,271,KV_UNDEF,275,KV_UNDEF,296,KV_UNDEF,296,KV_UNDEF,302,KV_UNDEF,302,KV_UNDEF,168,KV_UNDEF,311,KV_UNDEF,311,KV_UNDEF,318,KV_UNDEF
++getcwd,183,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,183,KV_UNDEF,17,KV_UNDEF,17,KV_UNDEF,183,KV_UNDEF,203,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,182,KV_UNDEF,182,KV_UNDEF,17,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF
++getdents,141,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,141,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,PNR,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF
++getdents64,220,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,220,KV_UNDEF,219,KV_UNDEF,308,KV_UNDEF,299,KV_UNDEF,201,KV_UNDEF,201,KV_UNDEF,202,KV_UNDEF,202,KV_UNDEF,61,KV_UNDEF,220,KV_UNDEF,220,KV_UNDEF,220,KV_UNDEF
++getegid,50,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,50,KV_UNDEF,177,KV_UNDEF,177,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,177,KV_UNDEF,50,KV_UNDEF,202,KV_UNDEF,50,KV_UNDEF
++getegid32,202,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,202,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,202,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,202,KV_UNDEF,PNR,KV_UNDEF,202,KV_UNDEF
++geteuid,49,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,49,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,175,KV_UNDEF,49,KV_UNDEF,201,KV_UNDEF,49,KV_UNDEF
++geteuid32,201,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,201,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,201,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,201,KV_UNDEF,PNR,KV_UNDEF,201,KV_UNDEF
++getgid,47,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,47,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,176,KV_UNDEF,47,KV_UNDEF,200,KV_UNDEF,47,KV_UNDEF
++getgid32,200,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF
++getgroups,80,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,80,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,113,KV_UNDEF,113,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,158,KV_UNDEF,80,KV_UNDEF,205,KV_UNDEF,80,KV_UNDEF
++getgroups32,205,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,205,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,205,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,205,KV_UNDEF,PNR,KV_UNDEF,205,KV_UNDEF
++getitimer,105,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,105,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,35,KV_UNDEF,35,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,102,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF
++get_kernel_syms,130,KV_UNDEF,177,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,170,KV_UNDEF,170,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,PNR,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,PNR,KV_UNDEF
++get_mempolicy,275,KV_UNDEF,239,KV_UNDEF,239,KV_UNDEF,320,KV_UNDEF,236,KV_UNDEF,236,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,228,KV_UNDEF,232,KV_UNDEF,261,KV_UNDEF,261,KV_UNDEF,260,KV_UNDEF,260,KV_UNDEF,236,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,275,KV_UNDEF
++getpagesize,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,166,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++getpeername,368,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,287,KV_UNDEF,205,KV_UNDEF,205,KV_UNDEF,365,KV_UNDEF,171,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,53,KV_UNDEF,53,KV_UNDEF,332,KV_UNDEF,332,KV_UNDEF,205,KV_UNDEF,368,KV_UNDEF,368,KV_UNDEF,346,KV_UNDEF
++getpgid,132,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,132,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,155,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF
++getpgrp,65,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,65,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,109,KV_UNDEF,109,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,PNR,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF
++getpid,20,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,20,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,172,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF,20,KV_UNDEF
++getpmsg,188,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,188,KV_UNDEF,208,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,PNR,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,PNR,KV_UNDEF
++getppid,64,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,64,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,173,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF
++getpriority,96,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,96,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,137,KV_UNDEF,137,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,141,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF
++getrandom,355,KV_UNDEF,318,KV_UNDEF,318,KV_UNDEF,384,KV_UNDEF,278,KV_UNDEF,278,KV_UNDEF,352,KV_UNDEF,353,KV_UNDEF,313,KV_UNDEF,317,KV_UNDEF,339,KV_UNDEF,339,KV_UNDEF,359,KV_UNDEF,359,KV_UNDEF,278,KV_UNDEF,349,KV_UNDEF,349,KV_UNDEF,373,KV_UNDEF
++getresgid,171,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,171,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,171,KV_UNDEF,191,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,171,KV_UNDEF,171,KV_UNDEF,170,KV_UNDEF,170,KV_UNDEF,150,KV_UNDEF,171,KV_UNDEF,211,KV_UNDEF,171,KV_UNDEF
++getresgid32,211,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,211,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,211,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,211,KV_UNDEF,PNR,KV_UNDEF,211,KV_UNDEF
++getresuid,165,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,165,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,165,KV_UNDEF,186,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,148,KV_UNDEF,165,KV_UNDEF,209,KV_UNDEF,165,KV_UNDEF
++getresuid32,209,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,209,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,209,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,209,KV_UNDEF,PNR,KV_UNDEF,209,KV_UNDEF
++getrlimit,76,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,PNR,KV_UNDEF,163,KV_UNDEF,PNR,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,163,KV_UNDEF,76,KV_UNDEF,191,KV_UNDEF,76,KV_UNDEF
++get_robust_list,312,KV_UNDEF,274,KV_UNDEF,531,KV_UNDEF,339,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,305,KV_UNDEF,310,KV_UNDEF,269,KV_UNDEF,273,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,299,KV_UNDEF,299,KV_UNDEF,100,KV_UNDEF,305,KV_UNDEF,305,KV_UNDEF,312,KV_UNDEF
++getrusage,77,KV_UNDEF,98,KV_UNDEF,98,KV_UNDEF,77,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,165,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF
++getsid,147,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,147,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,147,KV_UNDEF,151,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,156,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF
++getsockname,367,KV_UNDEF,51,KV_UNDEF,51,KV_UNDEF,286,KV_UNDEF,204,KV_UNDEF,204,KV_UNDEF,364,KV_UNDEF,172,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,44,KV_UNDEF,44,KV_UNDEF,331,KV_UNDEF,331,KV_UNDEF,204,KV_UNDEF,367,KV_UNDEF,367,KV_UNDEF,345,KV_UNDEF
++getsockopt,365,KV_UNDEF,55,KV_UNDEF,542,KV_UNDEF,295,KV_UNDEF,209,KV_UNDEF,209,KV_UNDEF,362,KV_UNDEF,173,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,182,KV_UNDEF,182,KV_UNDEF,340,KV_UNDEF,340,KV_UNDEF,209,KV_UNDEF,365,KV_UNDEF,365,KV_UNDEF,354,KV_UNDEF
++get_thread_area,244,KV_UNDEF,211,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,333,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++gettid,224,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,224,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF,221,KV_UNDEF,222,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF,206,KV_UNDEF,206,KV_UNDEF,207,KV_UNDEF,207,KV_UNDEF,178,KV_UNDEF,236,KV_UNDEF,236,KV_UNDEF,224,KV_UNDEF
++gettimeofday,78,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,78,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,169,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF
++get_tls,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983046,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++getuid,24,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,24,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,174,KV_UNDEF,24,KV_UNDEF,199,KV_UNDEF,24,KV_UNDEF
++getuid32,199,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF
++getxattr,229,KV_UNDEF,191,KV_UNDEF,191,KV_UNDEF,229,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,226,KV_UNDEF,227,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,212,KV_UNDEF,212,KV_UNDEF,8,KV_UNDEF,227,KV_UNDEF,227,KV_UNDEF,229,KV_UNDEF
++gtty,32,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,32,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,32,KV_UNDEF,32,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++idle,112,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,112,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,PNR,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,PNR,KV_UNDEF
++init_module,128,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,128,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,105,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF
++inotify_add_watch,292,KV_UNDEF,254,KV_UNDEF,254,KV_UNDEF,317,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,244,KV_UNDEF,248,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,27,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,291,KV_UNDEF
++inotify_init,291,KV_UNDEF,253,KV_UNDEF,253,KV_UNDEF,316,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,243,KV_UNDEF,247,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,PNR,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,290,KV_UNDEF
++inotify_init1,332,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,360,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,328,KV_UNDEF,329,KV_UNDEF,288,KV_UNDEF,292,KV_UNDEF,314,KV_UNDEF,314,KV_UNDEF,318,KV_UNDEF,318,KV_UNDEF,26,KV_UNDEF,324,KV_UNDEF,324,KV_UNDEF,332,KV_UNDEF
++inotify_rm_watch,293,KV_UNDEF,255,KV_UNDEF,255,KV_UNDEF,318,KV_UNDEF,28,KV_UNDEF,28,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,245,KV_UNDEF,249,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,277,KV_UNDEF,277,KV_UNDEF,28,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,292,KV_UNDEF
++io_cancel,249,KV_UNDEF,210,KV_UNDEF,210,KV_UNDEF,247,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,245,KV_UNDEF,245,KV_UNDEF,204,KV_UNDEF,204,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF,231,KV_UNDEF,231,KV_UNDEF,3,KV_UNDEF,247,KV_UNDEF,247,KV_UNDEF,249,KV_UNDEF
++ioctl,54,KV_UNDEF,16,KV_UNDEF,514,KV_UNDEF,54,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,29,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF,54,KV_UNDEF
++io_destroy,246,KV_UNDEF,207,KV_UNDEF,207,KV_UNDEF,244,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,242,KV_UNDEF,242,KV_UNDEF,201,KV_UNDEF,201,KV_UNDEF,216,KV_UNDEF,216,KV_UNDEF,228,KV_UNDEF,228,KV_UNDEF,1,KV_UNDEF,244,KV_UNDEF,244,KV_UNDEF,246,KV_UNDEF
++io_getevents,247,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,245,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,202,KV_UNDEF,202,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,229,KV_UNDEF,229,KV_UNDEF,4,KV_UNDEF,245,KV_UNDEF,245,KV_UNDEF,247,KV_UNDEF
++ioperm,101,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,101,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,101,KV_UNDEF,101,KV_UNDEF,PNR,KV_UNDEF,101,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++io_pgetevents,385,KV_UNDEF,333,KV_UNDEF,333,KV_UNDEF,399,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,PNR,KV_UNDEF,368,KV_UNDEF,328,KV_UNDEF,332,KV_UNDEF,350,KV_UNDEF,350,KV_UNDEF,388,KV_UNDEF,388,KV_UNDEF,292,KV_UNDEF,382,KV_UNDEF,382,KV_UNDEF,PNR,KV_UNDEF
++io_pgetevents_time64,416,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF,416,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF,416,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF,PNR,KV_UNDEF,416,KV_UNDEF
++iopl,110,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,110,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++ioprio_get,290,KV_UNDEF,252,KV_UNDEF,252,KV_UNDEF,315,KV_UNDEF,31,KV_UNDEF,31,KV_UNDEF,283,KV_UNDEF,315,KV_UNDEF,274,KV_UNDEF,278,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,274,KV_UNDEF,274,KV_UNDEF,31,KV_UNDEF,283,KV_UNDEF,283,KV_UNDEF,289,KV_UNDEF
++ioprio_set,289,KV_UNDEF,251,KV_UNDEF,251,KV_UNDEF,314,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,282,KV_UNDEF,314,KV_UNDEF,273,KV_UNDEF,277,KV_UNDEF,267,KV_UNDEF,267,KV_UNDEF,273,KV_UNDEF,273,KV_UNDEF,30,KV_UNDEF,282,KV_UNDEF,282,KV_UNDEF,288,KV_UNDEF
++io_setup,245,KV_UNDEF,206,KV_UNDEF,543,KV_UNDEF,243,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,200,KV_UNDEF,200,KV_UNDEF,215,KV_UNDEF,215,KV_UNDEF,227,KV_UNDEF,227,KV_UNDEF,0,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,245,KV_UNDEF
++io_submit,248,KV_UNDEF,209,KV_UNDEF,544,KV_UNDEF,246,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,244,KV_UNDEF,244,KV_UNDEF,203,KV_UNDEF,203,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF,230,KV_UNDEF,230,KV_UNDEF,2,KV_UNDEF,246,KV_UNDEF,246,KV_UNDEF,248,KV_UNDEF
++io_uring_enter,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF,426,KV_UNDEF
++io_uring_register,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF,427,KV_UNDEF
++io_uring_setup,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF,425,KV_UNDEF
++ipc,117,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,PNR,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF
++kcmp,349,KV_UNDEF,312,KV_UNDEF,312,KV_UNDEF,378,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,347,KV_UNDEF,347,KV_UNDEF,306,KV_UNDEF,311,KV_UNDEF,332,KV_UNDEF,332,KV_UNDEF,354,KV_UNDEF,354,KV_UNDEF,272,KV_UNDEF,343,KV_UNDEF,343,KV_UNDEF,367,KV_UNDEF
++kexec_file_load,PNR,KV_UNDEF,320,KV_UNDEF,320,KV_UNDEF,401,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,355,KV_UNDEF,355,KV_UNDEF,382,KV_UNDEF,382,KV_UNDEF,294,KV_UNDEF,381,KV_UNDEF,381,KV_UNDEF,PNR,KV_UNDEF
++kexec_load,283,KV_UNDEF,246,KV_UNDEF,528,KV_UNDEF,347,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,313,KV_UNDEF,311,KV_UNDEF,270,KV_UNDEF,274,KV_UNDEF,300,KV_UNDEF,300,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,104,KV_UNDEF,277,KV_UNDEF,277,KV_UNDEF,283,KV_UNDEF
++keyctl,288,KV_UNDEF,250,KV_UNDEF,250,KV_UNDEF,311,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF,281,KV_UNDEF,282,KV_UNDEF,241,KV_UNDEF,245,KV_UNDEF,266,KV_UNDEF,266,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,219,KV_UNDEF,280,KV_UNDEF,280,KV_UNDEF,287,KV_UNDEF
++kill,37,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,37,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,129,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF
++landlock_add_rule,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF,445,KV_UNDEF
++landlock_create_ruleset,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF,444,KV_UNDEF
++landlock_restrict_self,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF,446,KV_UNDEF
++lchown,16,KV_UNDEF,94,KV_UNDEF,94,KV_UNDEF,16,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,182,KV_UNDEF,16,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,16,KV_UNDEF,16,KV_UNDEF,16,KV_UNDEF,16,KV_UNDEF,PNR,KV_UNDEF,16,KV_UNDEF,198,KV_UNDEF,16,KV_UNDEF
++lchown32,198,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,212,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF
++lgetxattr,230,KV_UNDEF,192,KV_UNDEF,192,KV_UNDEF,230,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,227,KV_UNDEF,228,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,242,KV_UNDEF,242,KV_UNDEF,213,KV_UNDEF,213,KV_UNDEF,9,KV_UNDEF,228,KV_UNDEF,228,KV_UNDEF,230,KV_UNDEF
++link,9,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,9,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,84,KV_UNDEF,84,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,PNR,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF
++linkat,303,KV_UNDEF,265,KV_UNDEF,265,KV_UNDEF,330,KV_UNDEF,37,KV_UNDEF,37,KV_UNDEF,296,KV_UNDEF,296,KV_UNDEF,255,KV_UNDEF,259,KV_UNDEF,283,KV_UNDEF,283,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,37,KV_UNDEF,296,KV_UNDEF,296,KV_UNDEF,303,KV_UNDEF
++listen,363,KV_UNDEF,50,KV_UNDEF,50,KV_UNDEF,284,KV_UNDEF,201,KV_UNDEF,201,KV_UNDEF,360,KV_UNDEF,174,KV_UNDEF,49,KV_UNDEF,49,KV_UNDEF,32,KV_UNDEF,32,KV_UNDEF,329,KV_UNDEF,329,KV_UNDEF,201,KV_UNDEF,363,KV_UNDEF,363,KV_UNDEF,343,KV_UNDEF
++listxattr,232,KV_UNDEF,194,KV_UNDEF,194,KV_UNDEF,232,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,229,KV_UNDEF,230,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,244,KV_UNDEF,244,KV_UNDEF,215,KV_UNDEF,215,KV_UNDEF,11,KV_UNDEF,230,KV_UNDEF,230,KV_UNDEF,232,KV_UNDEF
++llistxattr,233,KV_UNDEF,195,KV_UNDEF,195,KV_UNDEF,233,KV_UNDEF,12,KV_UNDEF,12,KV_UNDEF,230,KV_UNDEF,231,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,245,KV_UNDEF,245,KV_UNDEF,216,KV_UNDEF,216,KV_UNDEF,12,KV_UNDEF,231,KV_UNDEF,231,KV_UNDEF,233,KV_UNDEF
++_llseek,140,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,140,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,PNR,KV_UNDEF,140,KV_UNDEF,PNR,KV_UNDEF,140,KV_UNDEF
++lock,53,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,53,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,53,KV_UNDEF,53,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++lookup_dcookie,253,KV_UNDEF,212,KV_UNDEF,212,KV_UNDEF,249,KV_UNDEF,18,KV_UNDEF,18,KV_UNDEF,248,KV_UNDEF,247,KV_UNDEF,206,KV_UNDEF,206,KV_UNDEF,223,KV_UNDEF,223,KV_UNDEF,235,KV_UNDEF,235,KV_UNDEF,18,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,253,KV_UNDEF
++lremovexattr,236,KV_UNDEF,198,KV_UNDEF,198,KV_UNDEF,236,KV_UNDEF,15,KV_UNDEF,15,KV_UNDEF,233,KV_UNDEF,234,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,248,KV_UNDEF,248,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF,15,KV_UNDEF,234,KV_UNDEF,234,KV_UNDEF,236,KV_UNDEF
++lseek,19,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,19,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,8,KV_UNDEF,8,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,62,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF
++lsetxattr,227,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,227,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,224,KV_UNDEF,225,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,239,KV_UNDEF,239,KV_UNDEF,210,KV_UNDEF,210,KV_UNDEF,6,KV_UNDEF,225,KV_UNDEF,225,KV_UNDEF,227,KV_UNDEF
++lstat,107,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,107,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,6,KV_UNDEF,6,KV_UNDEF,84,KV_UNDEF,84,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,PNR,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF
++lstat64,196,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,196,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,196,KV_UNDEF,214,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF,198,KV_UNDEF,196,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,196,KV_UNDEF,PNR,KV_UNDEF,196,KV_UNDEF
++madvise,219,KV_UNDEF,28,KV_UNDEF,28,KV_UNDEF,220,KV_UNDEF,233,KV_UNDEF,233,KV_UNDEF,238,KV_UNDEF,218,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,205,KV_UNDEF,205,KV_UNDEF,233,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF
++mbind,274,KV_UNDEF,237,KV_UNDEF,237,KV_UNDEF,319,KV_UNDEF,235,KV_UNDEF,235,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,227,KV_UNDEF,231,KV_UNDEF,260,KV_UNDEF,260,KV_UNDEF,259,KV_UNDEF,259,KV_UNDEF,235,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,274,KV_UNDEF
++membarrier,375,KV_UNDEF,324,KV_UNDEF,324,KV_UNDEF,389,KV_UNDEF,283,KV_UNDEF,283,KV_UNDEF,374,KV_UNDEF,358,KV_UNDEF,318,KV_UNDEF,322,KV_UNDEF,343,KV_UNDEF,343,KV_UNDEF,365,KV_UNDEF,365,KV_UNDEF,283,KV_UNDEF,356,KV_UNDEF,356,KV_UNDEF,378,KV_UNDEF
++memfd_create,356,KV_UNDEF,319,KV_UNDEF,319,KV_UNDEF,385,KV_UNDEF,279,KV_UNDEF,279,KV_UNDEF,353,KV_UNDEF,354,KV_UNDEF,314,KV_UNDEF,318,KV_UNDEF,340,KV_UNDEF,340,KV_UNDEF,360,KV_UNDEF,360,KV_UNDEF,279,KV_UNDEF,350,KV_UNDEF,350,KV_UNDEF,374,KV_UNDEF
++memfd_secret,447,KV_UNDEF,447,KV_UNDEF,447,KV_UNDEF,PNR,KV_UNDEF,447,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,447,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++migrate_pages,294,KV_UNDEF,256,KV_UNDEF,256,KV_UNDEF,400,KV_UNDEF,238,KV_UNDEF,238,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,246,KV_UNDEF,250,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,258,KV_UNDEF,258,KV_UNDEF,238,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,294,KV_UNDEF
++mincore,218,KV_UNDEF,27,KV_UNDEF,27,KV_UNDEF,219,KV_UNDEF,232,KV_UNDEF,232,KV_UNDEF,237,KV_UNDEF,217,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,206,KV_UNDEF,206,KV_UNDEF,232,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF
++mkdir,39,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,39,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,PNR,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF
++mkdirat,296,KV_UNDEF,258,KV_UNDEF,258,KV_UNDEF,323,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,248,KV_UNDEF,252,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,34,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,296,KV_UNDEF
++mknod,14,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,14,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,PNR,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF
++mknodat,297,KV_UNDEF,259,KV_UNDEF,259,KV_UNDEF,324,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,249,KV_UNDEF,253,KV_UNDEF,277,KV_UNDEF,277,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,33,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,297,KV_UNDEF
++mlock,150,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,150,KV_UNDEF,228,KV_UNDEF,228,KV_UNDEF,150,KV_UNDEF,154,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,228,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF
++mlock2,376,KV_UNDEF,325,KV_UNDEF,325,KV_UNDEF,390,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,375,KV_UNDEF,359,KV_UNDEF,319,KV_UNDEF,323,KV_UNDEF,345,KV_UNDEF,345,KV_UNDEF,378,KV_UNDEF,378,KV_UNDEF,284,KV_UNDEF,374,KV_UNDEF,374,KV_UNDEF,379,KV_UNDEF
++mlockall,152,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,152,KV_UNDEF,230,KV_UNDEF,230,KV_UNDEF,152,KV_UNDEF,156,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,230,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF
++mmap,90,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,PNR,KV_UNDEF,222,KV_UNDEF,222,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,9,KV_UNDEF,9,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,222,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF,90,KV_UNDEF
++mmap2,192,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,192,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,192,KV_UNDEF,210,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,192,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,192,KV_UNDEF,PNR,KV_UNDEF,192,KV_UNDEF
++modify_ldt,123,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,123,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,123,KV_UNDEF,123,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++mount,21,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,21,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,40,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF
++mount_setattr,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF,442,KV_UNDEF
++move_mount,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF,429,KV_UNDEF
++move_pages,317,KV_UNDEF,279,KV_UNDEF,533,KV_UNDEF,344,KV_UNDEF,239,KV_UNDEF,239,KV_UNDEF,310,KV_UNDEF,308,KV_UNDEF,267,KV_UNDEF,271,KV_UNDEF,295,KV_UNDEF,295,KV_UNDEF,301,KV_UNDEF,301,KV_UNDEF,239,KV_UNDEF,310,KV_UNDEF,310,KV_UNDEF,317,KV_UNDEF
++mprotect,125,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,125,KV_UNDEF,226,KV_UNDEF,226,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,226,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF
++mpx,56,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,56,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,56,KV_UNDEF,56,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++mq_getsetattr,282,KV_UNDEF,245,KV_UNDEF,245,KV_UNDEF,279,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,235,KV_UNDEF,239,KV_UNDEF,234,KV_UNDEF,234,KV_UNDEF,267,KV_UNDEF,267,KV_UNDEF,185,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,282,KV_UNDEF
++mq_notify,281,KV_UNDEF,244,KV_UNDEF,527,KV_UNDEF,278,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,234,KV_UNDEF,238,KV_UNDEF,233,KV_UNDEF,233,KV_UNDEF,266,KV_UNDEF,266,KV_UNDEF,184,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,281,KV_UNDEF
++mq_open,277,KV_UNDEF,240,KV_UNDEF,240,KV_UNDEF,274,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,230,KV_UNDEF,234,KV_UNDEF,229,KV_UNDEF,229,KV_UNDEF,262,KV_UNDEF,262,KV_UNDEF,180,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,277,KV_UNDEF
++mq_timedreceive,280,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,277,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,274,KV_UNDEF,274,KV_UNDEF,233,KV_UNDEF,237,KV_UNDEF,232,KV_UNDEF,232,KV_UNDEF,265,KV_UNDEF,265,KV_UNDEF,183,KV_UNDEF,274,KV_UNDEF,274,KV_UNDEF,280,KV_UNDEF
++mq_timedreceive_time64,419,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF,419,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF,419,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF,PNR,KV_UNDEF,419,KV_UNDEF
++mq_timedsend,279,KV_UNDEF,242,KV_UNDEF,242,KV_UNDEF,276,KV_UNDEF,182,KV_UNDEF,182,KV_UNDEF,273,KV_UNDEF,273,KV_UNDEF,232,KV_UNDEF,236,KV_UNDEF,231,KV_UNDEF,231,KV_UNDEF,264,KV_UNDEF,264,KV_UNDEF,182,KV_UNDEF,273,KV_UNDEF,273,KV_UNDEF,279,KV_UNDEF
++mq_timedsend_time64,418,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF,418,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF,418,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF,PNR,KV_UNDEF,418,KV_UNDEF
++mq_unlink,278,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,275,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,231,KV_UNDEF,235,KV_UNDEF,230,KV_UNDEF,230,KV_UNDEF,263,KV_UNDEF,263,KV_UNDEF,181,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,278,KV_UNDEF
++mremap,163,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,163,KV_UNDEF,216,KV_UNDEF,216,KV_UNDEF,163,KV_UNDEF,167,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,216,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF
++msgctl,402,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,304,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,402,KV_UNDEF,402,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,191,KV_UNDEF,191,KV_UNDEF,402,KV_UNDEF,402,KV_UNDEF,187,KV_UNDEF,402,KV_UNDEF,402,KV_UNDEF,402,KV_UNDEF
++msgget,399,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,303,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,399,KV_UNDEF,399,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,399,KV_UNDEF,399,KV_UNDEF,186,KV_UNDEF,399,KV_UNDEF,399,KV_UNDEF,399,KV_UNDEF
++msgrcv,401,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,302,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,401,KV_UNDEF,401,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,401,KV_UNDEF,401,KV_UNDEF,188,KV_UNDEF,401,KV_UNDEF,401,KV_UNDEF,401,KV_UNDEF
++msgsnd,400,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,301,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,400,KV_UNDEF,400,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,400,KV_UNDEF,400,KV_UNDEF,189,KV_UNDEF,400,KV_UNDEF,400,KV_UNDEF,400,KV_UNDEF
++msync,144,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,144,KV_UNDEF,227,KV_UNDEF,227,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,227,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF
++multiplexer,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,201,KV_UNDEF,201,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++munlock,151,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,151,KV_UNDEF,229,KV_UNDEF,229,KV_UNDEF,151,KV_UNDEF,155,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,229,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF
++munlockall,153,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,153,KV_UNDEF,231,KV_UNDEF,231,KV_UNDEF,153,KV_UNDEF,157,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,231,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF
++munmap,91,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,91,KV_UNDEF,215,KV_UNDEF,215,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,11,KV_UNDEF,11,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,215,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF,91,KV_UNDEF
++name_to_handle_at,341,KV_UNDEF,303,KV_UNDEF,303,KV_UNDEF,370,KV_UNDEF,264,KV_UNDEF,264,KV_UNDEF,340,KV_UNDEF,339,KV_UNDEF,298,KV_UNDEF,303,KV_UNDEF,325,KV_UNDEF,325,KV_UNDEF,345,KV_UNDEF,345,KV_UNDEF,264,KV_UNDEF,335,KV_UNDEF,335,KV_UNDEF,359,KV_UNDEF
++nanosleep,162,KV_UNDEF,35,KV_UNDEF,35,KV_UNDEF,162,KV_UNDEF,101,KV_UNDEF,101,KV_UNDEF,162,KV_UNDEF,166,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,101,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF
++newfstatat,PNR,KV_UNDEF,262,KV_UNDEF,262,KV_UNDEF,PNR,KV_UNDEF,79,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,252,KV_UNDEF,256,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,291,KV_UNDEF,79,KV_UNDEF,PNR,KV_UNDEF,293,KV_UNDEF,PNR,KV_UNDEF
++_newselect,142,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,142,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,PNR,KV_UNDEF,142,KV_UNDEF,PNR,KV_UNDEF,142,KV_UNDEF
++nfsservctl,169,KV_UNDEF,180,KV_UNDEF,PNR,KV_UNDEF,169,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,169,KV_UNDEF,189,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,42,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF
++nice,34,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,34,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,PNR,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF
++oldfstat,28,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,28,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,28,KV_UNDEF,28,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,28,KV_UNDEF
++oldlstat,84,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,84,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,84,KV_UNDEF,84,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,84,KV_UNDEF
++oldolduname,59,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,59,KV_UNDEF,59,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++oldstat,18,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,18,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,18,KV_UNDEF,18,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,18,KV_UNDEF
++olduname,109,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,109,KV_UNDEF,109,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,109,KV_UNDEF
++open,5,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,5,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,2,KV_UNDEF,2,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,PNR,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF
++openat,295,KV_UNDEF,257,KV_UNDEF,257,KV_UNDEF,322,KV_UNDEF,56,KV_UNDEF,56,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,247,KV_UNDEF,251,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,56,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,295,KV_UNDEF
++openat2,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF,437,KV_UNDEF
++open_by_handle_at,342,KV_UNDEF,304,KV_UNDEF,304,KV_UNDEF,371,KV_UNDEF,265,KV_UNDEF,265,KV_UNDEF,341,KV_UNDEF,340,KV_UNDEF,299,KV_UNDEF,304,KV_UNDEF,326,KV_UNDEF,326,KV_UNDEF,346,KV_UNDEF,346,KV_UNDEF,265,KV_UNDEF,336,KV_UNDEF,336,KV_UNDEF,360,KV_UNDEF
++open_tree,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF,428,KV_UNDEF
++pause,29,KV_UNDEF,34,KV_UNDEF,34,KV_UNDEF,29,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,33,KV_UNDEF,33,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,PNR,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF
++pciconfig_iobase,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,271,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,200,KV_UNDEF,200,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++pciconfig_read,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,272,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,198,KV_UNDEF,198,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++pciconfig_write,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,273,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF,199,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++perf_event_open,336,KV_UNDEF,298,KV_UNDEF,298,KV_UNDEF,364,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,332,KV_UNDEF,333,KV_UNDEF,292,KV_UNDEF,296,KV_UNDEF,318,KV_UNDEF,318,KV_UNDEF,319,KV_UNDEF,319,KV_UNDEF,241,KV_UNDEF,331,KV_UNDEF,331,KV_UNDEF,336,KV_UNDEF
++personality,136,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,136,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,92,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF
++pidfd_getfd,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF,438,KV_UNDEF
++pidfd_open,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF,434,KV_UNDEF
++pidfd_send_signal,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF,424,KV_UNDEF
++pipe,42,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,42,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,21,KV_UNDEF,21,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,PNR,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF,42,KV_UNDEF
++pipe2,331,KV_UNDEF,293,KV_UNDEF,293,KV_UNDEF,359,KV_UNDEF,59,KV_UNDEF,59,KV_UNDEF,327,KV_UNDEF,328,KV_UNDEF,287,KV_UNDEF,291,KV_UNDEF,313,KV_UNDEF,313,KV_UNDEF,317,KV_UNDEF,317,KV_UNDEF,59,KV_UNDEF,325,KV_UNDEF,325,KV_UNDEF,331,KV_UNDEF
++pivot_root,217,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,218,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,217,KV_UNDEF,216,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,203,KV_UNDEF,203,KV_UNDEF,41,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF,217,KV_UNDEF
++pkey_alloc,381,KV_UNDEF,330,KV_UNDEF,330,KV_UNDEF,395,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,382,KV_UNDEF,364,KV_UNDEF,324,KV_UNDEF,328,KV_UNDEF,352,KV_UNDEF,352,KV_UNDEF,384,KV_UNDEF,384,KV_UNDEF,289,KV_UNDEF,385,KV_UNDEF,385,KV_UNDEF,385,KV_UNDEF
++pkey_free,382,KV_UNDEF,331,KV_UNDEF,331,KV_UNDEF,396,KV_UNDEF,290,KV_UNDEF,290,KV_UNDEF,383,KV_UNDEF,365,KV_UNDEF,325,KV_UNDEF,329,KV_UNDEF,353,KV_UNDEF,353,KV_UNDEF,385,KV_UNDEF,385,KV_UNDEF,290,KV_UNDEF,386,KV_UNDEF,386,KV_UNDEF,386,KV_UNDEF
++pkey_mprotect,380,KV_UNDEF,329,KV_UNDEF,329,KV_UNDEF,394,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,381,KV_UNDEF,363,KV_UNDEF,323,KV_UNDEF,327,KV_UNDEF,351,KV_UNDEF,351,KV_UNDEF,386,KV_UNDEF,386,KV_UNDEF,288,KV_UNDEF,384,KV_UNDEF,384,KV_UNDEF,384,KV_UNDEF
++poll,168,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,168,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,168,KV_UNDEF,188,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,167,KV_UNDEF,167,KV_UNDEF,PNR,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF
++ppoll,309,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,336,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,302,KV_UNDEF,302,KV_UNDEF,261,KV_UNDEF,265,KV_UNDEF,274,KV_UNDEF,274,KV_UNDEF,281,KV_UNDEF,281,KV_UNDEF,73,KV_UNDEF,302,KV_UNDEF,302,KV_UNDEF,309,KV_UNDEF
++ppoll_time64,414,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF,414,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF,414,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF,PNR,KV_UNDEF,414,KV_UNDEF
++prctl,172,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,172,KV_UNDEF,167,KV_UNDEF,167,KV_UNDEF,172,KV_UNDEF,192,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,171,KV_UNDEF,171,KV_UNDEF,167,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF
++pread64,180,KV_UNDEF,17,KV_UNDEF,17,KV_UNDEF,180,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,180,KV_UNDEF,200,KV_UNDEF,16,KV_UNDEF,16,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,67,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF
++preadv,333,KV_UNDEF,295,KV_UNDEF,534,KV_UNDEF,361,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,329,KV_UNDEF,330,KV_UNDEF,289,KV_UNDEF,293,KV_UNDEF,315,KV_UNDEF,315,KV_UNDEF,320,KV_UNDEF,320,KV_UNDEF,69,KV_UNDEF,328,KV_UNDEF,328,KV_UNDEF,333,KV_UNDEF
++preadv2,378,KV_UNDEF,327,KV_UNDEF,546,KV_UNDEF,392,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,377,KV_UNDEF,361,KV_UNDEF,321,KV_UNDEF,325,KV_UNDEF,347,KV_UNDEF,347,KV_UNDEF,380,KV_UNDEF,380,KV_UNDEF,286,KV_UNDEF,376,KV_UNDEF,376,KV_UNDEF,381,KV_UNDEF
++prlimit64,340,KV_UNDEF,302,KV_UNDEF,302,KV_UNDEF,369,KV_UNDEF,261,KV_UNDEF,261,KV_UNDEF,339,KV_UNDEF,338,KV_UNDEF,297,KV_UNDEF,302,KV_UNDEF,321,KV_UNDEF,321,KV_UNDEF,325,KV_UNDEF,325,KV_UNDEF,261,KV_UNDEF,334,KV_UNDEF,334,KV_UNDEF,339,KV_UNDEF
++process_madvise,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF,440,KV_UNDEF
++process_mrelease,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF,448,KV_UNDEF
++process_vm_readv,347,KV_UNDEF,310,KV_UNDEF,539,KV_UNDEF,376,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,345,KV_UNDEF,345,KV_UNDEF,304,KV_UNDEF,309,KV_UNDEF,330,KV_UNDEF,330,KV_UNDEF,351,KV_UNDEF,351,KV_UNDEF,270,KV_UNDEF,340,KV_UNDEF,340,KV_UNDEF,365,KV_UNDEF
++process_vm_writev,348,KV_UNDEF,311,KV_UNDEF,540,KV_UNDEF,377,KV_UNDEF,271,KV_UNDEF,271,KV_UNDEF,346,KV_UNDEF,346,KV_UNDEF,305,KV_UNDEF,310,KV_UNDEF,331,KV_UNDEF,331,KV_UNDEF,352,KV_UNDEF,352,KV_UNDEF,271,KV_UNDEF,341,KV_UNDEF,341,KV_UNDEF,366,KV_UNDEF
++prof,44,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,44,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,44,KV_UNDEF,44,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++profil,98,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,98,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,98,KV_UNDEF,98,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++pselect6,308,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,335,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,301,KV_UNDEF,301,KV_UNDEF,260,KV_UNDEF,264,KV_UNDEF,273,KV_UNDEF,273,KV_UNDEF,280,KV_UNDEF,280,KV_UNDEF,72,KV_UNDEF,301,KV_UNDEF,301,KV_UNDEF,308,KV_UNDEF
++pselect6_time64,413,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF,413,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF,413,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF,PNR,KV_UNDEF,413,KV_UNDEF
++ptrace,26,KV_UNDEF,101,KV_UNDEF,521,KV_UNDEF,26,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,117,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF,26,KV_UNDEF
++putpmsg,189,KV_UNDEF,182,KV_UNDEF,182,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,189,KV_UNDEF,209,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,PNR,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,PNR,KV_UNDEF
++pwrite64,181,KV_UNDEF,18,KV_UNDEF,18,KV_UNDEF,181,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,181,KV_UNDEF,201,KV_UNDEF,17,KV_UNDEF,17,KV_UNDEF,109,KV_UNDEF,109,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF,68,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF
++pwritev,334,KV_UNDEF,296,KV_UNDEF,535,KV_UNDEF,362,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,330,KV_UNDEF,331,KV_UNDEF,290,KV_UNDEF,294,KV_UNDEF,316,KV_UNDEF,316,KV_UNDEF,321,KV_UNDEF,321,KV_UNDEF,70,KV_UNDEF,329,KV_UNDEF,329,KV_UNDEF,334,KV_UNDEF
++pwritev2,379,KV_UNDEF,328,KV_UNDEF,547,KV_UNDEF,393,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,378,KV_UNDEF,362,KV_UNDEF,322,KV_UNDEF,326,KV_UNDEF,348,KV_UNDEF,348,KV_UNDEF,381,KV_UNDEF,381,KV_UNDEF,287,KV_UNDEF,377,KV_UNDEF,377,KV_UNDEF,382,KV_UNDEF
++query_module,167,KV_UNDEF,178,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,167,KV_UNDEF,187,KV_UNDEF,171,KV_UNDEF,171,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,166,KV_UNDEF,166,KV_UNDEF,PNR,KV_UNDEF,167,KV_UNDEF,167,KV_UNDEF,PNR,KV_UNDEF
++quotactl,131,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,131,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,60,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF
++quotactl_fd,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF,443,KV_UNDEF
++read,3,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,3,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,63,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF,3,KV_UNDEF
++readahead,225,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,225,KV_UNDEF,213,KV_UNDEF,213,KV_UNDEF,240,KV_UNDEF,223,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,207,KV_UNDEF,207,KV_UNDEF,191,KV_UNDEF,191,KV_UNDEF,213,KV_UNDEF,222,KV_UNDEF,222,KV_UNDEF,225,KV_UNDEF
++readdir,89,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,PNR,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF
++readlink,85,KV_UNDEF,89,KV_UNDEF,89,KV_UNDEF,85,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,PNR,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF
++readlinkat,305,KV_UNDEF,267,KV_UNDEF,267,KV_UNDEF,332,KV_UNDEF,78,KV_UNDEF,78,KV_UNDEF,298,KV_UNDEF,298,KV_UNDEF,257,KV_UNDEF,261,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,296,KV_UNDEF,296,KV_UNDEF,78,KV_UNDEF,298,KV_UNDEF,298,KV_UNDEF,305,KV_UNDEF
++readv,145,KV_UNDEF,19,KV_UNDEF,515,KV_UNDEF,145,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,18,KV_UNDEF,18,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,65,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF
++reboot,88,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF,88,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,164,KV_UNDEF,164,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,142,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF
++recv,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,291,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,175,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,98,KV_UNDEF,98,KV_UNDEF,336,KV_UNDEF,336,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,350,KV_UNDEF
++recvfrom,371,KV_UNDEF,45,KV_UNDEF,517,KV_UNDEF,292,KV_UNDEF,207,KV_UNDEF,207,KV_UNDEF,368,KV_UNDEF,176,KV_UNDEF,44,KV_UNDEF,44,KV_UNDEF,123,KV_UNDEF,123,KV_UNDEF,337,KV_UNDEF,337,KV_UNDEF,207,KV_UNDEF,371,KV_UNDEF,371,KV_UNDEF,351,KV_UNDEF
++recvmmsg,337,KV_UNDEF,299,KV_UNDEF,537,KV_UNDEF,365,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,371,KV_UNDEF,335,KV_UNDEF,294,KV_UNDEF,298,KV_UNDEF,319,KV_UNDEF,319,KV_UNDEF,343,KV_UNDEF,343,KV_UNDEF,243,KV_UNDEF,357,KV_UNDEF,357,KV_UNDEF,357,KV_UNDEF
++recvmmsg_time64,417,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF,417,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF,417,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF,PNR,KV_UNDEF,417,KV_UNDEF
++recvmsg,372,KV_UNDEF,47,KV_UNDEF,519,KV_UNDEF,297,KV_UNDEF,212,KV_UNDEF,212,KV_UNDEF,369,KV_UNDEF,177,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,342,KV_UNDEF,342,KV_UNDEF,212,KV_UNDEF,372,KV_UNDEF,372,KV_UNDEF,356,KV_UNDEF
++remap_file_pages,257,KV_UNDEF,216,KV_UNDEF,216,KV_UNDEF,253,KV_UNDEF,234,KV_UNDEF,234,KV_UNDEF,252,KV_UNDEF,251,KV_UNDEF,210,KV_UNDEF,210,KV_UNDEF,227,KV_UNDEF,227,KV_UNDEF,239,KV_UNDEF,239,KV_UNDEF,234,KV_UNDEF,267,KV_UNDEF,267,KV_UNDEF,257,KV_UNDEF
++removexattr,235,KV_UNDEF,197,KV_UNDEF,197,KV_UNDEF,235,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,232,KV_UNDEF,233,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,247,KV_UNDEF,247,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF,14,KV_UNDEF,233,KV_UNDEF,233,KV_UNDEF,235,KV_UNDEF
++rename,38,KV_UNDEF,82,KV_UNDEF,82,KV_UNDEF,38,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,80,KV_UNDEF,80,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,PNR,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF
++renameat,302,KV_UNDEF,264,KV_UNDEF,264,KV_UNDEF,329,KV_UNDEF,38,KV_UNDEF,PNR,KV_UNDEF,295,KV_UNDEF,295,KV_UNDEF,254,KV_UNDEF,258,KV_UNDEF,282,KV_UNDEF,282,KV_UNDEF,293,KV_UNDEF,293,KV_UNDEF,PNR,KV_UNDEF,295,KV_UNDEF,295,KV_UNDEF,302,KV_UNDEF
++renameat2,353,KV_UNDEF,316,KV_UNDEF,316,KV_UNDEF,382,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,351,KV_UNDEF,351,KV_UNDEF,311,KV_UNDEF,315,KV_UNDEF,337,KV_UNDEF,337,KV_UNDEF,357,KV_UNDEF,357,KV_UNDEF,276,KV_UNDEF,347,KV_UNDEF,347,KV_UNDEF,371,KV_UNDEF
++request_key,287,KV_UNDEF,249,KV_UNDEF,249,KV_UNDEF,310,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF,280,KV_UNDEF,281,KV_UNDEF,240,KV_UNDEF,244,KV_UNDEF,265,KV_UNDEF,265,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,218,KV_UNDEF,279,KV_UNDEF,279,KV_UNDEF,286,KV_UNDEF
++restart_syscall,0,KV_UNDEF,219,KV_UNDEF,219,KV_UNDEF,0,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,0,KV_UNDEF,253,KV_UNDEF,213,KV_UNDEF,214,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,0,KV_UNDEF,128,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,0,KV_UNDEF
++riscv_flush_icache,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,259,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++rmdir,40,KV_UNDEF,84,KV_UNDEF,84,KV_UNDEF,40,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,82,KV_UNDEF,82,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,PNR,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF
++rseq,386,KV_UNDEF,334,KV_UNDEF,334,KV_UNDEF,398,KV_UNDEF,293,KV_UNDEF,293,KV_UNDEF,384,KV_UNDEF,367,KV_UNDEF,327,KV_UNDEF,331,KV_UNDEF,354,KV_UNDEF,354,KV_UNDEF,387,KV_UNDEF,387,KV_UNDEF,293,KV_UNDEF,383,KV_UNDEF,383,KV_UNDEF,387,KV_UNDEF
++rtas,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,255,KV_UNDEF,255,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++rt_sigaction,174,KV_UNDEF,13,KV_UNDEF,512,KV_UNDEF,174,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,174,KV_UNDEF,194,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,134,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF
++rt_sigpending,176,KV_UNDEF,127,KV_UNDEF,522,KV_UNDEF,176,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,176,KV_UNDEF,196,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,136,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF
++rt_sigprocmask,175,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,175,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,175,KV_UNDEF,195,KV_UNDEF,14,KV_UNDEF,14,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,174,KV_UNDEF,174,KV_UNDEF,135,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF,175,KV_UNDEF
++rt_sigqueueinfo,178,KV_UNDEF,129,KV_UNDEF,524,KV_UNDEF,178,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,178,KV_UNDEF,198,KV_UNDEF,127,KV_UNDEF,127,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF,177,KV_UNDEF,177,KV_UNDEF,138,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF
++rt_sigreturn,173,KV_UNDEF,15,KV_UNDEF,513,KV_UNDEF,173,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,173,KV_UNDEF,193,KV_UNDEF,211,KV_UNDEF,211,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,172,KV_UNDEF,172,KV_UNDEF,139,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF,173,KV_UNDEF
++rt_sigsuspend,179,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,179,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,179,KV_UNDEF,199,KV_UNDEF,128,KV_UNDEF,128,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,178,KV_UNDEF,178,KV_UNDEF,133,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF
++rt_sigtimedwait,177,KV_UNDEF,128,KV_UNDEF,523,KV_UNDEF,177,KV_UNDEF,137,KV_UNDEF,137,KV_UNDEF,177,KV_UNDEF,197,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,177,KV_UNDEF,177,KV_UNDEF,176,KV_UNDEF,176,KV_UNDEF,137,KV_UNDEF,177,KV_UNDEF,177,KV_UNDEF,177,KV_UNDEF
++rt_sigtimedwait_time64,421,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF,421,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF,421,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF,PNR,KV_UNDEF,421,KV_UNDEF
++rt_tgsigqueueinfo,335,KV_UNDEF,297,KV_UNDEF,536,KV_UNDEF,363,KV_UNDEF,240,KV_UNDEF,240,KV_UNDEF,331,KV_UNDEF,332,KV_UNDEF,291,KV_UNDEF,295,KV_UNDEF,317,KV_UNDEF,317,KV_UNDEF,322,KV_UNDEF,322,KV_UNDEF,240,KV_UNDEF,330,KV_UNDEF,330,KV_UNDEF,335,KV_UNDEF
++s390_guarded_storage,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,378,KV_UNDEF,378,KV_UNDEF,PNR,KV_UNDEF
++s390_pci_mmio_read,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,353,KV_UNDEF,353,KV_UNDEF,PNR,KV_UNDEF
++s390_pci_mmio_write,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,352,KV_UNDEF,352,KV_UNDEF,PNR,KV_UNDEF
++s390_runtime_instr,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,342,KV_UNDEF,342,KV_UNDEF,PNR,KV_UNDEF
++s390_sthyi,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,380,KV_UNDEF,380,KV_UNDEF,PNR,KV_UNDEF
++sched_getaffinity,242,KV_UNDEF,204,KV_UNDEF,204,KV_UNDEF,242,KV_UNDEF,123,KV_UNDEF,123,KV_UNDEF,312,KV_UNDEF,240,KV_UNDEF,196,KV_UNDEF,196,KV_UNDEF,212,KV_UNDEF,212,KV_UNDEF,223,KV_UNDEF,223,KV_UNDEF,123,KV_UNDEF,240,KV_UNDEF,240,KV_UNDEF,242,KV_UNDEF
++sched_getattr,352,KV_UNDEF,315,KV_UNDEF,315,KV_UNDEF,381,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,350,KV_UNDEF,350,KV_UNDEF,310,KV_UNDEF,314,KV_UNDEF,335,KV_UNDEF,335,KV_UNDEF,356,KV_UNDEF,356,KV_UNDEF,275,KV_UNDEF,346,KV_UNDEF,346,KV_UNDEF,369,KV_UNDEF
++sched_getparam,155,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,155,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,155,KV_UNDEF,159,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,121,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF
++sched_get_priority_max,159,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,159,KV_UNDEF,125,KV_UNDEF,125,KV_UNDEF,159,KV_UNDEF,163,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,125,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF
++sched_get_priority_min,160,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,160,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,160,KV_UNDEF,164,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,126,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF
++sched_getscheduler,157,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,157,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,157,KV_UNDEF,161,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,120,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF
++sched_rr_get_interval,161,KV_UNDEF,148,KV_UNDEF,148,KV_UNDEF,161,KV_UNDEF,127,KV_UNDEF,127,KV_UNDEF,161,KV_UNDEF,165,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,127,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF
++sched_rr_get_interval_time64,423,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF,423,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF,423,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF,PNR,KV_UNDEF,423,KV_UNDEF
++sched_setaffinity,241,KV_UNDEF,203,KV_UNDEF,203,KV_UNDEF,241,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,311,KV_UNDEF,239,KV_UNDEF,195,KV_UNDEF,195,KV_UNDEF,211,KV_UNDEF,211,KV_UNDEF,222,KV_UNDEF,222,KV_UNDEF,122,KV_UNDEF,239,KV_UNDEF,239,KV_UNDEF,241,KV_UNDEF
++sched_setattr,351,KV_UNDEF,314,KV_UNDEF,314,KV_UNDEF,380,KV_UNDEF,274,KV_UNDEF,274,KV_UNDEF,349,KV_UNDEF,349,KV_UNDEF,309,KV_UNDEF,313,KV_UNDEF,334,KV_UNDEF,334,KV_UNDEF,355,KV_UNDEF,355,KV_UNDEF,274,KV_UNDEF,345,KV_UNDEF,345,KV_UNDEF,370,KV_UNDEF
++sched_setparam,154,KV_UNDEF,142,KV_UNDEF,142,KV_UNDEF,154,KV_UNDEF,118,KV_UNDEF,118,KV_UNDEF,154,KV_UNDEF,158,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,118,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF
++sched_setscheduler,156,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,156,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,156,KV_UNDEF,160,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,119,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF,156,KV_UNDEF
++sched_yield,158,KV_UNDEF,24,KV_UNDEF,24,KV_UNDEF,158,KV_UNDEF,124,KV_UNDEF,124,KV_UNDEF,158,KV_UNDEF,162,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,124,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF,158,KV_UNDEF
++seccomp,354,KV_UNDEF,317,KV_UNDEF,317,KV_UNDEF,383,KV_UNDEF,277,KV_UNDEF,277,KV_UNDEF,380,KV_UNDEF,352,KV_UNDEF,312,KV_UNDEF,316,KV_UNDEF,338,KV_UNDEF,338,KV_UNDEF,358,KV_UNDEF,358,KV_UNDEF,277,KV_UNDEF,348,KV_UNDEF,348,KV_UNDEF,372,KV_UNDEF
++security,PNR,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++select,82,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,82,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,82,KV_UNDEF,82,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,142,KV_UNDEF,PNR,KV_UNDEF
++semctl,394,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,300,KV_UNDEF,191,KV_UNDEF,191,KV_UNDEF,394,KV_UNDEF,394,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,394,KV_UNDEF,394,KV_UNDEF,191,KV_UNDEF,394,KV_UNDEF,394,KV_UNDEF,394,KV_UNDEF
++semget,393,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,299,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,393,KV_UNDEF,393,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,393,KV_UNDEF,393,KV_UNDEF,190,KV_UNDEF,393,KV_UNDEF,393,KV_UNDEF,393,KV_UNDEF
++semop,PNR,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,298,KV_UNDEF,193,KV_UNDEF,193,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,193,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++semtimedop,PNR,KV_UNDEF,220,KV_UNDEF,220,KV_UNDEF,312,KV_UNDEF,192,KV_UNDEF,192,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,214,KV_UNDEF,215,KV_UNDEF,228,KV_UNDEF,228,KV_UNDEF,PNR,KV_UNDEF,392,KV_UNDEF,192,KV_UNDEF,PNR,KV_UNDEF,392,KV_UNDEF,PNR,KV_UNDEF
++semtimedop_time64,420,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF,420,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF,420,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF,PNR,KV_UNDEF,420,KV_UNDEF
++send,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,289,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,178,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,58,KV_UNDEF,58,KV_UNDEF,334,KV_UNDEF,334,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,348,KV_UNDEF
++sendfile,187,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,187,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,187,KV_UNDEF,207,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,71,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF,187,KV_UNDEF
++sendfile64,239,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,239,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,236,KV_UNDEF,237,KV_UNDEF,PNR,KV_UNDEF,219,KV_UNDEF,209,KV_UNDEF,209,KV_UNDEF,226,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,223,KV_UNDEF,PNR,KV_UNDEF,239,KV_UNDEF
++sendmmsg,345,KV_UNDEF,307,KV_UNDEF,538,KV_UNDEF,374,KV_UNDEF,269,KV_UNDEF,269,KV_UNDEF,372,KV_UNDEF,343,KV_UNDEF,302,KV_UNDEF,307,KV_UNDEF,329,KV_UNDEF,329,KV_UNDEF,349,KV_UNDEF,349,KV_UNDEF,269,KV_UNDEF,358,KV_UNDEF,358,KV_UNDEF,363,KV_UNDEF
++sendmsg,370,KV_UNDEF,46,KV_UNDEF,518,KV_UNDEF,296,KV_UNDEF,211,KV_UNDEF,211,KV_UNDEF,367,KV_UNDEF,179,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,183,KV_UNDEF,183,KV_UNDEF,341,KV_UNDEF,341,KV_UNDEF,211,KV_UNDEF,370,KV_UNDEF,370,KV_UNDEF,355,KV_UNDEF
++sendto,369,KV_UNDEF,44,KV_UNDEF,44,KV_UNDEF,290,KV_UNDEF,206,KV_UNDEF,206,KV_UNDEF,366,KV_UNDEF,180,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,82,KV_UNDEF,82,KV_UNDEF,335,KV_UNDEF,335,KV_UNDEF,206,KV_UNDEF,369,KV_UNDEF,369,KV_UNDEF,349,KV_UNDEF
++setdomainname,121,KV_UNDEF,171,KV_UNDEF,171,KV_UNDEF,121,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,166,KV_UNDEF,166,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,162,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF
++setfsgid,139,KV_UNDEF,123,KV_UNDEF,123,KV_UNDEF,139,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,121,KV_UNDEF,121,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,152,KV_UNDEF,139,KV_UNDEF,216,KV_UNDEF,139,KV_UNDEF
++setfsgid32,216,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,216,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,216,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,216,KV_UNDEF,PNR,KV_UNDEF,216,KV_UNDEF
++setfsuid,138,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,138,KV_UNDEF,151,KV_UNDEF,151,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,120,KV_UNDEF,120,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,151,KV_UNDEF,138,KV_UNDEF,215,KV_UNDEF,138,KV_UNDEF
++setfsuid32,215,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,215,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,215,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,215,KV_UNDEF,PNR,KV_UNDEF,215,KV_UNDEF
++setgid,46,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,46,KV_UNDEF,144,KV_UNDEF,144,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,46,KV_UNDEF,144,KV_UNDEF,46,KV_UNDEF,214,KV_UNDEF,46,KV_UNDEF
++setgid32,214,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,214,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,214,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,214,KV_UNDEF,PNR,KV_UNDEF,214,KV_UNDEF
++setgroups,81,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,81,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,159,KV_UNDEF,81,KV_UNDEF,206,KV_UNDEF,81,KV_UNDEF
++setgroups32,206,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,206,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,206,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,206,KV_UNDEF,PNR,KV_UNDEF,206,KV_UNDEF
++sethostname,74,KV_UNDEF,170,KV_UNDEF,170,KV_UNDEF,74,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,165,KV_UNDEF,165,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,161,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF
++setitimer,104,KV_UNDEF,38,KV_UNDEF,38,KV_UNDEF,104,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,103,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF,104,KV_UNDEF
++set_mempolicy,276,KV_UNDEF,238,KV_UNDEF,238,KV_UNDEF,321,KV_UNDEF,237,KV_UNDEF,237,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,229,KV_UNDEF,233,KV_UNDEF,262,KV_UNDEF,262,KV_UNDEF,261,KV_UNDEF,261,KV_UNDEF,237,KV_UNDEF,270,KV_UNDEF,270,KV_UNDEF,276,KV_UNDEF
++set_mempolicy_home_node,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF,450,KV_UNDEF
++setns,346,KV_UNDEF,308,KV_UNDEF,308,KV_UNDEF,375,KV_UNDEF,268,KV_UNDEF,268,KV_UNDEF,344,KV_UNDEF,344,KV_UNDEF,303,KV_UNDEF,308,KV_UNDEF,328,KV_UNDEF,328,KV_UNDEF,350,KV_UNDEF,350,KV_UNDEF,268,KV_UNDEF,339,KV_UNDEF,339,KV_UNDEF,364,KV_UNDEF
++setpgid,57,KV_UNDEF,109,KV_UNDEF,109,KV_UNDEF,57,KV_UNDEF,154,KV_UNDEF,154,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,154,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF,57,KV_UNDEF
++setpriority,97,KV_UNDEF,141,KV_UNDEF,141,KV_UNDEF,97,KV_UNDEF,140,KV_UNDEF,140,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,138,KV_UNDEF,138,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,140,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF
++setregid,71,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,71,KV_UNDEF,143,KV_UNDEF,143,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,71,KV_UNDEF,143,KV_UNDEF,71,KV_UNDEF,204,KV_UNDEF,71,KV_UNDEF
++setregid32,204,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,204,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,204,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,204,KV_UNDEF,PNR,KV_UNDEF,204,KV_UNDEF
++setresgid,170,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,170,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,170,KV_UNDEF,190,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,170,KV_UNDEF,170,KV_UNDEF,169,KV_UNDEF,169,KV_UNDEF,149,KV_UNDEF,170,KV_UNDEF,210,KV_UNDEF,170,KV_UNDEF
++setresgid32,210,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,210,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,210,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,210,KV_UNDEF,PNR,KV_UNDEF,210,KV_UNDEF
++setresuid,164,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,164,KV_UNDEF,147,KV_UNDEF,147,KV_UNDEF,164,KV_UNDEF,185,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,164,KV_UNDEF,164,KV_UNDEF,164,KV_UNDEF,164,KV_UNDEF,147,KV_UNDEF,164,KV_UNDEF,208,KV_UNDEF,164,KV_UNDEF
++setresuid32,208,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,208,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,208,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,208,KV_UNDEF,PNR,KV_UNDEF,208,KV_UNDEF
++setreuid,70,KV_UNDEF,113,KV_UNDEF,113,KV_UNDEF,70,KV_UNDEF,145,KV_UNDEF,145,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,70,KV_UNDEF,145,KV_UNDEF,70,KV_UNDEF,203,KV_UNDEF,70,KV_UNDEF
++setreuid32,203,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,203,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,203,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,203,KV_UNDEF,PNR,KV_UNDEF,203,KV_UNDEF
++setrlimit,75,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,75,KV_UNDEF,164,KV_UNDEF,PNR,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,155,KV_UNDEF,155,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,164,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF
++set_robust_list,311,KV_UNDEF,273,KV_UNDEF,530,KV_UNDEF,338,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,304,KV_UNDEF,309,KV_UNDEF,268,KV_UNDEF,272,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,300,KV_UNDEF,300,KV_UNDEF,99,KV_UNDEF,304,KV_UNDEF,304,KV_UNDEF,311,KV_UNDEF
++setsid,66,KV_UNDEF,112,KV_UNDEF,112,KV_UNDEF,66,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,157,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF
++setsockopt,366,KV_UNDEF,54,KV_UNDEF,541,KV_UNDEF,294,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,363,KV_UNDEF,181,KV_UNDEF,53,KV_UNDEF,53,KV_UNDEF,181,KV_UNDEF,181,KV_UNDEF,339,KV_UNDEF,339,KV_UNDEF,208,KV_UNDEF,366,KV_UNDEF,366,KV_UNDEF,353,KV_UNDEF
++set_thread_area,243,KV_UNDEF,205,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,334,KV_UNDEF,283,KV_UNDEF,242,KV_UNDEF,246,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++set_tid_address,258,KV_UNDEF,218,KV_UNDEF,218,KV_UNDEF,256,KV_UNDEF,96,KV_UNDEF,96,KV_UNDEF,253,KV_UNDEF,252,KV_UNDEF,212,KV_UNDEF,213,KV_UNDEF,237,KV_UNDEF,237,KV_UNDEF,232,KV_UNDEF,232,KV_UNDEF,96,KV_UNDEF,252,KV_UNDEF,252,KV_UNDEF,258,KV_UNDEF
++settimeofday,79,KV_UNDEF,164,KV_UNDEF,164,KV_UNDEF,79,KV_UNDEF,170,KV_UNDEF,170,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,159,KV_UNDEF,159,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,170,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF,79,KV_UNDEF
++set_tls,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983045,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++setuid,23,KV_UNDEF,105,KV_UNDEF,105,KV_UNDEF,23,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,23,KV_UNDEF,146,KV_UNDEF,23,KV_UNDEF,213,KV_UNDEF,23,KV_UNDEF
++setuid32,213,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,213,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,213,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,213,KV_UNDEF,PNR,KV_UNDEF,213,KV_UNDEF
++setxattr,226,KV_UNDEF,188,KV_UNDEF,188,KV_UNDEF,226,KV_UNDEF,5,KV_UNDEF,5,KV_UNDEF,223,KV_UNDEF,224,KV_UNDEF,180,KV_UNDEF,180,KV_UNDEF,238,KV_UNDEF,238,KV_UNDEF,209,KV_UNDEF,209,KV_UNDEF,5,KV_UNDEF,224,KV_UNDEF,224,KV_UNDEF,226,KV_UNDEF
++sgetmask,68,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,68,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,68,KV_UNDEF
++shmat,397,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,305,KV_UNDEF,196,KV_UNDEF,196,KV_UNDEF,397,KV_UNDEF,397,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,192,KV_UNDEF,192,KV_UNDEF,397,KV_UNDEF,397,KV_UNDEF,196,KV_UNDEF,397,KV_UNDEF,397,KV_UNDEF,397,KV_UNDEF
++shmctl,396,KV_UNDEF,31,KV_UNDEF,31,KV_UNDEF,308,KV_UNDEF,195,KV_UNDEF,195,KV_UNDEF,396,KV_UNDEF,396,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,195,KV_UNDEF,195,KV_UNDEF,396,KV_UNDEF,396,KV_UNDEF,195,KV_UNDEF,396,KV_UNDEF,396,KV_UNDEF,396,KV_UNDEF
++shmdt,398,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,306,KV_UNDEF,197,KV_UNDEF,197,KV_UNDEF,398,KV_UNDEF,398,KV_UNDEF,65,KV_UNDEF,65,KV_UNDEF,193,KV_UNDEF,193,KV_UNDEF,398,KV_UNDEF,398,KV_UNDEF,197,KV_UNDEF,398,KV_UNDEF,398,KV_UNDEF,398,KV_UNDEF
++shmget,395,KV_UNDEF,29,KV_UNDEF,29,KV_UNDEF,307,KV_UNDEF,194,KV_UNDEF,194,KV_UNDEF,395,KV_UNDEF,395,KV_UNDEF,28,KV_UNDEF,28,KV_UNDEF,194,KV_UNDEF,194,KV_UNDEF,395,KV_UNDEF,395,KV_UNDEF,194,KV_UNDEF,395,KV_UNDEF,395,KV_UNDEF,395,KV_UNDEF
++shutdown,373,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,293,KV_UNDEF,210,KV_UNDEF,210,KV_UNDEF,370,KV_UNDEF,182,KV_UNDEF,47,KV_UNDEF,47,KV_UNDEF,117,KV_UNDEF,117,KV_UNDEF,338,KV_UNDEF,338,KV_UNDEF,210,KV_UNDEF,373,KV_UNDEF,373,KV_UNDEF,352,KV_UNDEF
++sigaction,67,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,67,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,PNR,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF,67,KV_UNDEF
++sigaltstack,186,KV_UNDEF,131,KV_UNDEF,525,KV_UNDEF,186,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,186,KV_UNDEF,206,KV_UNDEF,129,KV_UNDEF,129,KV_UNDEF,166,KV_UNDEF,166,KV_UNDEF,185,KV_UNDEF,185,KV_UNDEF,132,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF,186,KV_UNDEF
++signal,48,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,PNR,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF,48,KV_UNDEF
++signalfd,321,KV_UNDEF,282,KV_UNDEF,282,KV_UNDEF,349,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,317,KV_UNDEF,317,KV_UNDEF,276,KV_UNDEF,280,KV_UNDEF,302,KV_UNDEF,302,KV_UNDEF,305,KV_UNDEF,305,KV_UNDEF,PNR,KV_UNDEF,316,KV_UNDEF,316,KV_UNDEF,321,KV_UNDEF
++signalfd4,327,KV_UNDEF,289,KV_UNDEF,289,KV_UNDEF,355,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,323,KV_UNDEF,324,KV_UNDEF,283,KV_UNDEF,287,KV_UNDEF,309,KV_UNDEF,309,KV_UNDEF,313,KV_UNDEF,313,KV_UNDEF,74,KV_UNDEF,322,KV_UNDEF,322,KV_UNDEF,327,KV_UNDEF
++sigpending,73,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,73,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,PNR,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF,73,KV_UNDEF
++sigprocmask,126,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,126,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,PNR,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF,126,KV_UNDEF
++sigreturn,119,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,119,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,PNR,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF,119,KV_UNDEF
++sigsuspend,72,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,72,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,PNR,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF,72,KV_UNDEF
++socket,359,KV_UNDEF,41,KV_UNDEF,41,KV_UNDEF,281,KV_UNDEF,198,KV_UNDEF,198,KV_UNDEF,356,KV_UNDEF,183,KV_UNDEF,40,KV_UNDEF,40,KV_UNDEF,17,KV_UNDEF,17,KV_UNDEF,326,KV_UNDEF,326,KV_UNDEF,198,KV_UNDEF,359,KV_UNDEF,359,KV_UNDEF,340,KV_UNDEF
++socketcall,102,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,PNR,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF,102,KV_UNDEF
++socketpair,360,KV_UNDEF,53,KV_UNDEF,53,KV_UNDEF,288,KV_UNDEF,199,KV_UNDEF,199,KV_UNDEF,357,KV_UNDEF,184,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,56,KV_UNDEF,56,KV_UNDEF,333,KV_UNDEF,333,KV_UNDEF,199,KV_UNDEF,360,KV_UNDEF,360,KV_UNDEF,347,KV_UNDEF
++splice,313,KV_UNDEF,275,KV_UNDEF,275,KV_UNDEF,340,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,306,KV_UNDEF,304,KV_UNDEF,263,KV_UNDEF,267,KV_UNDEF,291,KV_UNDEF,291,KV_UNDEF,283,KV_UNDEF,283,KV_UNDEF,76,KV_UNDEF,306,KV_UNDEF,306,KV_UNDEF,313,KV_UNDEF
++spu_create,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,279,KV_UNDEF,279,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++spu_run,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,278,KV_UNDEF,278,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++ssetmask,69,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,69,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,69,KV_UNDEF
++stat,106,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,106,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,18,KV_UNDEF,18,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,PNR,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF,106,KV_UNDEF
++stat64,195,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,195,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,195,KV_UNDEF,213,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,101,KV_UNDEF,101,KV_UNDEF,195,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,195,KV_UNDEF,PNR,KV_UNDEF,195,KV_UNDEF
++statfs,99,KV_UNDEF,137,KV_UNDEF,137,KV_UNDEF,99,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,134,KV_UNDEF,134,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,43,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF
++statfs64,268,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,266,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,263,KV_UNDEF,255,KV_UNDEF,PNR,KV_UNDEF,217,KV_UNDEF,298,KV_UNDEF,298,KV_UNDEF,252,KV_UNDEF,252,KV_UNDEF,PNR,KV_UNDEF,265,KV_UNDEF,265,KV_UNDEF,268,KV_UNDEF
++statx,383,KV_UNDEF,332,KV_UNDEF,332,KV_UNDEF,397,KV_UNDEF,291,KV_UNDEF,291,KV_UNDEF,379,KV_UNDEF,366,KV_UNDEF,326,KV_UNDEF,330,KV_UNDEF,349,KV_UNDEF,349,KV_UNDEF,383,KV_UNDEF,383,KV_UNDEF,291,KV_UNDEF,379,KV_UNDEF,379,KV_UNDEF,383,KV_UNDEF
++stime,25,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,25,KV_UNDEF,PNR,KV_UNDEF,25,KV_UNDEF,PNR,KV_UNDEF,25,KV_UNDEF
++stty,31,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,31,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,31,KV_UNDEF,31,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++subpage_prot,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,310,KV_UNDEF,310,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++swapcontext,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,249,KV_UNDEF,249,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++swapoff,115,KV_UNDEF,168,KV_UNDEF,168,KV_UNDEF,115,KV_UNDEF,225,KV_UNDEF,225,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,163,KV_UNDEF,163,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,225,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF,115,KV_UNDEF
++swapon,87,KV_UNDEF,167,KV_UNDEF,167,KV_UNDEF,87,KV_UNDEF,224,KV_UNDEF,224,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,224,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF
++switch_endian,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,363,KV_UNDEF,363,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++symlink,83,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,83,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,PNR,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF,83,KV_UNDEF
++symlinkat,304,KV_UNDEF,266,KV_UNDEF,266,KV_UNDEF,331,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,297,KV_UNDEF,297,KV_UNDEF,256,KV_UNDEF,260,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,295,KV_UNDEF,295,KV_UNDEF,36,KV_UNDEF,297,KV_UNDEF,297,KV_UNDEF,304,KV_UNDEF
++sync,36,KV_UNDEF,162,KV_UNDEF,162,KV_UNDEF,36,KV_UNDEF,81,KV_UNDEF,81,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,157,KV_UNDEF,157,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,81,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF,36,KV_UNDEF
++sync_file_range,314,KV_UNDEF,277,KV_UNDEF,277,KV_UNDEF,PNR,KV_UNDEF,84,KV_UNDEF,84,KV_UNDEF,307,KV_UNDEF,305,KV_UNDEF,264,KV_UNDEF,268,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,84,KV_UNDEF,307,KV_UNDEF,307,KV_UNDEF,314,KV_UNDEF
++sync_file_range2,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,308,KV_UNDEF,308,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++syncfs,344,KV_UNDEF,306,KV_UNDEF,306,KV_UNDEF,373,KV_UNDEF,267,KV_UNDEF,267,KV_UNDEF,343,KV_UNDEF,342,KV_UNDEF,301,KV_UNDEF,306,KV_UNDEF,327,KV_UNDEF,327,KV_UNDEF,348,KV_UNDEF,348,KV_UNDEF,267,KV_UNDEF,338,KV_UNDEF,338,KV_UNDEF,362,KV_UNDEF
++syscall,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,0,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++_sysctl,149,KV_UNDEF,156,KV_UNDEF,PNR,KV_UNDEF,149,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,149,KV_UNDEF,153,KV_UNDEF,152,KV_UNDEF,152,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,PNR,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF,149,KV_UNDEF
++sys_debug_setcontext,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,256,KV_UNDEF,256,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++sysfs,135,KV_UNDEF,139,KV_UNDEF,139,KV_UNDEF,135,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,PNR,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF,135,KV_UNDEF
++sysinfo,116,KV_UNDEF,99,KV_UNDEF,99,KV_UNDEF,116,KV_UNDEF,179,KV_UNDEF,179,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,179,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF
++syslog,103,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,116,KV_UNDEF,116,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,101,KV_UNDEF,101,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,116,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF,103,KV_UNDEF
++sysmips,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,149,KV_UNDEF,199,KV_UNDEF,199,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++tee,315,KV_UNDEF,276,KV_UNDEF,276,KV_UNDEF,342,KV_UNDEF,77,KV_UNDEF,77,KV_UNDEF,308,KV_UNDEF,306,KV_UNDEF,265,KV_UNDEF,269,KV_UNDEF,293,KV_UNDEF,293,KV_UNDEF,284,KV_UNDEF,284,KV_UNDEF,77,KV_UNDEF,308,KV_UNDEF,308,KV_UNDEF,315,KV_UNDEF
++tgkill,270,KV_UNDEF,234,KV_UNDEF,234,KV_UNDEF,268,KV_UNDEF,131,KV_UNDEF,131,KV_UNDEF,265,KV_UNDEF,266,KV_UNDEF,225,KV_UNDEF,229,KV_UNDEF,259,KV_UNDEF,259,KV_UNDEF,250,KV_UNDEF,250,KV_UNDEF,131,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,270,KV_UNDEF
++time,13,KV_UNDEF,201,KV_UNDEF,201,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,13,KV_UNDEF,PNR,KV_UNDEF,13,KV_UNDEF,PNR,KV_UNDEF,13,KV_UNDEF
++timer_create,259,KV_UNDEF,222,KV_UNDEF,526,KV_UNDEF,257,KV_UNDEF,107,KV_UNDEF,107,KV_UNDEF,254,KV_UNDEF,257,KV_UNDEF,216,KV_UNDEF,220,KV_UNDEF,250,KV_UNDEF,250,KV_UNDEF,240,KV_UNDEF,240,KV_UNDEF,107,KV_UNDEF,254,KV_UNDEF,254,KV_UNDEF,259,KV_UNDEF
++timer_delete,263,KV_UNDEF,226,KV_UNDEF,226,KV_UNDEF,261,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,258,KV_UNDEF,261,KV_UNDEF,220,KV_UNDEF,224,KV_UNDEF,254,KV_UNDEF,254,KV_UNDEF,244,KV_UNDEF,244,KV_UNDEF,111,KV_UNDEF,258,KV_UNDEF,258,KV_UNDEF,263,KV_UNDEF
++timerfd,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,318,KV_UNDEF,277,KV_UNDEF,281,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,317,KV_UNDEF,317,KV_UNDEF,PNR,KV_UNDEF
++timerfd_create,322,KV_UNDEF,283,KV_UNDEF,283,KV_UNDEF,350,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,318,KV_UNDEF,321,KV_UNDEF,280,KV_UNDEF,284,KV_UNDEF,306,KV_UNDEF,306,KV_UNDEF,306,KV_UNDEF,306,KV_UNDEF,85,KV_UNDEF,319,KV_UNDEF,319,KV_UNDEF,322,KV_UNDEF
++timerfd_gettime,326,KV_UNDEF,287,KV_UNDEF,287,KV_UNDEF,354,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,322,KV_UNDEF,322,KV_UNDEF,281,KV_UNDEF,285,KV_UNDEF,308,KV_UNDEF,308,KV_UNDEF,312,KV_UNDEF,312,KV_UNDEF,87,KV_UNDEF,321,KV_UNDEF,321,KV_UNDEF,326,KV_UNDEF
++timerfd_gettime64,410,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF,410,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF,410,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF,PNR,KV_UNDEF,410,KV_UNDEF
++timerfd_settime,325,KV_UNDEF,286,KV_UNDEF,286,KV_UNDEF,353,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,321,KV_UNDEF,323,KV_UNDEF,282,KV_UNDEF,286,KV_UNDEF,307,KV_UNDEF,307,KV_UNDEF,311,KV_UNDEF,311,KV_UNDEF,86,KV_UNDEF,320,KV_UNDEF,320,KV_UNDEF,325,KV_UNDEF
++timerfd_settime64,411,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF,411,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF,411,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF,PNR,KV_UNDEF,411,KV_UNDEF
++timer_getoverrun,262,KV_UNDEF,225,KV_UNDEF,225,KV_UNDEF,260,KV_UNDEF,109,KV_UNDEF,109,KV_UNDEF,257,KV_UNDEF,260,KV_UNDEF,219,KV_UNDEF,223,KV_UNDEF,253,KV_UNDEF,253,KV_UNDEF,243,KV_UNDEF,243,KV_UNDEF,109,KV_UNDEF,257,KV_UNDEF,257,KV_UNDEF,262,KV_UNDEF
++timer_gettime,261,KV_UNDEF,224,KV_UNDEF,224,KV_UNDEF,259,KV_UNDEF,108,KV_UNDEF,108,KV_UNDEF,256,KV_UNDEF,259,KV_UNDEF,218,KV_UNDEF,222,KV_UNDEF,252,KV_UNDEF,252,KV_UNDEF,242,KV_UNDEF,242,KV_UNDEF,108,KV_UNDEF,256,KV_UNDEF,256,KV_UNDEF,261,KV_UNDEF
++timer_gettime64,408,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF,408,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF,408,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF,PNR,KV_UNDEF,408,KV_UNDEF
++timer_settime,260,KV_UNDEF,223,KV_UNDEF,223,KV_UNDEF,258,KV_UNDEF,110,KV_UNDEF,110,KV_UNDEF,255,KV_UNDEF,258,KV_UNDEF,217,KV_UNDEF,221,KV_UNDEF,251,KV_UNDEF,251,KV_UNDEF,241,KV_UNDEF,241,KV_UNDEF,110,KV_UNDEF,255,KV_UNDEF,255,KV_UNDEF,260,KV_UNDEF
++timer_settime64,409,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF,409,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF,409,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF,PNR,KV_UNDEF,409,KV_UNDEF
++times,43,KV_UNDEF,100,KV_UNDEF,100,KV_UNDEF,43,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,98,KV_UNDEF,98,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,153,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF,43,KV_UNDEF
++tkill,238,KV_UNDEF,200,KV_UNDEF,200,KV_UNDEF,238,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,222,KV_UNDEF,236,KV_UNDEF,192,KV_UNDEF,192,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,208,KV_UNDEF,130,KV_UNDEF,237,KV_UNDEF,237,KV_UNDEF,238,KV_UNDEF
++truncate,92,KV_UNDEF,76,KV_UNDEF,76,KV_UNDEF,92,KV_UNDEF,45,KV_UNDEF,45,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,74,KV_UNDEF,74,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,45,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF,92,KV_UNDEF
++truncate64,193,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,193,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,193,KV_UNDEF,211,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,199,KV_UNDEF,199,KV_UNDEF,193,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,193,KV_UNDEF,PNR,KV_UNDEF,193,KV_UNDEF
++tuxcall,PNR,KV_UNDEF,184,KV_UNDEF,184,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,225,KV_UNDEF,225,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++ugetrlimit,191,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,191,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,191,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,PNR,KV_UNDEF,191,KV_UNDEF,PNR,KV_UNDEF,191,KV_UNDEF
++ulimit,58,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,58,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,58,KV_UNDEF,58,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++umask,60,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,60,KV_UNDEF,166,KV_UNDEF,166,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,93,KV_UNDEF,93,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,166,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF,60,KV_UNDEF
++umount,22,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,PNR,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF,22,KV_UNDEF
++umount2,52,KV_UNDEF,166,KV_UNDEF,166,KV_UNDEF,52,KV_UNDEF,39,KV_UNDEF,39,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,161,KV_UNDEF,161,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,39,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF,52,KV_UNDEF
++uname,122,KV_UNDEF,63,KV_UNDEF,63,KV_UNDEF,122,KV_UNDEF,160,KV_UNDEF,160,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,59,KV_UNDEF,59,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,160,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF,122,KV_UNDEF
++unlink,10,KV_UNDEF,87,KV_UNDEF,87,KV_UNDEF,10,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,85,KV_UNDEF,85,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,PNR,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF,10,KV_UNDEF
++unlinkat,301,KV_UNDEF,263,KV_UNDEF,263,KV_UNDEF,328,KV_UNDEF,35,KV_UNDEF,35,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,253,KV_UNDEF,257,KV_UNDEF,281,KV_UNDEF,281,KV_UNDEF,292,KV_UNDEF,292,KV_UNDEF,35,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,301,KV_UNDEF
++unshare,310,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,337,KV_UNDEF,97,KV_UNDEF,97,KV_UNDEF,303,KV_UNDEF,303,KV_UNDEF,262,KV_UNDEF,266,KV_UNDEF,288,KV_UNDEF,288,KV_UNDEF,282,KV_UNDEF,282,KV_UNDEF,97,KV_UNDEF,303,KV_UNDEF,303,KV_UNDEF,310,KV_UNDEF
++uselib,86,KV_UNDEF,134,KV_UNDEF,PNR,KV_UNDEF,86,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,PNR,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF,86,KV_UNDEF
++userfaultfd,374,KV_UNDEF,323,KV_UNDEF,323,KV_UNDEF,388,KV_UNDEF,282,KV_UNDEF,282,KV_UNDEF,373,KV_UNDEF,357,KV_UNDEF,317,KV_UNDEF,321,KV_UNDEF,344,KV_UNDEF,344,KV_UNDEF,364,KV_UNDEF,364,KV_UNDEF,282,KV_UNDEF,355,KV_UNDEF,355,KV_UNDEF,377,KV_UNDEF
++usr26,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983043,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++usr32,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,983044,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++ustat,62,KV_UNDEF,136,KV_UNDEF,136,KV_UNDEF,62,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,133,KV_UNDEF,133,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,PNR,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF,62,KV_UNDEF
++utime,30,KV_UNDEF,132,KV_UNDEF,132,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,130,KV_UNDEF,130,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,PNR,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF,30,KV_UNDEF
++utimensat,320,KV_UNDEF,280,KV_UNDEF,280,KV_UNDEF,348,KV_UNDEF,88,KV_UNDEF,88,KV_UNDEF,316,KV_UNDEF,316,KV_UNDEF,275,KV_UNDEF,279,KV_UNDEF,301,KV_UNDEF,301,KV_UNDEF,304,KV_UNDEF,304,KV_UNDEF,88,KV_UNDEF,315,KV_UNDEF,315,KV_UNDEF,320,KV_UNDEF
++utimensat_time64,412,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF,412,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF,412,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF,PNR,KV_UNDEF,412,KV_UNDEF
++utimes,271,KV_UNDEF,235,KV_UNDEF,235,KV_UNDEF,269,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,266,KV_UNDEF,267,KV_UNDEF,226,KV_UNDEF,230,KV_UNDEF,336,KV_UNDEF,336,KV_UNDEF,251,KV_UNDEF,251,KV_UNDEF,PNR,KV_UNDEF,313,KV_UNDEF,313,KV_UNDEF,271,KV_UNDEF
++vfork,190,KV_UNDEF,58,KV_UNDEF,58,KV_UNDEF,190,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,190,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,113,KV_UNDEF,113,KV_UNDEF,189,KV_UNDEF,189,KV_UNDEF,PNR,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF,190,KV_UNDEF
++vhangup,111,KV_UNDEF,153,KV_UNDEF,153,KV_UNDEF,111,KV_UNDEF,58,KV_UNDEF,58,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,150,KV_UNDEF,150,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,58,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF,111,KV_UNDEF
++vm86,166,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,113,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,113,KV_UNDEF,113,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++vm86old,113,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++vmsplice,316,KV_UNDEF,278,KV_UNDEF,532,KV_UNDEF,343,KV_UNDEF,75,KV_UNDEF,75,KV_UNDEF,309,KV_UNDEF,307,KV_UNDEF,266,KV_UNDEF,270,KV_UNDEF,294,KV_UNDEF,294,KV_UNDEF,285,KV_UNDEF,285,KV_UNDEF,75,KV_UNDEF,309,KV_UNDEF,309,KV_UNDEF,316,KV_UNDEF
++vserver,273,KV_UNDEF,236,KV_UNDEF,PNR,KV_UNDEF,313,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,277,KV_UNDEF,236,KV_UNDEF,240,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF
++wait4,114,KV_UNDEF,61,KV_UNDEF,61,KV_UNDEF,114,KV_UNDEF,260,KV_UNDEF,260,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,59,KV_UNDEF,59,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,260,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF,114,KV_UNDEF
++waitid,284,KV_UNDEF,247,KV_UNDEF,529,KV_UNDEF,280,KV_UNDEF,95,KV_UNDEF,95,KV_UNDEF,277,KV_UNDEF,278,KV_UNDEF,237,KV_UNDEF,241,KV_UNDEF,235,KV_UNDEF,235,KV_UNDEF,272,KV_UNDEF,272,KV_UNDEF,95,KV_UNDEF,281,KV_UNDEF,281,KV_UNDEF,284,KV_UNDEF
++waitpid,7,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,7,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,PNR,KV_UNDEF,7,KV_UNDEF
++write,4,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,4,KV_UNDEF,64,KV_UNDEF,64,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,1,KV_UNDEF,1,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,64,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF,4,KV_UNDEF
++writev,146,KV_UNDEF,20,KV_UNDEF,516,KV_UNDEF,146,KV_UNDEF,66,KV_UNDEF,66,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,19,KV_UNDEF,19,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,66,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF,146,KV_UNDEF
+--- libseccomp-2.5.4.orig/src/syscalls.h
++++ libseccomp-2.5.4/src/syscalls.h
+@@ -10,10 +10,13 @@
+ #define _SYSCALLS_H
+ 
+ #include <stddef.h>
++#include <seccomp.h>
+ 
+ #include "arch-aarch64.h"
+ #include "arch-arm.h"
+ #include "arch.h"
++#include "arch-loongarch64.h"
++#include "arch-m68k.h"
+ #include "arch-mips64.h"
+ #include "arch-mips64n32.h"
+ #include "arch-mips.h"
+@@ -22,6 +25,7 @@
+ #include "arch-ppc.h"
+ #include "arch-s390.h"
+ #include "arch-s390x.h"
++#include "arch-sh.h"
+ #include "arch-x32.h"
+ #include "arch-x86_64.h"
+ #include "arch-x86.h"
+@@ -36,27 +40,61 @@ struct arch_syscall_table {
+ 
+ 	/* each arch listed here must be defined in syscalls.c  */
+ 	/* NOTE: see the warning above - BEWARE! */
++
+ 	int x86;
++	enum scmp_kver x86_kver;
+ 	int x86_64;
++	enum scmp_kver x86_64_kver;
+ 	int x32;
++	enum scmp_kver x32_kver;
++
+ 	int arm;
++	enum scmp_kver arm_kver;
+ 	int aarch64;
++	enum scmp_kver aarch64_kver;
++
++	int loongarch64;
++	enum scmp_kver loongarch64_kver;
++
++	int m68k;
++	enum scmp_kver m68k_kver;
++
+ 	int mips;
++	enum scmp_kver mips_kver;
+ 	int mips64;
++	enum scmp_kver mips64_kver;
+ 	int mips64n32;
++	enum scmp_kver mips64n32_kver;
++
+ 	int parisc;
++	enum scmp_kver parisc_kver;
+ 	int parisc64;
++	enum scmp_kver parisc64_kver;
++
+ 	int ppc;
++	enum scmp_kver ppc_kver;
+ 	int ppc64;
++	enum scmp_kver ppc64_kver;
++
+ 	int riscv64;
++	enum scmp_kver riscv64_kver;
++
+ 	int s390;
++	enum scmp_kver s390_kver;
+ 	int s390x;
++	enum scmp_kver s390x_kver;
++
++	int sh;
++	enum scmp_kver sh_kver;
+ };
+-#define OFFSET_ARCH(NAME) offsetof(struct arch_syscall_table, NAME)
++#define SYSTBL_OFFSET(NAME) offsetof(struct arch_syscall_table, NAME)
+ 
+ /* defined in syscalls.perf.template  */
+ int syscall_resolve_name(const char *name, int offset);
+ const char *syscall_resolve_num(int num, int offset);
++enum scmp_kver syscall_resolve_name_kver(const char *name, int offset_kver);
++enum scmp_kver syscall_resolve_num_kver(int num,
++					int offset_arch, int offset_kver);
+ const struct arch_syscall_def *syscall_iterate(unsigned int spot, int offset);
+ 
+ /* helper functions for multiplexed syscalls, e.g. socketcall(2) and ipc(2) */
+--- libseccomp-2.5.4.orig/src/syscalls.perf.template
++++ libseccomp-2.5.4/src/syscalls.perf.template
+@@ -2,6 +2,8 @@
+ /**
+  * Copyright (c) 2012 Red Hat <pmoore@redhat.com>
+  * Copyright (c) 2020 Red Hat <gscrivan@redhat.com>
++ * Copyright (c) 2022 Microsoft Corporation. <paulmoore@microsoft.com>
++ *
+  * Authors: Paul Moore <paul@paul-moore.com>
+  *          Giuseppe Scrivano <gscrivan@redhat.com>
+  */
+@@ -31,48 +33,90 @@ struct arch_syscall_table;
+ @@SYSCALLS_TABLE@@
+ %%
+ 
+-static int syscall_get_offset_value(const struct arch_syscall_table *s,
++static int __syscall_offset_value(const struct arch_syscall_table *s,
+ 				    int offset)
+ {
+ 	return *(int *)((char *)s + offset);
+ }
+ 
+-int syscall_resolve_name(const char *name, int offset)
++static const struct arch_syscall_table *__syscall_lookup_name(const char *name)
++{
++	return in_word_set(name, strlen(name));
++}
++
++static const struct arch_syscall_table *__syscall_lookup_num(int num,
++							     int offset_arch)
+ {
+-	const struct arch_syscall_table *s;
++	unsigned int i;
+ 
+-	s = in_word_set(name, strlen(name));
+-	if (s == NULL)
++	for (i = 0; i < sizeof(wordlist)/sizeof(wordlist[0]); i++) {
++		if (__syscall_offset_value(&wordlist[i], offset_arch) == num)
++			return &wordlist[i];
++	}
++
++	return NULL;
++}
++
++int syscall_resolve_name(const char *name, int offset_arch)
++{
++	const struct arch_syscall_table *entry;
++
++	entry = __syscall_lookup_name(name);
++	if (!entry)
+ 		return __NR_SCMP_ERROR;
+ 
+-	return syscall_get_offset_value(s, offset);
++	return __syscall_offset_value(entry, offset_arch);
+ }
+ 
+-const char *syscall_resolve_num(int num, int offset)
++const char *syscall_resolve_num(int num, int offset_arch)
+ {
+-	unsigned int iter;
++	const struct arch_syscall_table *entry;
+ 
+-	for (iter = 0; iter < sizeof(wordlist)/sizeof(wordlist[0]); iter++) {
+-		if (syscall_get_offset_value(&wordlist[iter], offset) == num)
+-			return (stringpool + wordlist[iter].name);
+-	}
++	entry = __syscall_lookup_num(num, offset_arch);
++	if (!entry)
++		return NULL;
+ 
+-	return NULL;
++	return (stringpool + entry->name);
++}
++
++enum scmp_kver syscall_resolve_name_kver(const char *name, int offset_kver)
++{
++	const struct arch_syscall_table *entry;
++
++	entry = __syscall_lookup_name(name);
++	if (!entry)
++		return __SCMP_KV_NULL;
++
++	return __syscall_offset_value(entry, offset_kver);
+ }
+ 
++enum scmp_kver syscall_resolve_num_kver(int num,
++					int offset_arch, int offset_kver)
++{
++	const struct arch_syscall_table *entry;
++
++	entry = __syscall_lookup_num(num, offset_arch);
++	if (!entry)
++		return __SCMP_KV_NULL;
++
++	return __syscall_offset_value(entry, offset_kver);
++}
++
++/* DANGER: this is NOT THREAD-SAFE, use only for testing */
+ const struct arch_syscall_def *syscall_iterate(unsigned int spot, int offset)
+ {
+ 	unsigned int iter;
+-        /* this is thread-unsafe, only use for testing */
+ 	static struct arch_syscall_def arch_def;
+ 
++	/* DANGER: see the note above, NOT THREAD-SAFE, use only for testing */
++
+ 	arch_def.name = NULL;
+ 	arch_def.num = __NR_SCMP_ERROR;
+ 
+ 	for (iter = 0; iter < sizeof(wordlist)/sizeof(wordlist[0]); iter++) {
+ 		if (wordlist[iter].index == spot) {
+ 			arch_def.name = stringpool + wordlist[iter].name;
+-			arch_def.num = syscall_get_offset_value(&wordlist[iter],
++			arch_def.num = __syscall_offset_value(&wordlist[iter],
+ 								offset);
+ 			return &arch_def;
+ 		}
+--- libseccomp-2.5.4.orig/src/system.c
++++ libseccomp-2.5.4/src/system.c
+@@ -58,6 +58,7 @@ struct task_state {
+ 	int sup_flag_new_listener;
+ 	int sup_user_notif;
+ 	int sup_flag_tsync_esrch;
++	int sup_flag_wait_kill;
+ };
+ static struct task_state state = {
+ 	.nr_seccomp = -1,
+@@ -73,6 +74,7 @@ static struct task_state state = {
+ 	.sup_flag_new_listener = -1,
+ 	.sup_user_notif = -1,
+ 	.sup_flag_tsync_esrch = -1,
++	.sup_flag_wait_kill = -1,
+ };
+ 
+ /**
+@@ -126,6 +128,7 @@ int sys_chk_seccomp_syscall(void)
+ 	case SCMP_ARCH_X86_64:
+ 	case SCMP_ARCH_ARM:
+ 	case SCMP_ARCH_AARCH64:
++	case SCMP_ARCH_LOONGARCH64:
+ 	case SCMP_ARCH_PPC64:
+ 	case SCMP_ARCH_PPC64LE:
+ 	case SCMP_ARCH_S390:
+@@ -307,6 +310,10 @@ int sys_chk_seccomp_flag(int flag)
+ 		if (state.sup_flag_tsync_esrch < 0)
+ 			state.sup_flag_tsync_esrch = _sys_chk_flag_kernel(flag);
+ 		return state.sup_flag_tsync_esrch;
++	case SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV:
++		if (state.sup_flag_wait_kill < 0)
++			state.sup_flag_wait_kill = _sys_chk_flag_kernel(flag);
++		return state.sup_flag_wait_kill;
+ 	}
+ 
+ 	return -EOPNOTSUPP;
+@@ -339,6 +346,9 @@ void sys_set_seccomp_flag(int flag, bool
+ 	case SECCOMP_FILTER_FLAG_TSYNC_ESRCH:
+ 		state.sup_flag_tsync_esrch = (enable ? 1 : 0);
+ 		break;
++	case SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV:
++		state.sup_flag_wait_kill = (enable ? 1 : 0);
++		break;
+ 	}
+ }
+ 
+@@ -360,9 +370,10 @@ int sys_filter_load(struct db_filter_col
+ 	bool listener_req;
+ 	struct bpf_program *prgm = NULL;
+ 
+-	rc = gen_bpf_generate(col, &prgm);
++	rc = db_col_precompute(col);
+ 	if (rc < 0)
+ 		return rc;
++	prgm = col->prgm_bpf;
+ 
+ 	/* attempt to set NO_NEW_PRIVS */
+ 	if (col->attr.nnp_enable) {
+@@ -393,6 +404,9 @@ int sys_filter_load(struct db_filter_col
+ 			flgs |= SECCOMP_FILTER_FLAG_TSYNC;
+ 		} else if (listener_req)
+ 			flgs |= SECCOMP_FILTER_FLAG_NEW_LISTENER;
++		if ((flgs & SECCOMP_FILTER_FLAG_NEW_LISTENER) &&
++		    col->attr.wait_killable_recv)
++			flgs |= SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV;
+ 		if (col->attr.log_enable)
+ 			flgs |= SECCOMP_FILTER_FLAG_LOG;
+ 		if (col->attr.spec_allow)
+@@ -417,7 +431,6 @@ int sys_filter_load(struct db_filter_col
+ 
+ filter_load_out:
+ 	/* cleanup and return */
+-	gen_bpf_release(prgm);
+ 	if (rc == -ESRCH)
+ 		return -ESRCH;
+ 	if (rc < 0)
+--- libseccomp-2.5.4.orig/src/system.h
++++ libseccomp-2.5.4/src/system.h
+@@ -35,6 +35,14 @@
+ 
+ struct db_filter_col;
+ 
++/* NOTE: temporary location, move to include/seccomp.h.in when complete */
++enum scmp_kver {
++	__SCMP_KV_NULL = 0,
++	SCMP_KV_UNDEF = 1,
++	/* TODO: add SCMP_KV_X_YY values as the syscall table is populated */
++	__SCMP_KV_MAX,
++};
++
+ #ifdef HAVE_LINUX_SECCOMP_H
+ 
+ /* system header file */
+@@ -91,7 +99,7 @@ struct seccomp_data {
+ /* rename some of the socket filter types to make more sense */
+ typedef struct sock_filter bpf_instr_raw;
+ 
+-/* no new privs defintions */
++/* no new privs definitions */
+ #ifndef PR_SET_NO_NEW_PRIVS
+ #define PR_SET_NO_NEW_PRIVS		38
+ #endif
+@@ -130,6 +138,9 @@ typedef struct sock_filter bpf_instr_raw
+ #ifndef SECCOMP_FILTER_FLAG_TSYNC_ESRCH
+ #define SECCOMP_FILTER_FLAG_TSYNC_ESRCH		(1UL << 4)
+ #endif
++#ifndef SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV
++#define SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV	(1UL << 5)
++#endif
+ 
+ #ifndef SECCOMP_RET_LOG
+ #define SECCOMP_RET_LOG			0x7ffc0000U /* allow after logging */
+--- libseccomp-2.5.4.orig/tests/01-sim-allow.tests
++++ libseccomp-2.5.4/tests/01-sim-allow.tests
+@@ -13,7 +13,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname	StressCount
+-01-sim-allow	50
++01-sim-allow	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/02-sim-basic.tests
++++ libseccomp-2.5.4/tests/02-sim-basic.tests
+@@ -22,7 +22,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname	StressCount
+-02-sim-basic	50
++02-sim-basic	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/03-sim-basic_chains.tests
++++ libseccomp-2.5.4/tests/03-sim-basic_chains.tests
+@@ -24,7 +24,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-03-sim-basic_chains	50
++03-sim-basic_chains	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/04-sim-multilevel_chains.tests
++++ libseccomp-2.5.4/tests/04-sim-multilevel_chains.tests
+@@ -36,7 +36,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname			StressCount
+-04-sim-multilevel_chains	50
++04-sim-multilevel_chains	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/05-sim-long_jumps.tests
++++ libseccomp-2.5.4/tests/05-sim-long_jumps.tests
+@@ -22,7 +22,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-05-sim-long_jumps	50
++05-sim-long_jumps	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/06-sim-actions.c
++++ libseccomp-2.5.4/tests/06-sim-actions.c
+@@ -64,7 +64,7 @@ int main(int argc, char *argv[])
+ 	if (rc != 0)
+ 		goto out;
+ 
+-	rc = seccomp_rule_add(ctx, SCMP_ACT_KILL_PROCESS, SCMP_SYS(fstat), 0);
++	rc = seccomp_rule_add(ctx, SCMP_ACT_KILL_PROCESS, SCMP_SYS(fstatfs), 0);
+ 	if (rc != 0)
+ 		goto out;
+ 
+--- libseccomp-2.5.4.orig/tests/06-sim-actions.py
++++ libseccomp-2.5.4/tests/06-sim-actions.py
+@@ -38,7 +38,7 @@ def test(args):
+     f.add_rule(ERRNO(errno.EPERM), "write")
+     f.add_rule(TRAP, "close")
+     f.add_rule(TRACE(1234), "openat")
+-    f.add_rule(KILL_PROCESS, "fstat")
++    f.add_rule(KILL_PROCESS, "fstatfs")
+     return f
+ 
+ args = util.get_opt()
+--- libseccomp-2.5.4.orig/tests/06-sim-actions.tests
++++ libseccomp-2.5.4/tests/06-sim-actions.tests
+@@ -12,21 +12,22 @@ test type: bpf-sim
+ 06-sim-actions	all		write		1		0x856B008	N	N	N	N	ERRNO(1)
+ 06-sim-actions	all		close		4		N		N	N	N	N	TRAP
+ 06-sim-actions	all		openat		0		0x856B008	4	N	N	N	TRACE(1234)
+-06-sim-actions	all		fstat		N		N		N	N	N	N	KILL_PROCESS
++06-sim-actions	all		fstatfs		4		0x856B008	N	N	N	N	KILL_PROCESS
+ 06-sim-actions	all		rt_sigreturn	N		N		N	N	N	N	LOG
+ 06-sim-actions	x86		0-2		N		N		N	N	N	N	KILL
+-06-sim-actions	x86		7-107		N		N		N	N	N	N	KILL
+-06-sim-actions	x86		109-172		N		N		N	N	N	N	KILL
++06-sim-actions	x86		7-99		N		N		N	N	N	N	KILL
++06-sim-actions	x86		101-172		N		N		N	N	N	N	KILL
+ 06-sim-actions	x86		174-294		N		N		N	N	N	N	KILL
+ 06-sim-actions	x86		296-350		N		N		N	N	N	N	KILL
+ 06-sim-actions	x86_64		6-14		N		N		N	N	N	N	KILL
+-06-sim-actions	x86_64		16-256		N		N		N	N	N	N	KILL
++06-sim-actions	x86_64		16-137		N		N		N	N	N	N	KILL
++06-sim-actions	x86_64		139-256		N		N		N	N	N	N	KILL
+ 06-sim-actions	x86_64		258-350		N		N		N	N	N	N	KILL
+ 
+ test type: bpf-sim-fuzz
+ 
+ # Testname	StressCount
+-06-sim-actions	50
++06-sim-actions	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/07-sim-db_bug_looping.tests
++++ libseccomp-2.5.4/tests/07-sim-db_bug_looping.tests
+@@ -15,7 +15,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-07-sim-db_bug_looping	50
++07-sim-db_bug_looping	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/08-sim-subtree_checks.tests
++++ libseccomp-2.5.4/tests/08-sim-subtree_checks.tests
+@@ -38,7 +38,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-08-sim-subtree_checks	50
++08-sim-subtree_checks	5
+ 
+ 
+ test type: bpf-valgrind
+--- libseccomp-2.5.4.orig/tests/09-sim-syscall_priority_pre.tests
++++ libseccomp-2.5.4/tests/09-sim-syscall_priority_pre.tests
+@@ -18,7 +18,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname			StressCount
+-09-sim-syscall_priority_pre	50
++09-sim-syscall_priority_pre	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/10-sim-syscall_priority_post.tests
++++ libseccomp-2.5.4/tests/10-sim-syscall_priority_post.tests
+@@ -18,7 +18,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname			StressCount
+-10-sim-syscall_priority_post	50
++10-sim-syscall_priority_post	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/11-basic-basic_errors.c
++++ libseccomp-2.5.4/tests/11-basic-basic_errors.c
+@@ -179,6 +179,41 @@ int main(int argc, char *argv[])
+ 	seccomp_release(ctx);
+ 	ctx = NULL;
+ 
++	/* seccomp_export_bpf_mem errors */
++	char buf[1024];
++	size_t buf_len = sizeof(buf);
++	rc = seccomp_export_bpf_mem(ctx, buf, &buf_len);
++	if (rc != -EINVAL)
++		return -1;
++
++	ctx = seccomp_init(SCMP_ACT_KILL);
++	if (ctx == NULL)
++		return -1;
++	rc = seccomp_export_bpf_mem(ctx, buf, NULL);
++	if (rc != -EINVAL)
++		return -1;
++	rc = seccomp_export_bpf_mem(ctx, NULL, NULL);
++	if (rc != -EINVAL)
++		return -1;
++
++	buf_len = sizeof(buf);
++	rc = seccomp_export_bpf_mem(ctx, NULL, &buf_len);
++	if (rc != 0)
++		return -1;
++	buf_len = sizeof(buf);
++	rc = seccomp_export_bpf_mem(ctx, buf, &buf_len);
++	if (rc != 0)
++		return -1;
++	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
++	if (rc != 0)
++		return -1;
++	buf_len = 0;
++	rc = seccomp_export_bpf_mem(ctx, buf, &buf_len);
++	if (rc != -ERANGE)
++		return -1;
++	seccomp_release(ctx);
++	ctx = NULL;
++
+ 	/* seccomp_attr_* errors */
+ 	ctx = seccomp_init(SCMP_ACT_ALLOW);
+ 	if (ctx == NULL)
+--- libseccomp-2.5.4.orig/tests/11-basic-basic_errors.py
++++ libseccomp-2.5.4/tests/11-basic-basic_errors.py
+@@ -87,6 +87,11 @@ def test():
+     except RuntimeError:
+         pass
+ 
++    # This shouldn't throw any errors.
++    f = SyscallFilter(ALLOW)
++    f.add_rule(KILL, "read")
++    ret = f.export_bpf_mem()
++
+ test()
+ 
+ # kate: syntax python;
+--- libseccomp-2.5.4.orig/tests/12-sim-basic_masked_ops.tests
++++ libseccomp-2.5.4/tests/12-sim-basic_masked_ops.tests
+@@ -40,7 +40,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-12-sim-basic_masked_ops	50
++12-sim-basic_masked_ops	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/13-basic-attrs.c
++++ libseccomp-2.5.4/tests/13-basic-attrs.c
+@@ -142,6 +142,17 @@ int main(int argc, char *argv[])
+ 		goto out;
+ 	}
+ 
++	rc = seccomp_attr_set(ctx, SCMP_FLTATR_CTL_WAITKILL, 1);
++	if (rc != 0)
++		goto out;
++	rc = seccomp_attr_get(ctx, SCMP_FLTATR_CTL_WAITKILL, &val);
++	if (rc != 0)
++		goto out;
++	if (val != 1) {
++		rc = -1;
++		goto out;
++	}
++
+ 	rc = 0;
+ out:
+ 	seccomp_release(ctx);
+--- libseccomp-2.5.4.orig/tests/13-basic-attrs.py
++++ libseccomp-2.5.4/tests/13-basic-attrs.py
+@@ -61,6 +61,9 @@ def test():
+     f.set_attr(Attr.API_SYSRAWRC, 1)
+     if f.get_attr(Attr.API_SYSRAWRC) != 1:
+         raise RuntimeError("Failed getting Attr.API_SYSRAWRC")
++    f.set_attr(Attr.CTL_WAITKILL, 1)
++    if f.get_attr(Attr.CTL_WAITKILL) != 1:
++        raise RuntimeError("Failed getting Attr.CTL_WAITKILL")
+ 
+ test()
+ 
+--- libseccomp-2.5.4.orig/tests/14-sim-reset.tests
++++ libseccomp-2.5.4/tests/14-sim-reset.tests
+@@ -21,7 +21,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname	StressCount
+-14-sim-reset	50
++14-sim-reset	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/15-basic-resolver.c
++++ libseccomp-2.5.4/tests/15-basic-resolver.c
+@@ -32,6 +32,8 @@ unsigned int arch_list[] = {
+ 	SCMP_ARCH_X32,
+ 	SCMP_ARCH_ARM,
+ 	SCMP_ARCH_AARCH64,
++	SCMP_ARCH_LOONGARCH64,
++	SCMP_ARCH_M68K,
+ 	SCMP_ARCH_MIPS,
+ 	SCMP_ARCH_MIPS64,
+ 	SCMP_ARCH_MIPS64N32,
+@@ -46,6 +48,7 @@ unsigned int arch_list[] = {
+ 	SCMP_ARCH_PARISC,
+ 	SCMP_ARCH_PARISC64,
+ 	SCMP_ARCH_RISCV64,
++	SCMP_ARCH_SH,
+ 	-1
+ };
+ 
+--- libseccomp-2.5.4.orig/tests/16-sim-arch_basic.c
++++ libseccomp-2.5.4/tests/16-sim-arch_basic.c
+@@ -80,6 +80,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_AARCH64);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc != 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_MIPSEL);
+ 	if (rc != 0)
+ 		goto out;
+@@ -95,6 +98,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_RISCV64);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_SH);
++	if (rc != 0)
++		goto out;
+ 
+ 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 1,
+ 			      SCMP_A0(SCMP_CMP_EQ, STDIN_FILENO));
+@@ -147,6 +153,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_remove(ctx, SCMP_ARCH_AARCH64);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_remove(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc != 0)
++		goto out;
+ 	rc = seccomp_arch_remove(ctx, SCMP_ARCH_MIPSEL);
+ 	if (rc != 0)
+ 		goto out;
+--- libseccomp-2.5.4.orig/tests/16-sim-arch_basic.py
++++ libseccomp-2.5.4/tests/16-sim-arch_basic.py
+@@ -40,11 +40,13 @@ def test(args):
+     f.add_arch(Arch("x32"))
+     f.add_arch(Arch("arm"))
+     f.add_arch(Arch("aarch64"))
++    f.add_arch(Arch("loongarch64"))
+     f.add_arch(Arch("mipsel"))
+     f.add_arch(Arch("mipsel64"))
+     f.add_arch(Arch("mipsel64n32"))
+     f.add_arch(Arch("ppc64le"))
+     f.add_arch(Arch("riscv64"))
++    f.add_arch(Arch("sh"))
+     f.add_rule(ALLOW, "read", Arg(0, EQ, sys.stdin.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stdout.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stderr.fileno()))
+--- libseccomp-2.5.4.orig/tests/18-sim-basic_allowlist.tests
++++ libseccomp-2.5.4/tests/18-sim-basic_allowlist.tests
+@@ -24,7 +24,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-18-sim-basic_allowlist	50
++18-sim-basic_allowlist	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/22-sim-basic_chains_array.tests
++++ libseccomp-2.5.4/tests/22-sim-basic_chains_array.tests
+@@ -23,7 +23,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname			StressCount
+-22-sim-basic_chains_array	50
++22-sim-basic_chains_array	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/23-sim-arch_all_le_basic.c
++++ libseccomp-2.5.4/tests/23-sim-arch_all_le_basic.c
+@@ -59,6 +59,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("aarch64"));
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("loongarch64"));
++	if (rc != 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("mipsel"));
+ 	if (rc != 0)
+ 		goto out;
+@@ -74,6 +77,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("riscv64"));
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("sh"));
++	if (rc != 0)
++		goto out;
+ 
+ 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 1,
+ 			      SCMP_A0(SCMP_CMP_EQ, STDIN_FILENO));
+--- libseccomp-2.5.4.orig/tests/23-sim-arch_all_le_basic.py
++++ libseccomp-2.5.4/tests/23-sim-arch_all_le_basic.py
+@@ -36,11 +36,13 @@ def test(args):
+     f.add_arch(Arch("x32"))
+     f.add_arch(Arch("arm"))
+     f.add_arch(Arch("aarch64"))
++    f.add_arch(Arch("loongarch64"))
+     f.add_arch(Arch("mipsel"))
+     f.add_arch(Arch("mipsel64"))
+     f.add_arch(Arch("mipsel64n32"))
+     f.add_arch(Arch("ppc64le"))
+     f.add_arch(Arch("riscv64"))
++    f.add_arch(Arch("sh"))
+     f.add_rule(ALLOW, "read", Arg(0, EQ, sys.stdin.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stdout.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stderr.fileno()))
+--- libseccomp-2.5.4.orig/tests/25-sim-multilevel_chains_adv.tests
++++ libseccomp-2.5.4/tests/25-sim-multilevel_chains_adv.tests
+@@ -22,7 +22,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname			StressCount
+-25-sim-multilevel_chains_adv	50
++25-sim-multilevel_chains_adv	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/26-sim-arch_all_be_basic.c
++++ libseccomp-2.5.4/tests/26-sim-arch_all_be_basic.c
+@@ -43,6 +43,9 @@ int main(int argc, char *argv[])
+ 	if (rc != 0)
+ 		goto out;
+ 
++	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("m68k"));
++	if (rc != 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("mips"));
+ 	if (rc != 0)
+ 		goto out;
+@@ -70,6 +73,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("s390x"));
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("sheb"));
++	if (rc != 0)
++		goto out;
+ 
+ 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 1,
+ 			      SCMP_A0(SCMP_CMP_EQ, STDIN_FILENO));
+--- libseccomp-2.5.4.orig/tests/26-sim-arch_all_be_basic.py
++++ libseccomp-2.5.4/tests/26-sim-arch_all_be_basic.py
+@@ -30,6 +30,7 @@ from seccomp import *
+ def test(args):
+     f = SyscallFilter(KILL)
+     f.remove_arch(Arch())
++    f.add_arch(Arch("m68k"))
+     f.add_arch(Arch("mips"))
+     f.add_arch(Arch("mips64"))
+     f.add_arch(Arch("mips64n32"))
+@@ -39,6 +40,7 @@ def test(args):
+     f.add_arch(Arch("ppc64"))
+     f.add_arch(Arch("s390"))
+     f.add_arch(Arch("s390x"))
++    f.add_arch(Arch("sheb"))
+     f.add_rule(ALLOW, "read", Arg(0, EQ, sys.stdin.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stdout.fileno()))
+     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stderr.fileno()))
+--- libseccomp-2.5.4.orig/tests/27-sim-bpf_blk_state.tests
++++ libseccomp-2.5.4/tests/27-sim-bpf_blk_state.tests
+@@ -16,7 +16,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-27-sim-bpf_blk_state	50
++27-sim-bpf_blk_state	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/30-sim-socket_syscalls.c
++++ libseccomp-2.5.4/tests/30-sim-socket_syscalls.c
+@@ -59,6 +59,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_MIPSEL);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_SH);
++	if (rc != 0)
++		goto out;
+ 
+ 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(socket), 0);
+ 	if (rc != 0)
+--- libseccomp-2.5.4.orig/tests/30-sim-socket_syscalls.py
++++ libseccomp-2.5.4/tests/30-sim-socket_syscalls.py
+@@ -36,6 +36,7 @@ def test(args):
+     f.add_arch(Arch("x32"))
+     f.add_arch(Arch("ppc64le"))
+     f.add_arch(Arch("mipsel"))
++    f.add_arch(Arch("sh"))
+     f.add_rule(ALLOW, "socket")
+     f.add_rule(ALLOW, "bind")
+     f.add_rule(ALLOW, "connect")
+--- libseccomp-2.5.4.orig/tests/30-sim-socket_syscalls.tests
++++ libseccomp-2.5.4/tests/30-sim-socket_syscalls.tests
+@@ -9,39 +9,44 @@ test type: bpf-sim
+ 
+ # Testname		Arch				Syscall		Arg0		Arg1		Arg2	Arg3	Arg4	Arg5	Result
+ # socket
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	socketcall	1		N		N	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	socketcall	1		N		N	N	N	N	ALLOW
+ # connect
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	socketcall	3		N		N	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	socketcall	3		N		N	N	N	N	ALLOW
+ # accept
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	socketcall	5		N		N	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	socketcall	5		N		N	N	N	N	ALLOW
+ # accept4
+ 30-sim-socket_syscalls	+ppc64le			socketcall	18		N		N	N	N	N	ALLOW
+ # shutdown
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	socketcall	13		N		N	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	socketcall	13		N		N	N	N	N	ALLOW
+ # socket
+ 30-sim-socket_syscalls	+x86				359		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+ppc64le			326		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+mipsel				4183		0		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+sh				340		0		1		2	N	N	N	ALLOW
+ # connect
+ 30-sim-socket_syscalls	+x86				362		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+ppc64le			328		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+mipsel				4170		0		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+sh				342		0		1		2	N	N	N	ALLOW
+ # accept
+ 30-sim-socket_syscalls	+ppc64le			330		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+mipsel				4168		0		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+sh				344		0		1		2	N	N	N	ALLOW
+ # accept4
+ 30-sim-socket_syscalls	+x86				364		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+ppc64le			344		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+mipsel				4334		0		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+sh				358		0		1		2	N	N	N	ALLOW
+ # shutdown
+ 30-sim-socket_syscalls	+x86				373		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+ppc64le			338		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+mipsel				4182		0		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+sh				352		0		1		2	N	N	N	ALLOW
+ # direct syscalls
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	accept		5		N		N	N	N	N	ALLOW
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	accept		0		1		2	N	N	N	KILL
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	accept4		18		1		2	N	N	N	ALLOW
+-30-sim-socket_syscalls	+x86,+ppc64le,+mipsel	accept4		0		1		2	N	N	N	KILL
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	accept		5		N		N	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	accept		0		1		2	N	N	N	KILL
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	accept4		18		1		2	N	N	N	ALLOW
++30-sim-socket_syscalls	+x86,+ppc64le,+mipsel,+sh	accept4		0		1		2	N	N	N	KILL
+ 30-sim-socket_syscalls	+x86_64				socket		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+x86_64				connect		0		1		2	N	N	N	ALLOW
+ 30-sim-socket_syscalls	+x86_64				accept4		0		1		2	N	N	N	ALLOW
+--- libseccomp-2.5.4.orig/tests/34-sim-basic_denylist.tests
++++ libseccomp-2.5.4/tests/34-sim-basic_denylist.tests
+@@ -24,7 +24,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-34-sim-basic_denylist	50
++34-sim-basic_denylist	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/36-sim-ipc_syscalls.c
++++ libseccomp-2.5.4/tests/36-sim-ipc_syscalls.c
+@@ -59,6 +59,12 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_MIPSEL);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_SH);
++	if (rc != 0)
++		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc != 0)
++		goto out;
+ 
+ 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(semop), 0);
+ 	if (rc != 0)
+--- libseccomp-2.5.4.orig/tests/36-sim-ipc_syscalls.py
++++ libseccomp-2.5.4/tests/36-sim-ipc_syscalls.py
+@@ -36,6 +36,7 @@ def test(args):
+     f.add_arch(Arch("x32"))
+     f.add_arch(Arch("ppc64le"))
+     f.add_arch(Arch("mipsel"))
++    f.add_arch(Arch("sh"))
+     f.add_rule(ALLOW, "semop")
+     f.add_rule(ALLOW, "semtimedop")
+     f.add_rule(ALLOW, "semget")
+--- libseccomp-2.5.4.orig/tests/36-sim-ipc_syscalls.tests
++++ libseccomp-2.5.4/tests/36-sim-ipc_syscalls.tests
+@@ -7,19 +7,19 @@
+ 
+ test type: bpf-sim
+ 
+-# Testname		Arch			Syscall		Arg0	Arg1	Arg2	Arg3	Arg4	Arg5	Result
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		1	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		2	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		3	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		4	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		11	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		12	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		13	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		14	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		21	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		22	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		23	N	N	N	N	N	ALLOW
+-36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel	ipc		24	N	N	N	N	N	ALLOW
++# Testname		Arch				Syscall		Arg0	Arg1	Arg2	Arg3	Arg4	Arg5	Result
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		1	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		2	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		3	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		4	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		11	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		12	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		13	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		14	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		21	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		22	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		23	N	N	N	N	N	ALLOW
++36-sim-ipc_syscalls	+x86,+ppc64le,+mipsel,+sh	ipc		24	N	N	N	N	N	ALLOW
+ 36-sim-ipc_syscalls	+x86_64				semop		N	N	N	N	N	N	ALLOW
+ 36-sim-ipc_syscalls	+x86_64				semget		N	N	N	N	N	N	ALLOW
+ 36-sim-ipc_syscalls	+x86_64				semctl		N	N	N	N	N	N	ALLOW
+--- libseccomp-2.5.4.orig/tests/38-basic-pfc_coverage.c
++++ libseccomp-2.5.4/tests/38-basic-pfc_coverage.c
+@@ -66,6 +66,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_AARCH64);
+ 	if (rc < 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc < 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_MIPSEL);
+ 	if (rc < 0)
+ 		goto out;
+@@ -78,6 +81,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_PPC64LE);
+ 	if (rc < 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_SH);
++	if (rc < 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_RISCV64);
+ 	if (rc < 0)
+ 		goto out;
+--- libseccomp-2.5.4.orig/tests/38-basic-pfc_coverage.pfc
++++ libseccomp-2.5.4/tests/38-basic-pfc_coverage.pfc
+@@ -300,6 +300,103 @@ if ($arch == 3221225655)
+                         action KILL;
+   # default action
+   action ALLOW;
++# filter for arch loongarch64 (3221225730)
++if ($arch == 3221225730)
++  # filter for syscall "open" (4294957130) [priority: 65535]
++  if ($syscall == 4294957130)
++    action KILL;
++  # filter for syscall "fstat" (4294957051) [priority: 65535]
++  if ($syscall == 4294957051)
++    action KILL_PROCESS;
++  # filter for syscall "exit_group" (94) [priority: 65535]
++  if ($syscall == 94)
++    action LOG;
++  # filter for syscall "exit" (93) [priority: 65535]
++  if ($syscall == 93)
++    action TRACE(1);
++  # filter for syscall "close" (57) [priority: 65535]
++  if ($syscall == 57)
++    action ERRNO(1);
++  # filter for syscall "write" (64) [priority: 65527]
++  if ($syscall == 64)
++    if ($a0.hi32 == 0)
++      if ($a0.lo32 == 0)
++      else
++        if ($a1.hi32 > 0)
++        else
++          if ($a1.hi32 == 0)
++            if ($a1.lo32 > 1)
++            else
++              if ($a2.hi32 > 0)
++              else
++                if ($a2.hi32 == 0)
++                  if ($a2.lo32 >= 2)
++                  else
++                    action TRAP;
++                else
++                  action TRAP;
++          else
++            if ($a2.hi32 > 0)
++            else
++              if ($a2.hi32 == 0)
++                if ($a2.lo32 >= 2)
++                else
++                  action TRAP;
++              else
++                action TRAP;
++    else
++      if ($a1.hi32 > 0)
++      else
++        if ($a1.hi32 == 0)
++          if ($a1.lo32 > 1)
++          else
++            if ($a2.hi32 > 0)
++            else
++              if ($a2.hi32 == 0)
++                if ($a2.lo32 >= 2)
++                else
++                  action TRAP;
++              else
++                action TRAP;
++        else
++          if ($a2.hi32 > 0)
++          else
++            if ($a2.hi32 == 0)
++              if ($a2.lo32 >= 2)
++              else
++                action TRAP;
++            else
++              action TRAP;
++  # filter for syscall "read" (63) [priority: 65525]
++  if ($syscall == 63)
++    if ($a0.hi32 == 0)
++      if ($a0.lo32 == 0)
++        if ($a1.hi32 > 0)
++          if ($a2.hi32 > 0)
++            if ($a3.hi32 & 0x00000000 == 0)
++              if ($a3.lo32 & 0x0000000f == 3)
++                action KILL;
++          else
++            if ($a2.hi32 == 0)
++              if ($a2.lo32 > 2)
++                if ($a3.hi32 & 0x00000000 == 0)
++                  if ($a3.lo32 & 0x0000000f == 3)
++                    action KILL;
++        else
++          if ($a1.hi32 == 0)
++            if ($a1.lo32 >= 1)
++              if ($a2.hi32 > 0)
++                if ($a3.hi32 & 0x00000000 == 0)
++                  if ($a3.lo32 & 0x0000000f == 3)
++                    action KILL;
++              else
++                if ($a2.hi32 == 0)
++                  if ($a2.lo32 > 2)
++                    if ($a3.hi32 & 0x00000000 == 0)
++                      if ($a3.lo32 & 0x0000000f == 3)
++                        action KILL;
++  # default action
++  action ALLOW;
+ # filter for arch mipsel (1073741832)
+ if ($arch == 1073741832)
+   # filter for syscall "exit_group" (4246) [priority: 65535]
+@@ -564,6 +661,41 @@ if ($arch == 3221225493)
+                         action KILL;
+   # default action
+   action ALLOW;
++# filter for arch sh (1073741866)
++if ($arch == 1073741866)
++  # filter for syscall "exit_group" (252) [priority: 65535]
++  if ($syscall == 252)
++    action LOG;
++  # filter for syscall "fstat" (108) [priority: 65535]
++  if ($syscall == 108)
++    action KILL_PROCESS;
++  # filter for syscall "close" (6) [priority: 65535]
++  if ($syscall == 6)
++    action ERRNO(1);
++  # filter for syscall "open" (5) [priority: 65535]
++  if ($syscall == 5)
++    action KILL;
++  # filter for syscall "exit" (1) [priority: 65535]
++  if ($syscall == 1)
++    action TRACE(1);
++  # filter for syscall "write" (4) [priority: 65532]
++  if ($syscall == 4)
++    if ($a0 == 0)
++    else
++      if ($a1 > 1)
++      else
++        if ($a2 >= 2)
++        else
++          action TRAP;
++  # filter for syscall "read" (3) [priority: 65531]
++  if ($syscall == 3)
++    if ($a0 == 0)
++      if ($a1 >= 1)
++        if ($a2 > 2)
++          if ($a3 & 0x0000000f == 3)
++            action KILL;
++  # default action
++  action ALLOW;
+ # filter for arch riscv64 (3221225715)
+ if ($arch == 3221225715)
+   # filter for syscall "open" (4294957130) [priority: 65535]
+--- libseccomp-2.5.4.orig/tests/39-basic-api_level.c
++++ libseccomp-2.5.4/tests/39-basic-api_level.c
+@@ -75,13 +75,20 @@ int main(int argc, char *argv[])
+ 	if (api != 6)
+ 		return -13;
+ 
++	rc = seccomp_api_set(7);
++	if (rc != 0)
++		return -14;
++	api = seccomp_api_get();
++	if (api != 7)
++		return -15;
++
+ 	/* Attempt to set a high, invalid API level */
+ 	rc = seccomp_api_set(1024);
+ 	if (rc != -EINVAL)
+ 		return -1001;
+ 	/* Ensure that the previously set API level didn't change */
+ 	api = seccomp_api_get();
+-	if (api != 6)
++	if (api != 7)
+ 		return -1002;
+ 
+ 	return 0;
+--- libseccomp-2.5.4.orig/tests/39-basic-api_level.py
++++ libseccomp-2.5.4/tests/39-basic-api_level.py
+@@ -65,6 +65,11 @@ def test():
+     if api != 6:
+         raise RuntimeError("Failed getting API level 6")
+ 
++    set_api(7)
++    api = get_api()
++    if api != 7:
++        raise RuntimeError("Failed getting API level 7")
++
+     # Attempt to set a high, invalid API level
+     try:
+         set_api(1024)
+@@ -74,7 +79,7 @@ def test():
+         raise RuntimeError("Missing failure when setting invalid API level")
+     # Ensure that the previously set API level didn't change
+     api = get_api()
+-    if api != 6:
++    if api != 7:
+         raise RuntimeError("Failed getting old API level after setting an invalid API level")
+ 
+ test()
+--- libseccomp-2.5.4.orig/tests/40-sim-log.tests
++++ libseccomp-2.5.4/tests/40-sim-log.tests
+@@ -13,7 +13,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname	StressCount
+-40-sim-log	50
++40-sim-log	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/42-sim-adv_chains.tests
++++ libseccomp-2.5.4/tests/42-sim-adv_chains.tests
+@@ -45,8 +45,8 @@ test type: bpf-sim
+ 
+ test type: bpf-sim-fuzz
+ 
+-# Testname			StressCount
+-42-sim-adv_chains	50
++# Testname		StressCount
++42-sim-adv_chains	5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/48-sim-32b_args.tests
++++ libseccomp-2.5.4/tests/48-sim-32b_args.tests
+@@ -30,7 +30,7 @@ test type: bpf-sim
+ test type: bpf-sim-fuzz
+ 
+ # Testname		StressCount
+-48-sim-32b_args		50
++48-sim-32b_args		5
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/53-sim-binary_tree.c
++++ libseccomp-2.5.4/tests/53-sim-binary_tree.c
+@@ -105,6 +105,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_AARCH64);
+ 	if (rc != 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc != 0)
++		goto out;
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_PPC64LE);
+ 	if (rc != 0)
+ 		goto out;
+--- libseccomp-2.5.4.orig/tests/53-sim-binary_tree.py
++++ libseccomp-2.5.4/tests/53-sim-binary_tree.py
+@@ -72,6 +72,7 @@ def test(args):
+ 
+     f.remove_arch(Arch())
+     f.add_arch(Arch("aarch64"))
++    f.add_arch(Arch("loongarch64"))
+     f.add_arch(Arch("ppc64le"))
+     f.add_arch(Arch("x86_64"))
+ 
+--- libseccomp-2.5.4.orig/tests/53-sim-binary_tree.tests
++++ libseccomp-2.5.4/tests/53-sim-binary_tree.tests
+@@ -8,56 +8,56 @@
+ test type: bpf-sim
+ 
+ # Testname		Arch				Syscall		Arg0	Arg1	Arg2	Arg3	Arg4	Arg5	Result
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	read		N	N	N	N	N	N	ERRNO(0)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	write		N	N	N	N	N	N	ERRNO(1)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	read		N	N	N	N	N	N	ERRNO(0)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	write		N	N	N	N	N	N	ERRNO(1)
+ 53-sim-binary_tree	+x86_64,+ppc64le		open		N	N	N	N	N	N	ERRNO(2)
+-53-sim-binary_tree	+aarch64			open		N	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	close		N	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	close		100	1234	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	close		100	101	N	N	N	N	ERRNO(3)
++53-sim-binary_tree	+aarch64,+loongarch64			open		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	close		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	close		100	1234	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	close		100	101	N	N	N	N	ERRNO(3)
+ 53-sim-binary_tree	+x86_64,+ppc64le		stat		N	N	N	N	N	N	ERRNO(4)
+-53-sim-binary_tree	+aarch64			stat		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			stat		N	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	fstat		N	N	N	N	N	N	ERRNO(5)
+ 53-sim-binary_tree	+x86_64,+ppc64le		lstat		N	N	N	N	N	N	ERRNO(6)
+-53-sim-binary_tree	+aarch64			lstat		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			lstat		N	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le		poll		102	N	N	N	N	N	ERRNO(7)
+-53-sim-binary_tree	+aarch64			poll		102	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	lseek		103	104	N	N	N	N	ERRNO(8)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	mmap		N	N	N	N	N	N	ERRNO(9)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	mprotect	N	N	N	N	N	N	ERRNO(10)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	munmap		N	N	N	N	N	N	ERRNO(11)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	brk		N	N	N	N	N	N	ERRNO(12)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	rt_sigaction	N	N	N	N	N	N	ERRNO(13)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	rt_sigprocmask	N	N	N	N	N	N	ERRNO(14)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	rt_sigreturn	N	N	N	N	N	N	ERRNO(15)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	ioctl		N	N	N	N	N	N	ERRNO(16)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	pread64		105	N	N	N	N	N	ERRNO(17)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	pwrite64	N	N	N	N	N	N	ERRNO(18)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	readv		N	N	N	N	N	N	ERRNO(19)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	writev		N	N	N	N	N	N	ERRNO(20)
++53-sim-binary_tree	+aarch64,+loongarch64			poll		102	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	lseek		103	104	N	N	N	N	ERRNO(8)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	mmap		N	N	N	N	N	N	ERRNO(9)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	mprotect	N	N	N	N	N	N	ERRNO(10)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	munmap		N	N	N	N	N	N	ERRNO(11)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	brk		N	N	N	N	N	N	ERRNO(12)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	rt_sigaction	N	N	N	N	N	N	ERRNO(13)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	rt_sigprocmask	N	N	N	N	N	N	ERRNO(14)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	rt_sigreturn	N	N	N	N	N	N	ERRNO(15)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	ioctl		N	N	N	N	N	N	ERRNO(16)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	pread64		105	N	N	N	N	N	ERRNO(17)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	pwrite64	N	N	N	N	N	N	ERRNO(18)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	readv		N	N	N	N	N	N	ERRNO(19)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	writev		N	N	N	N	N	N	ERRNO(20)
+ 53-sim-binary_tree	+x86_64,+ppc64le		access		N	N	N	N	N	N	ERRNO(21)
+-53-sim-binary_tree	+aarch64			access		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			access		N	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le		pipe		N	N	N	N	N	N	ERRNO(22)
+-53-sim-binary_tree	+aarch64			pipe		N	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	select		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			pipe		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	select		N	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le		select		106	107	N	N	N	N	ERRNO(23)
+-53-sim-binary_tree	+aarch64			select		106	107	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	sched_yield	N	N	N	N	N	N	ERRNO(24)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	mremap		N	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	mremap		108	109	N	N	N	N	ERRNO(25)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	msync		N	N	N	N	N	N	ERRNO(26)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	mincore		N	N	N	N	N	N	ERRNO(27)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	madvise		N	N	N	N	N	N	ERRNO(28)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	dup		112	N	N	N	N	N	ERRNO(32)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	dup		5678	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			select		106	107	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	sched_yield	N	N	N	N	N	N	ERRNO(24)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	mremap		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	mremap		108	109	N	N	N	N	ERRNO(25)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	msync		N	N	N	N	N	N	ERRNO(26)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	mincore		N	N	N	N	N	N	ERRNO(27)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	madvise		N	N	N	N	N	N	ERRNO(28)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	dup		112	N	N	N	N	N	ERRNO(32)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	dup		5678	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le		dup2		N	N	N	N	N	N	ERRNO(33)
+-53-sim-binary_tree	+aarch64			dup2		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			dup2		N	N	N	N	N	N	ALLOW
+ 53-sim-binary_tree	+x86_64,+ppc64le		pause		N	N	N	N	N	N	ERRNO(34)
+-53-sim-binary_tree	+aarch64			pause		N	N	N	N	N	N	ALLOW
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	nanosleep	N	N	N	N	N	N	ERRNO(35)
+-53-sim-binary_tree	+x86_64,+ppc64le,+aarch64	getitimer	N	N	N	N	N	N	ERRNO(36)
++53-sim-binary_tree	+aarch64,+loongarch64			pause		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	nanosleep	N	N	N	N	N	N	ERRNO(35)
++53-sim-binary_tree	+x86_64,+ppc64le,+aarch64,+loongarch64	getitimer	N	N	N	N	N	N	ERRNO(36)
+ 53-sim-binary_tree	+x86_64,+ppc64le		alarm		N	N	N	N	N	N	ERRNO(37)
+-53-sim-binary_tree	+aarch64			alarm		N	N	N	N	N	N	ALLOW
++53-sim-binary_tree	+aarch64,+loongarch64			alarm		N	N	N	N	N	N	ALLOW
+ 
+ test type: bpf-valgrind
+ 
+--- libseccomp-2.5.4.orig/tests/55-basic-pfc_binary_tree.c
++++ libseccomp-2.5.4/tests/55-basic-pfc_binary_tree.c
+@@ -89,6 +89,9 @@ int main(int argc, char *argv[])
+ 	rc = seccomp_arch_add(ctx, SCMP_ARCH_AARCH64);
+ 	if (rc < 0)
+ 		goto out;
++	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
++	if (rc < 0)
++		goto out;
+ 	rc = seccomp_attr_set(ctx, SCMP_FLTATR_CTL_OPTIMIZE, 2);
+ 	if (rc < 0)
+ 		goto out;
+--- libseccomp-2.5.4.orig/tests/55-basic-pfc_binary_tree.pfc
++++ libseccomp-2.5.4/tests/55-basic-pfc_binary_tree.pfc
+@@ -175,6 +175,93 @@ if ($arch == 3221225655)
+       action ERRNO(16);
+   # default action
+   action ALLOW;
++# filter for arch loongarch64 (3221225730)
++if ($arch == 3221225730)
++  if ($syscall > 62)
++    if ($syscall > 214)
++      if ($syscall > 4294957051)
++        # filter for syscall "lstat" (4294957133) [priority: 65535]
++        if ($syscall == 4294957133)
++          action ERRNO(6);
++        # filter for syscall "open" (4294957130) [priority: 65535]
++        if ($syscall == 4294957130)
++          action ERRNO(2);
++        # filter for syscall "poll" (4294957127) [priority: 65535]
++        if ($syscall == 4294957127)
++          action ERRNO(7);
++        # filter for syscall "stat" (4294957122) [priority: 65535]
++        if ($syscall == 4294957122)
++          action ERRNO(4);
++      else # ($syscall <= 4294957051)
++        # filter for syscall "fstat" (4294957051) [priority: 65533]
++        if ($syscall == 4294957051)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 103)
++              action ERRNO(5);
++        # filter for syscall "mprotect" (226) [priority: 65533]
++        if ($syscall == 226)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 105)
++              action ERRNO(10);
++        # filter for syscall "mmap" (222) [priority: 65535]
++        if ($syscall == 222)
++          action ERRNO(9);
++        # filter for syscall "munmap" (215) [priority: 65535]
++        if ($syscall == 215)
++          action ERRNO(11);
++    else # ($syscall <= 214)
++      if ($syscall > 68)
++        # filter for syscall "brk" (214) [priority: 65535]
++        if ($syscall == 214)
++          action ERRNO(12);
++        # filter for syscall "rt_sigreturn" (139) [priority: 65535]
++        if ($syscall == 139)
++          action ERRNO(15);
++        # filter for syscall "rt_sigprocmask" (135) [priority: 65535]
++        if ($syscall == 135)
++          action ERRNO(14);
++        # filter for syscall "rt_sigaction" (134) [priority: 65535]
++        if ($syscall == 134)
++          action ERRNO(13);
++      else # ($syscall <= 68)
++        # filter for syscall "pwrite64" (68) [priority: 65531]
++        if ($syscall == 68)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 107)
++              if ($a1.hi32 == 0)
++                if ($a1.lo32 == 108)
++                  action ERRNO(18);
++        # filter for syscall "pread64" (67) [priority: 65533]
++        if ($syscall == 67)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 106)
++              action ERRNO(17);
++        # filter for syscall "write" (64) [priority: 65533]
++        if ($syscall == 64)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 102)
++              action ERRNO(1);
++        # filter for syscall "read" (63) [priority: 65531]
++        if ($syscall == 63)
++          if ($a0.hi32 == 0)
++            if ($a0.lo32 == 100)
++              if ($a1.hi32 == 0)
++                if ($a1.lo32 == 101)
++                  action ERRNO(0);
++  else # ($syscall <= 62)
++    # filter for syscall "lseek" (62) [priority: 65533]
++    if ($syscall == 62)
++      if ($a0.hi32 == 0)
++        if ($a0.lo32 == 104)
++          action ERRNO(8);
++    # filter for syscall "close" (57) [priority: 65535]
++    if ($syscall == 57)
++      action ERRNO(3);
++    # filter for syscall "ioctl" (29) [priority: 65535]
++    if ($syscall == 29)
++      action ERRNO(16);
++  # default action
++  action ALLOW;
+ # invalid architecture action
+ action KILL;
+ #
+--- libseccomp-2.5.4.orig/tests/56-basic-iterate_syscalls.c
++++ libseccomp-2.5.4/tests/56-basic-iterate_syscalls.c
+@@ -33,6 +33,8 @@ unsigned int arch_list[] = {
+ 	SCMP_ARCH_X32,
+ 	SCMP_ARCH_ARM,
+ 	SCMP_ARCH_AARCH64,
++	SCMP_ARCH_LOONGARCH64,
++	SCMP_ARCH_M68K,
+ 	SCMP_ARCH_MIPS,
+ 	SCMP_ARCH_MIPS64,
+ 	SCMP_ARCH_MIPS64N32,
+--- libseccomp-2.5.4.orig/tests/56-basic-iterate_syscalls.py
++++ libseccomp-2.5.4/tests/56-basic-iterate_syscalls.py
+@@ -33,6 +33,7 @@ arch_list = ["x86",
+              "x32",
+              "arm",
+              "aarch64",
++             "loongarch64",
+              "mipsel",
+              "mipsel64",
+              "mipsel64n32",
+--- /dev/null
++++ libseccomp-2.5.4/tests/60-sim-precompute.c
+@@ -0,0 +1,68 @@
++/**
++ * Seccomp Library test program
++ *
++ * Copyright (c) 2022 Microsoft Corporation <paulmoore@microsoft.com>
++ * Author: Paul Moore <paul@paul-moore.com>
++ */
++
++/*
++ * This library is free software; you can redistribute it and/or modify it
++ * under the terms of version 2.1 of the GNU Lesser General Public License as
++ * published by the Free Software Foundation.
++ *
++ * This library is distributed in the hope that it will be useful, but WITHOUT
++ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++ * for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public License
++ * along with this library; if not, see <http://www.gnu.org/licenses>.
++ */
++
++#include <errno.h>
++#include <unistd.h>
++
++#include <seccomp.h>
++
++#include "util.h"
++
++int main(int argc, char *argv[])
++{
++	int rc;
++	struct util_options opts;
++	scmp_filter_ctx ctx = NULL;
++
++	rc = util_getopt(argc, argv, &opts);
++	if (rc < 0)
++		goto out;
++
++	ctx = seccomp_init(SCMP_ACT_ALLOW);
++	if (ctx == NULL)
++		return ENOMEM;
++
++	rc = seccomp_precompute(ctx);
++	if (rc != 0)
++		goto out;
++	rc = seccomp_rule_add_exact(ctx, SCMP_ACT_KILL, 1000, 0);
++	if (rc != 0)
++		goto out;
++
++	rc = seccomp_precompute(ctx);
++	if (rc != 0)
++		goto out;
++	rc = seccomp_rule_add_exact(ctx, SCMP_ACT_KILL, 1001, 0);
++	if (rc != 0)
++		goto out;
++
++	rc = seccomp_precompute(ctx);
++	if (rc != 0)
++		goto out;
++
++	rc = util_filter_output(&opts, ctx);
++	if (rc)
++		goto out;
++
++out:
++	seccomp_release(ctx);
++	return (rc < 0 ? -rc : rc);
++}
+--- /dev/null
++++ libseccomp-2.5.4/tests/60-sim-precompute.py
+@@ -0,0 +1,45 @@
++#!/usr/bin/env python
++
++#
++# Seccomp Library test program
++#
++# Copyright (c) 2012 Red Hat <pmoore@redhat.com>
++# Author: Paul Moore <paul@paul-moore.com>
++#
++
++#
++# This library is free software; you can redistribute it and/or modify it
++# under the terms of version 2.1 of the GNU Lesser General Public License as
++# published by the Free Software Foundation.
++#
++# This library is distributed in the hope that it will be useful, but WITHOUT
++# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
++# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
++# for more details.
++#
++# You should have received a copy of the GNU Lesser General Public License
++# along with this library; if not, see <http://www.gnu.org/licenses>.
++#
++
++import argparse
++import sys
++
++import util
++
++from seccomp import *
++
++def test(args):
++    f = SyscallFilter(ALLOW)
++    f.precompute()
++    f.add_rule_exactly(KILL, 1000)
++    f.precompute()
++    f.add_rule_exactly(KILL, 1001)
++    f.precompute()
++    return f
++
++args = util.get_opt()
++ctx = test(args)
++util.filter_output(args, ctx)
++
++# kate: syntax python;
++# kate: indent-mode python; space-indent on; indent-width 4; mixedindent off;
+--- /dev/null
++++ libseccomp-2.5.4/tests/60-sim-precompute.tests
+@@ -0,0 +1,23 @@
++#
++# libseccomp regression test automation data
++#
++# Copyright (c) 2022 Microsoft Corporation <paulmoore@microsoft.com>
++# Author: Paul Moore <paul@paul-moore.com>
++#
++
++test type: bpf-sim
++
++# Testname		Arch	Syscall	Arg0	Arg1	Arg2	Arg3	Arg4	Arg5	Result
++60-sim-precompute	all	0-10	N	N	N	N	N	N	ALLOW
++60-sim-precompute	all	1000	N	N	N	N	N	N	KILL
++60-sim-precompute	all	1001	N	N	N	N	N	N	KILL
++
++test type: bpf-sim-fuzz
++
++# Testname		StressCount
++60-sim-precompute	5
++
++test type: bpf-valgrind
++
++# Testname
++60-sim-precompute
+--- libseccomp-2.5.4.orig/tests/Makefile.am
++++ libseccomp-2.5.4/tests/Makefile.am
+@@ -94,7 +94,8 @@ check_PROGRAMS = \
+ 	56-basic-iterate_syscalls \
+ 	57-basic-rawsysrc \
+ 	58-live-tsync_notify \
+-	59-basic-empty_binary_tree
++	59-basic-empty_binary_tree \
++	60-sim-precompute
+ 
+ EXTRA_DIST_TESTPYTHON = \
+ 	util.py \
+@@ -154,7 +155,8 @@ EXTRA_DIST_TESTPYTHON = \
+ 	56-basic-iterate_syscalls.py \
+ 	57-basic-rawsysrc.py \
+ 	58-live-tsync_notify.py \
+-	59-basic-empty_binary_tree.py
++	59-basic-empty_binary_tree.py \
++	60-sim-precompute.py
+ 
+ EXTRA_DIST_TESTCFGS = \
+ 	01-sim-allow.tests \
+@@ -215,7 +217,8 @@ EXTRA_DIST_TESTCFGS = \
+ 	56-basic-iterate_syscalls.tests \
+ 	57-basic-rawsysrc.tests \
+ 	58-live-tsync_notify.tests \
+-	59-basic-empty_binary_tree.tests
++	59-basic-empty_binary_tree.tests \
++	60-sim-precompute.tests
+ 
+ EXTRA_DIST_TESTSCRIPTS = \
+ 	38-basic-pfc_coverage.sh 38-basic-pfc_coverage.pfc \
+--- libseccomp-2.5.4.orig/tests/regression
++++ libseccomp-2.5.4/tests/regression
+@@ -24,26 +24,33 @@
+ GLBL_ARCH_LE_SUPPORT=" \
+ 	x86 x86_64 x32 \
+ 	arm aarch64 \
++	loongarch64 \
+ 	mipsel mipsel64 mipsel64n32 \
+ 	ppc64le \
+-	riscv64"
++	riscv64 \
++	sh"
+ GLBL_ARCH_BE_SUPPORT=" \
++	m68k \
+ 	mips mips64 mips64n32 \
+ 	parisc parisc64 \
+ 	ppc ppc64 \
+-	s390 s390x"
++	s390 s390x \
++	sheb"
+ 
+ GLBL_ARCH_32B_SUPPORT=" \
+ 	x86 x32 \
+ 	arm \
++	m68k \
+ 	mips mipsel mips64n32 mipsel64n32 \
+ 	parisc \
+ 	ppc \
+-	s390"
++	s390 \
++	sheb sh"
+ 
+ GLBL_ARCH_64B_SUPPORT=" \
+ 	x86_64 \
+ 	aarch64 \
++	loongarch64 \
+ 	mips64 \
+ 	parisc64 \
+ 	ppc64 \
+@@ -89,12 +96,14 @@ function verify_deps() {
+ #
+ function usage() {
+ cat << EOF
+-usage: regression [-h] [-v] [-m MODE] [-a] [-b BATCH_NAME] [-l <LOG>]
+-                  [-s SINGLE_TEST] [-t <TEMP_DIR>] [-T <TEST_TYPE>]
++usage: regression [-h] [-v] [-j JOBS] [-m MODE] [-a] [-b BATCH_NAME]
++                  [-l <LOG>] [-s SINGLE_TEST] [-t <TEMP_DIR>] [-T <TEST_TYPE>]
+ 
+ libseccomp regression test automation script
+ optional arguments:
+   -h             show this help message and exit
++  -j JOBS        run up to JOBS test jobs in parallel
++                  can also be set via LIBSECCOMP_TSTCFG_JOBS env variable
+   -m MODE        specified the test mode [c (default), python]
+                   can also be set via LIBSECCOMP_TSTCFG_MODE_LIST env variable
+   -a             specifies all tests are to be run
+@@ -562,7 +571,7 @@ function run_test_bpf_sim() {
+ 
+ 		# if ranges exist, the following will loop through all syscall
+ 		# and arg ranges and generate/run every combination of requested
+-		# tests; if no ranges were specifed, then the single test is
++		# tests; if no ranges were specified, then the single test is
+ 		# run
+ 		for sys in $(get_seq $low_syscall $high_syscall); do
+ 		for arg0 in $(get_seq ${low_arg[0]} ${high_arg[0]}); do
+@@ -623,7 +632,7 @@ function run_test_bpf_sim() {
+ 				return
+ 			fi
+ 
+-			# simulate the specifed syscall against the BPF filter
++			# simulate the specified syscall against the BPF filter
+ 			# and verify the results
+ 			action=$($GLBL_SYS_SIM -a $simarch -f $tmpfile \
+ 				 -s $sys ${arg[0]} ${arg[1]} ${arg[2]} \
+@@ -796,7 +805,7 @@ function run_test_live() {
+ 
+ 	# setup the arch specific return values
+ 	case "$arch" in
+-	x86|x86_64|x32|arm|aarch64|parisc|parisc64|ppc|ppc64|ppc64le|ppc|s390|s390x|riscv64)
++	x86|x86_64|x32|arm|aarch64|loongarch64|m68k|parisc|parisc64|ppc|ppc64|ppc64le|ppc|s390|s390x|riscv64|sh|sheb)
+ 		rc_kill_process=159
+ 		rc_kill=159
+ 		rc_allow=160
+@@ -899,12 +908,114 @@ function run_test() {
+ }
+ 
+ #
++# Run the requested test batch
++#
++# Arguments:
++#     1    Batch name
++#
++function run_test_batch() {
++	local testnum=1
++	local batch_name=$1
++
++	# open temporary file
++	if [[ -n $tmpdir ]]; then
++		tmpfile=$(mktemp -t regression_XXXXXX --tmpdir=$tmpdir)
++	else
++		tmpfile=$(mktemp -t regression_XXXXXX)
++	fi
++
++	# reset the stats
++	stats_all=0
++	stats_skipped=0
++	stats_success=0
++	stats_failure=0
++	stats_error=0
++
++	# print a test batch header
++	echo " batch name: $batch_name" >&$logfd
++
++	# loop through each line and run the requested tests
++	while read line; do
++		# strip whitespace, comments, and blank lines
++		line=$(echo "$line" | \
++			sed -e 's/^[\t ]*//;s/[\t ]*$//;' | \
++			sed -e '/^[#].*$/d;/^$/d')
++		if [[ -z $line ]]; then
++			continue
++		fi
++
++		if [[ $line =~ ^"test type": ]]; then
++			test_type=$(echo "$line" | \
++					sed -e 's/^test type: //;')
++			# print a test mode and type header
++			echo " test mode:  $mode" >&$logfd
++			echo " test type:  $test_type" >&$logfd
++			continue
++		fi
++
++		if [[ ${single_list[@]} ]]; then
++			for i in ${single_list[@]}; do
++				if [ $i -eq $testnum ]; then
++					# we're running a single test
++					run_test "$batch_name" \
++							$testnum "$line" \
++							"$test_type"
++				fi
++			done
++		else
++			# we're running a test from a batch
++			run_test "$batch_name" \
++					$testnum "$line" "$test_type"
++		fi
++		testnum=$(($testnum+1))
++	done < "$file"
++
++
++	# dump our stats
++	local stats=$batch_name.$mode.stats
++	> $stats
++	echo -n "$stats_all $stats_skipped $stats_success " >> $stats
++	echo -n "$stats_failure $stats_error " >> $stats
++	echo "" >> $stats
++
++	# cleanup the temporary file we created
++	rm -f $tmpfile
++}
++
++#
++# Run the requested test batch
++#
++# Arguments:
++#     1    Log file
++#     2    PID to watch
++#
++function tail_log() {
++	local log=$1
++	local pid=$2
++
++	# dump the output
++	tail -n +0 --pid=$pid -f $log
++
++	# accumulate the stats
++	local stats=$(echo $log | sed 's/\.log$/.stats/')
++	stats_all=$(( $stats_all + $(awk '{ print $1 }' $stats) ))
++	stats_skipped=$(( $stats_skipped + $(awk '{ print $2 }' $stats) ))
++	stats_success=$(( $stats_success + $(awk '{ print $3 }' $stats) ))
++	stats_failure=$(( $stats_failure + $(awk '{ print $4 }' $stats) ))
++	stats_error=$(( $stats_error + $(awk '{ print $5 }' $stats) ))
++}
++
++#
+ # Run the requested tests
+ #
+ function run_tests() {
++	local job_cnt=0
++	local tail_cnt=0
++	local -a job_pids
++	local -a job_logs
++
+ 	# loop through all test files
+ 	for file in $basedir/*.tests; do
+-		local testnum=1
+ 		local batch_requested=false
+ 		local batch_name=""
+ 
+@@ -924,44 +1035,22 @@ function run_tests() {
+ 			fi
+ 		fi
+ 
+-		# print a test batch header
+-		echo " batch name: $batch_name" >&$logfd
+-
+-		# loop through each line and run the requested tests
+-		while read line; do
+-			# strip whitespace, comments, and blank lines
+-			line=$(echo "$line" | \
+-			       sed -e 's/^[\t ]*//;s/[\t ]*$//;' | \
+-			       sed -e '/^[#].*$/d;/^$/d')
+-			if [[ -z $line ]]; then
+-				continue
+-			fi
+-
+-			if [[ $line =~ ^"test type": ]]; then
+-				test_type=$(echo "$line" | \
+-					    sed -e 's/^test type: //;')
+-				# print a test mode and type header
+-				echo " test mode:  $mode" >&$logfd
+-				echo " test type:  $test_type" >&$logfd
+-				continue
+-			fi
++		# run the test batch
++		run_test_batch $batch_name >& $batch_name.$mode.log &
++		job_pids[job_cnt]=$!
++		job_logs[job_cnt]=$batch_name.$mode.log
++		job_cnt=$(( $job_cnt + 1 ))
++
++		# output the next log if the job queue is full
++		if [[ $(jobs | wc -l) -ge $jobs ]]; then
++			tail_log ${job_logs[$tail_cnt]} ${job_pids[$tail_cnt]}
++			tail_cnt=$(( $tail_cnt + 1 ))
++		fi
++	done
+ 
+-			if [[ ${single_list[@]} ]]; then
+-				for i in ${single_list[@]}; do
+-					if [ $i -eq $testnum ]; then
+-						# we're running a single test
+-						run_test "$batch_name" \
+-							 $testnum "$line" \
+-							 "$test_type"
+-					fi
+-				done
+-			else
+-				# we're running a test from a batch
+-				run_test "$batch_name" \
+-					 $testnum "$line" "$test_type"
+-			fi
+-			testnum=$(($testnum+1))
+-		done < "$file"
++	# output any leftovers
++	for i in $(seq $tail_cnt $(( $job_cnt - 1 ))); do
++		tail_log ${job_logs[$i]} ${job_pids[$i]}
+ 	done
+ }
+ 
+@@ -988,6 +1077,7 @@ tmpfile=""
+ tmpdir=""
+ type=
+ verbose=
++jobs=1
+ stats_all=0
+ stats_skipped=0
+ stats_success=0
+@@ -1001,7 +1091,7 @@ basedir=$(dirname $0)
+ pid=$$
+ 
+ # parse the command line
+-while getopts "ab:gl:m:s:t:T:vh" opt; do
++while getopts "ab:gj:l:m:s:t:T:vh" opt; do
+ 	case $opt in
+ 	a)
+ 		runall=1
+@@ -1010,6 +1100,9 @@ while getopts "ab:gl:m:s:t:T:vh" opt; do
+ 		batch_list[batch_count]="$OPTARG"
+ 		batch_count=$(($batch_count+1))
+ 		;;
++	j)
++		jobs=$OPTARG
++		;;
+ 	l)
+ 		logfile="$OPTARG"
+ 		;;
+@@ -1050,6 +1143,12 @@ done
+ # use mode list from environment if provided
+ [[ -z $mode_list && -n $LIBSECCOMP_TSTCFG_MODE_LIST ]] && mode_list=$LIBSECCOMP_TSTCFG_MODE_LIST
+ 
++# use job count from environment if provided and do some sanity checking
++[[ -n $LIBSECCOMP_TSTCFG_JOBS ]] && jobs=$LIBSECCOMP_TSTCFG_JOBS
++if [[ $jobs -lt 1 ]]; then
++	jobs=$(cat /proc/cpuinfo | grep "^processor" | wc -l)
++fi
++
+ # determine the mode test automatically
+ if [[ -z $mode_list ]]; then
+ 	# always perform the native c tests
+@@ -1088,19 +1187,15 @@ fi
+ 
+ # open log file for append (default to stdout)
+ if [[ -n $logfile ]]; then
++	# force single threaded to preserve the output
++	jobs=1
++
+ 	logfd=3
+ 	exec 3>>"$logfile"
+ else
+ 	logfd=1
+ fi
+ 
+-# open temporary file
+-if [[ -n $tmpdir ]]; then
+-	tmpfile=$(mktemp -t regression_XXXXXX --tmpdir=$tmpdir)
+-else
+-	tmpfile=$(mktemp -t regression_XXXXXX)
+-fi
+-
+ # determine the current system's architecture
+ arch=$($GLBL_SYS_ARCH)
+ 
+@@ -1119,7 +1214,6 @@ echo " tests errored: $stats_error" >&$l
+ echo "============================================================" >&$logfd
+ 
+ # cleanup and exit
+-rm -f $tmpfile
+ rc=0
+ [[ $stats_failure -gt 0 ]] && rc=$(($rc + 2))
+ [[ $stats_error -gt 0 ]] && rc=$(($rc + 4))
+--- libseccomp-2.5.4.orig/tools/check-syntax
++++ libseccomp-2.5.4/tools/check-syntax
+@@ -28,6 +28,8 @@ CHK_C_LIST="include/seccomp.h.in \
+ 	    tools/*.c tools/*.h"
+ CHK_C_EXCLUDE="src/syscalls.perf.c"
+ 
++CHK_SPELL_EXCLUDE_WORDS=""
++
+ ####
+ # functions
+ 
+@@ -60,24 +62,43 @@ EOF
+ }
+ 
+ #
+-# Generate a properly formatted C source/header file
++# Spellcheck source code
+ #
+-# Arguments:
+-#     1    Source file
++function tool_spell_check() {
++	local tfile
++
++	tfile=$(mktemp -t check-syntax-XXXXXX)
++	cat - > $tfile
++	codespell -q 16 -d -w -L "$CHK_SPELL_EXCLUDE_WORDS" $tfile
++	cat $tfile
++	rm -f $tfile
++}
++
++#
++# Generate a properly formatted C source/header file
+ #
+ function tool_c_style() {
+-	astyle --options=none --lineend=linux --mode=c \
++	cat - | astyle --options=none --lineend=linux --mode=c \
+ 		--style=linux \
+ 		--indent=force-tab=8 \
+-		--indent-preprocessor \
+ 		--indent-col1-comments \
+ 		--min-conditional-indent=0 \
+-		--max-instatement-indent=80 \
++		--max-continuation-indent=80 \
+ 		--pad-oper \
+ 		--align-pointer=name \
+ 		--align-reference=name \
+ 		--max-code-length=80 \
+-		--break-after-logical < "$1"
++		--break-after-logical
++}
++
++#
++# Generate a properly formatted and spellchecked C source/header file
++#
++# Arguments:
++#     1    Source file
++#
++function tool_c_ideal() {
++	cat "$1" | tool_spell_check | tool_c_style
+ }
+ 
+ #
+@@ -89,7 +110,7 @@ function tool_c_style() {
+ function tool_c_style_check() {
+ 	[[ -z "$1" || ! -r "$1" ]] && return
+ 
+-	tool_c_style "$1" | diff -pu --label="$1.orig" "$1" --label="$1" -
++	tool_c_ideal "$1" | diff -pu --label="$1.orig" "$1" --label="$1" -
+ }
+ 
+ #
+@@ -102,7 +123,7 @@ function tool_c_style_fix() {
+ 	[[ -z "$1" || ! -r "$1" ]] && return
+ 
+ 	tmp="$(mktemp --tmpdir=$(dirname "$1"))"
+-	tool_c_style "$1" > "$tmp"
++	tool_c_ideal "$1" > "$tmp"
+ 	mv "$tmp" "$1"
+ }
+ 
+@@ -132,6 +153,7 @@ function fix_c() {
+ # main
+ 
+ verify_deps astyle
++verify_deps codespell
+ 
+ opt_fix=0
+ 
+--- libseccomp-2.5.4.orig/tools/scmp_arch_detect.c
++++ libseccomp-2.5.4/tools/scmp_arch_detect.c
+@@ -81,6 +81,11 @@ int main(int argc, char *argv[])
+ 		case SCMP_ARCH_AARCH64:
+ 			printf("aarch64\n");
+ 			break;
++		case SCMP_ARCH_LOONGARCH64:
++			printf("loongarch64\n");
++		case SCMP_ARCH_M68K:
++			printf("m68k\n");
++			break;
+ 		case SCMP_ARCH_MIPS:
+ 			printf("mips\n");
+ 			break;
+@@ -123,6 +128,12 @@ int main(int argc, char *argv[])
+ 		case SCMP_ARCH_RISCV64:
+ 			printf("riscv64\n");
+ 			break;
++		case SCMP_ARCH_SHEB:
++			printf("sheb\n");
++			break;
++		case SCMP_ARCH_SH:
++			printf("sh\n");
++			break;
+ 		default:
+ 			printf("unknown\n");
+ 		}
+--- libseccomp-2.5.4.orig/tools/scmp_bpf_disasm.c
++++ libseccomp-2.5.4/tools/scmp_bpf_disasm.c
+@@ -484,6 +484,8 @@ int main(int argc, char *argv[])
+ 				arch = AUDIT_ARCH_ARM;
+ 			else if (strcmp(optarg, "aarch64") == 0)
+ 				arch = AUDIT_ARCH_AARCH64;
++			else if (strcmp(optarg, "loongarch64") == 0)
++				arch = AUDIT_ARCH_LOONGARCH64;
+ 			else if (strcmp(optarg, "mips") == 0)
+ 				arch = AUDIT_ARCH_MIPS;
+ 			else if (strcmp(optarg, "mipsel") == 0)
+--- libseccomp-2.5.4.orig/tools/scmp_bpf_sim.c
++++ libseccomp-2.5.4/tools/scmp_bpf_sim.c
+@@ -259,6 +259,10 @@ int main(int argc, char *argv[])
+ 				arch = AUDIT_ARCH_ARM;
+ 			else if (strcmp(optarg, "aarch64") == 0)
+ 				arch = AUDIT_ARCH_AARCH64;
++			else if (strcmp(optarg, "loongarch64") == 0)
++				arch = AUDIT_ARCH_LOONGARCH64;
++			else if (strcmp(optarg, "m68k") == 0)
++				arch = AUDIT_ARCH_M68K;
+ 			else if (strcmp(optarg, "mips") == 0)
+ 				arch = AUDIT_ARCH_MIPS;
+ 			else if (strcmp(optarg, "mipsel") == 0)
+@@ -287,6 +291,10 @@ int main(int argc, char *argv[])
+ 				arch = AUDIT_ARCH_S390X;
+ 			else if (strcmp(optarg, "riscv64") == 0)
+ 				arch = AUDIT_ARCH_RISCV64;
++			else if (strcmp(optarg, "sheb") == 0)
++				arch = AUDIT_ARCH_SH;
++			else if (strcmp(optarg, "sh") == 0)
++				arch = AUDIT_ARCH_SHEL;
+ 			else
+ 				exit_fault(EINVAL);
+ 			break;
+@@ -328,7 +336,7 @@ int main(int argc, char *argv[])
+ 		}
+ 	}
+ 
+-	/* adjust the endianess of sys_data to match the target */
++	/* adjust the endianness of sys_data to match the target */
+ 	sys_data.nr = htot32(arch, sys_data.nr);
+ 	sys_data.arch = htot32(arch, arch);
+ 	sys_data.instruction_pointer = htot64(arch,
+--- libseccomp-2.5.4.orig/tools/util.c
++++ libseccomp-2.5.4/tools/util.c
+@@ -44,6 +44,10 @@
+ #define ARCH_NATIVE		AUDIT_ARCH_ARM
+ #elif __aarch64__
+ #define ARCH_NATIVE		AUDIT_ARCH_AARCH64
++#elif __loongarch_lp64
++#define ARCH_NATIVE		AUDIT_ARCH_LOONGARCH64
++#elif __m68k__
++#define ARCH_NATIVE		AUDIT_ARCH_M68K
+ #elif __mips__ && _MIPS_SIM == _MIPS_SIM_ABI32
+ #if __MIPSEB__
+ #define ARCH_NATIVE		AUDIT_ARCH_MIPS
+@@ -80,6 +84,12 @@
+ #define ARCH_NATIVE		AUDIT_ARCH_S390
+ #elif __riscv && __riscv_xlen == 64
+ #define ARCH_NATIVE		AUDIT_ARCH_RISCV64
++#elif __sh__
++#ifdef __BIG_ENDIAN__
++#define ARCH_NATIVE		AUDIT_ARCH_SH
++#else
++#define ARCH_NATIVE		AUDIT_ARCH_SHEL
++#endif
+ #else
+ #error the simulator code needs to know about your machine type
+ #endif
+@@ -88,11 +98,11 @@
+ uint32_t arch = ARCH_NATIVE;
+ 
+ /**
+- * Convert a 16-bit target integer into the host's endianess
++ * Convert a 16-bit target integer into the host's endianness
+  * @param arch_token the architecture token
+  * @param val the 16-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ uint16_t ttoh16(uint32_t arch_token, uint16_t val)
+@@ -104,11 +114,11 @@ uint16_t ttoh16(uint32_t arch_token, uin
+ }
+ 
+ /**
+- * Convert a 32-bit target integer into the host's endianess
++ * Convert a 32-bit target integer into the host's endianness
+  * @param arch_token the architecture token
+  * @param val the 32-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ uint32_t ttoh32(uint32_t arch_token, uint32_t val)
+@@ -120,11 +130,11 @@ uint32_t ttoh32(uint32_t arch_token, uin
+ }
+ 
+ /**
+- * Convert a 32-bit host integer into the target's endianess
++ * Convert a 32-bit host integer into the target's endianness
+  * @param arch_token the architecture token
+  * @param val the 32-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ uint32_t htot32(uint32_t arch_token, uint32_t val)
+@@ -136,11 +146,11 @@ uint32_t htot32(uint32_t arch_token, uin
+ }
+ 
+ /**
+- * Convert a 64-bit host integer into the target's endianess
++ * Convert a 64-bit host integer into the target's endianness
+  * @param arch_token the architecture token
+  * @param val the 64-bit integer
+  *
+- * Convert the endianess of the supplied value and return it to the caller.
++ * Convert the endianness of the supplied value and return it to the caller.
+  *
+  */
+ uint64_t htot64(uint32_t arch_token, uint64_t val)
+--- libseccomp-2.5.4.orig/tools/util.h
++++ libseccomp-2.5.4/tools/util.h
+@@ -38,6 +38,17 @@
+ #endif /* AUDIT_ARCH_AARCH64 */
+ 
+ /**
++ * The 64-bit LoongArch architecture tokens
++ */
++/* 64-bit LoongArch audit support is upstream as of 5.19-rc1 */
++#ifndef AUDIT_ARCH_LOONGARCH64
++#ifndef EM_LOONGARCH
++#define EM_LOONGARCH		258
++#endif /* EM_LOONGARCH */
++#define AUDIT_ARCH_LOONGARCH64	(EM_LOONGARCH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
++#endif /* AUDIT_ARCH_LOONGARCH64 */
++
++/**
+  * The MIPS architecture tokens
+  */
+ #ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
diff -uNr a/debian/patches/series b/debian/patches/series
--- a/debian/patches/series	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/series	2023-06-24 01:14:33.000000000 +0800
@@ -0,0 +1,2 @@
+merge-update.patch
+fix-python-install.patch
diff -uNr a/debian/source/include-binaries b/debian/source/include-binaries
--- a/debian/source/include-binaries	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/source/include-binaries	2023-06-24 01:14:33.000000000 +0800
@@ -0,0 +1 @@
+src/python/dist/seccomp-0.0.0-py3.11-linux-loongarch64.egg
