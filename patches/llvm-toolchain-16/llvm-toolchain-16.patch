diff -uNr a/debian/clang-tools-X.Y.install.in b/debian/clang-tools-X.Y.install.in
--- a/debian/clang-tools-X.Y.install.in	2023-04-05 15:47:50.000000000 +0800
+++ b/debian/clang-tools-X.Y.install.in	2023-06-17 18:48:06.000000000 +0800
@@ -61,7 +61,7 @@
 usr/lib/llvm-@LLVM_VERSION@/libexec/intercept-c++
 usr/lib/llvm-@LLVM_VERSION@/libexec/intercept-cc
 
-[!armel !armhf !ppc64el !hurd-any !s390x !powerpc !ppc64 !mipsel !mips64el !sparc64] usr/lib/llvm-@LLVM_VERSION@/lib/clang/@LLVM_VERSION@/bin/hwasan_symbolize
+[!armel !armhf !ppc64el !hurd-any !s390x !powerpc !ppc64 !mipsel !mips64el !sparc64 !loong64] usr/lib/llvm-@LLVM_VERSION@/lib/clang/@LLVM_VERSION@/bin/hwasan_symbolize
 
 clang/tools/scan-build-@LLVM_VERSION@      usr/share/clang/
 clang/tools/scan-view-@LLVM_VERSION@       usr/share/clang/
diff -uNr a/debian/control b/debian/control
--- a/debian/control	2023-01-28 16:35:21.000000000 +0800
+++ b/debian/control	2023-06-18 18:04:48.000000000 +0800
@@ -22,15 +22,16 @@
     libctypes-ocaml-dev [amd64 arm64 armhf ppc64el riscv64 s390x],
     dh-exec, dh-ocaml [amd64 arm64 armhf ppc64el riscv64 s390x],
     libpfm4-dev [linux-any], python3-setuptools, libz3-dev,
+    llvm-spirv-16 [ loong64 ] <!stage1> |
     llvm-spirv-15 [ amd64 arm64 armel armhf mips64el mipsel ppc64el riscv64 s390x ] <!stage1> |
     llvm-spirv-14 [ amd64 arm64 armel armhf mips64el mipsel ppc64el riscv64 s390x ] <!stage1> | hello [!i386],
     spirv-tools [ linux-any ] | hello [ !i386],
     wasi-libc | hello [ !i386],
     libcurl4-dev,
-    libgrpc++-dev [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    protobuf-compiler-grpc [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    libprotobuf-dev [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    protobuf-compiler [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x]
+    libgrpc++-dev [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    protobuf-compiler-grpc [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    libprotobuf-dev [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    protobuf-compiler [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x]
 # "| hello" is for older buster/bionic distros without spirv support
 Build-Conflicts: oprofile
 Standards-Version: 4.6.2
@@ -520,7 +521,7 @@
 # ------------- lld -------------
 
 Package: lld-16
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm16 (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -530,7 +531,7 @@
  Project.
 
 Package: liblld-16
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm16 (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -544,7 +545,7 @@
 
 Package: liblld-16-dev
 Section: libdevel
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, lld-16 (= ${binary:Version}),
  liblld-16 (= ${binary:Version})
@@ -560,7 +561,7 @@
 # ------------- lldb -------------
 
 Package: lldb-16
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm16 (= ${binary:Version}), llvm-16-dev,
  python3-lldb-16
@@ -571,7 +572,7 @@
  Project, such as the Clang expression parser and LLVM disassembler.
 
 Package: liblldb-16
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm16 (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -585,7 +586,7 @@
 
 Package: python3-lldb-16
 Section: python
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${python3:Depends}, liblldb-16 (= ${binary:Version}), python3-six
 Conflicts: python3-lldb-x.y
@@ -601,7 +602,7 @@
 
 Package: liblldb-16-dev
 Section: libdevel
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, lldb-16 (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -619,7 +620,7 @@
 
 Package: libomp-16-dev
 Section: libdevel
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: libomp5-16 (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}
 Suggests: libomp-16-doc
 Breaks: libiomp-dev (<< 3.7-1), libomp-dev (<< 44)
@@ -633,7 +634,7 @@
 
 Package: libomp5-16
 Multi-Arch: same
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}
 Breaks: libomp5 (<< 44)
 Provides: libomp-x.y
@@ -646,7 +647,7 @@
 
 Package: libomp-16-doc
 Section: doc
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}, libjs-jquery
 Replaces: libiomp-x.y-doc
 Breaks: libiomp-x.y-doc
@@ -688,7 +689,7 @@
 Architecture: any
 Multi-Arch: same
 Depends: libc++1-16 (= ${binary:Version}), ${misc:Depends},
- libunwind-16-dev [amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64]
+ libunwind-16-dev [amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64]
 Breaks: libc++-dev (<< 44)
 Provides: libc++-x.y-dev
 Conflicts: libc++-x.y-dev
@@ -828,7 +829,7 @@
 
 Package: libunwind-16
 Section: libs
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Multi-Arch: same
 Depends: ${shlibs:Depends},
  ${misc:Depends}
@@ -845,7 +846,7 @@
 
 Package: libunwind-16-dev
 Section: libdevel
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Multi-Arch: same
 Depends:
  ${misc:Depends},
@@ -933,7 +934,7 @@
 Package: flang-16
 # no 32bit support
 # https://github.com/llvm/llvm-project/issues/59845
-Architecture: amd64 arm64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
+Architecture: amd64 arm64 loong64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 Provides: fortran-compiler, gfortran-mod-15
 Description: Fortran compiler
@@ -944,7 +945,7 @@
  of examples, some functionalities are still missing.
 
 Package: libflang-16-dev
-Architecture: amd64 arm64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
+Architecture: amd64 arm64 loong64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
 Section: libdevel
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 Description: Flang library - Development package
diff -uNr a/debian/control.in b/debian/control.in
--- a/debian/control.in	2023-01-28 16:35:21.000000000 +0800
+++ b/debian/control.in	2023-06-18 02:46:21.000000000 +0800
@@ -22,15 +22,16 @@
     libctypes-ocaml-dev [amd64 arm64 armhf ppc64el riscv64 s390x],
     dh-exec, dh-ocaml [amd64 arm64 armhf ppc64el riscv64 s390x],
     libpfm4-dev [linux-any], python3-setuptools, libz3-dev,
+    llvm-spirv-16 [ loong64 ] <!stage1> |
     llvm-spirv-15 [ amd64 arm64 armel armhf mips64el mipsel ppc64el riscv64 s390x ] <!stage1> |
     llvm-spirv-14 [ amd64 arm64 armel armhf mips64el mipsel ppc64el riscv64 s390x ] <!stage1> | hello [!i386],
     spirv-tools [ linux-any ] | hello [ !i386],
     wasi-libc | hello [ !i386],
     libcurl4-dev,
-    libgrpc++-dev [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    protobuf-compiler-grpc [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    libprotobuf-dev [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
-    protobuf-compiler [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x]
+    libgrpc++-dev [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    protobuf-compiler-grpc [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    libprotobuf-dev [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x],
+    protobuf-compiler [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x]
 # "| hello" is for older buster/bionic distros without spirv support
 Build-Conflicts: oprofile
 Standards-Version: 4.6.2
@@ -520,7 +521,7 @@
 # ------------- lld -------------
 
 Package: lld-@LLVM_VERSION@
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm@LLVM_VERSION@ (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -530,7 +531,7 @@
  Project.
 
 Package: liblld-@LLVM_VERSION@
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm@LLVM_VERSION@ (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -544,7 +545,7 @@
 
 Package: liblld-@LLVM_VERSION@-dev
 Section: libdevel
-Architecture: amd64 arm64 armel armhf i386 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
+Architecture: amd64 arm64 armel armhf i386 loong64 mipsel mips64el ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc alpha hppa m68k powerpcspe ppc64 sh4 sparc64 x32 riscv64
 # ia64 hurd powerpc have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, lld-@LLVM_VERSION@ (= ${binary:Version}),
  liblld-@LLVM_VERSION@ (= ${binary:Version})
@@ -560,7 +561,7 @@
 # ------------- lldb -------------
 
 Package: lldb-@LLVM_VERSION@
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm@LLVM_VERSION@ (= ${binary:Version}), llvm-@LLVM_VERSION@-dev,
  python3-lldb-@LLVM_VERSION@
@@ -571,7 +572,7 @@
  Project, such as the Clang expression parser and LLVM disassembler.
 
 Package: liblldb-@LLVM_VERSION@
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm@LLVM_VERSION@ (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -585,7 +586,7 @@
 
 Package: python3-lldb-@LLVM_VERSION@
 Section: python
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${python3:Depends}, liblldb-@LLVM_VERSION@ (= ${binary:Version}), python3-six
 Conflicts: python3-lldb-x.y
@@ -601,7 +602,7 @@
 
 Package: liblldb-@LLVM_VERSION@-dev
 Section: libdevel
-Architecture: amd64 arm64 armel armhf i386 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
+Architecture: amd64 arm64 armel armhf i386 loong64 ppc64el kfreebsd-amd64 kfreebsd-i386 s390 s390x sparc hppa m68k sh4 x32
 # ia64 hurd powerpc powerpcspe ppc64 alpha riscv64 s390x sparc64 mipsel mips64el have been removed
 Depends: ${shlibs:Depends}, ${misc:Depends}, lldb-@LLVM_VERSION@ (= ${binary:Version})
 Pre-Depends: ${misc:Pre-Depends}
@@ -619,7 +620,7 @@
 
 Package: libomp-@LLVM_VERSION@-dev
 Section: libdevel
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: libomp5-@LLVM_VERSION@ (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}
 Suggests: libomp-@LLVM_VERSION@-doc
 Breaks: libiomp-dev (<< 3.7-1), libomp-dev (<< 44)
@@ -633,7 +634,7 @@
 
 Package: libomp5-@LLVM_VERSION@
 Multi-Arch: same
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}
 Breaks: libomp5 (<< 44)
 Provides: libomp-x.y
@@ -646,7 +647,7 @@
 
 Package: libomp-@LLVM_VERSION@-doc
 Section: doc
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}, libjs-jquery
 Replaces: libiomp-x.y-doc
 Breaks: libiomp-x.y-doc
@@ -688,7 +689,7 @@
 Architecture: any
 Multi-Arch: same
 Depends: libc++1-@LLVM_VERSION@ (= ${binary:Version}), ${misc:Depends},
- libunwind-@LLVM_VERSION@-dev [amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64]
+ libunwind-@LLVM_VERSION@-dev [amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64]
 Breaks: libc++-dev (<< 44)
 Provides: libc++-x.y-dev
 Conflicts: libc++-x.y-dev
@@ -828,7 +829,7 @@
 
 Package: libunwind-@LLVM_VERSION@
 Section: libs
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Multi-Arch: same
 Depends: ${shlibs:Depends},
  ${misc:Depends}
@@ -845,7 +846,7 @@
 
 Package: libunwind-@LLVM_VERSION@-dev
 Section: libdevel
-Architecture: amd64 arm64 armhf i386 mips64el ppc64el ppc64 riscv64
+Architecture: amd64 arm64 armhf i386 loong64 mips64el ppc64el ppc64 riscv64
 Multi-Arch: same
 Depends:
  ${misc:Depends},
@@ -933,7 +934,7 @@
 Package: flang-@LLVM_VERSION@
 # no 32bit support
 # https://github.com/llvm/llvm-project/issues/59845
-Architecture: amd64 arm64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
+Architecture: amd64 arm64 loong64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 Provides: fortran-compiler, gfortran-mod-15
 Description: Fortran compiler
@@ -944,7 +945,7 @@
  of examples, some functionalities are still missing.
 
 Package: libflang-@LLVM_VERSION@-dev
-Architecture: amd64 arm64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
+Architecture: amd64 arm64 loong64 mips64el ppc64el kfreebsd-amd64 ppc64 sparc64 riscv64
 Section: libdevel
 Depends: ${shlibs:Depends}, ${misc:Depends}, ${dep:devlibs},
 Description: Flang library - Development package
diff -uNr a/debian/libclang-X.Y-dev.install.in b/debian/libclang-X.Y-dev.install.in
--- a/debian/libclang-X.Y-dev.install.in	2023-01-28 16:35:09.000000000 +0800
+++ b/debian/libclang-X.Y-dev.install.in	2023-06-17 18:48:06.000000000 +0800
@@ -9,6 +9,6 @@
 usr/lib/llvm-@LLVM_VERSION@/lib/libfindAllSymbols.a
 
 # clangd grpc architectures
-#grpc [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdRemoteIndexProto.a
-#grpc [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdRemoteIndexServiceProto.a
-#grpc [amd64 arm64 armel armhf mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdMonitoringServiceProto.a
+#grpc [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdRemoteIndexProto.a
+#grpc [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdRemoteIndexServiceProto.a
+#grpc [amd64 arm64 armel armhf loong64 mips64el mipsel ppc64 ppc64el powerpc riscv64 s390x] usr/lib/llvm-@LLVM_VERSION@/lib/libclangdMonitoringServiceProto.a
diff -uNr a/debian/libomp5-X.Y.install.in b/debian/libomp5-X.Y.install.in
--- a/debian/libomp5-X.Y.install.in	2023-02-09 02:39:56.000000000 +0800
+++ b/debian/libomp5-X.Y.install.in	2023-06-17 18:48:06.000000000 +0800
@@ -1,4 +1,4 @@
 #!/usr/bin/dh-exec
 
 usr/lib/llvm-@LLVM_VERSION@/lib/libomp*.so.5
-[amd64 arm64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget*.so.@LLVM_VERSION@
+[amd64 arm64 loong64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget*.so.@LLVM_VERSION@
diff -uNr a/debian/libomp5-X.Y.symbols.in b/debian/libomp5-X.Y.symbols.in
--- a/debian/libomp5-X.Y.symbols.in	2023-01-28 16:35:09.000000000 +0800
+++ b/debian/libomp5-X.Y.symbols.in	2023-06-17 18:48:06.000000000 +0800
@@ -294,512 +294,512 @@
  __kmp_wait_64@VERSION 0.20140926
  __kmpc_aligned_alloc@VERSION 14
  __kmpc_alloc@VERSION 8
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_10@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_10@VERSION 0.20130412
  __kmpc_atomic_16@VERSION 0.20130412
  __kmpc_atomic_1@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_20@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_20@VERSION 0.20130412
  __kmpc_atomic_2@VERSION 0.20130412
  __kmpc_atomic_32@VERSION 0.20130412
  __kmpc_atomic_4@VERSION 0.20130412
  __kmpc_atomic_8@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_1_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_1_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_2_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_2_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_4_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_4_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_8_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_8_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_add_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_mul_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_rd@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_wr@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_add@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_div@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_mul@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_rd@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_sub@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_swp@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_1_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_1_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_2_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_2_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_4_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_4_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_8_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_bool_8_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_add@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_add_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_div_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_mul@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_mul_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_sub_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx10_wr@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_add@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_div@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_mul@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_rd@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_cmplx16_sub@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_swp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_cmplx16_wr@VERSION 0.20130412
  __kmpc_atomic_cmplx4_add@VERSION 0.20130412
  __kmpc_atomic_cmplx4_add_cmplx8@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_add_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_add_cpt@VERSION 0.20130412
  __kmpc_atomic_cmplx4_div@VERSION 0.20130412
  __kmpc_atomic_cmplx4_div_cmplx8@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_div_rev@VERSION 0.20130412
  __kmpc_atomic_cmplx4_mul@VERSION 0.20130412
  __kmpc_atomic_cmplx4_mul_cmplx8@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_mul_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_mul_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_rd@VERSION 0.20130412
  __kmpc_atomic_cmplx4_sub@VERSION 0.20130412
  __kmpc_atomic_cmplx4_sub_cmplx8@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_sub_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx4_wr@VERSION 0.20130412
  __kmpc_atomic_cmplx8_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_add_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_add_cpt@VERSION 0.20130412
  __kmpc_atomic_cmplx8_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_div_rev@VERSION 0.20130412
  __kmpc_atomic_cmplx8_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_mul_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_mul_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_rd@VERSION 0.20130412
  __kmpc_atomic_cmplx8_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_wr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_end@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_sub_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_cmplx8_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_end@VERSION 0.20130412
  (arch=!ppc64 !ppc64el)__kmpc_atomic_fixed1_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_add_fp@VERSION 0.20130412
  __kmpc_atomic_fixed1_andb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_andb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_andb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_andl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_andl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_andl_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed1_div_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_div_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed1_eqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_eqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_eqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_max_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_min_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_mul_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_mul_cpt_fp@VERSION 4.0
  __kmpc_atomic_fixed1_mul_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_mul_fp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_mul_fp@VERSION 0.20130412
  __kmpc_atomic_fixed1_neqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_neqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_neqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_orb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_orb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_orb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed1_orl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_orl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_orl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_rd@VERSION 0.20130412
  __kmpc_atomic_fixed1_shl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shl_rev@VERSION 0.20130412
  __kmpc_atomic_fixed1_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_shr_rev@VERSION 0.20130412
  __kmpc_atomic_fixed1_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_wr@VERSION 0.20130412
  __kmpc_atomic_fixed1_xor@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_xor_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_add_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1_xor_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_add_fp@VERSION 4.0
  __kmpc_atomic_fixed1u_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1u_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_mul_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed1u_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_mul_fp@VERSION 4.0
  __kmpc_atomic_fixed1u_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_sub_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_sub_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed1u_sub_rev_fp@VERSION 5.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed1u_shr_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_sub_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed1u_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed1u_sub_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed1u_sub_rev_fp@VERSION 5.0
  __kmpc_atomic_fixed2_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_add_fp@VERSION 0.20130412
  __kmpc_atomic_fixed2_andb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_andb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_andb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_andl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_andl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_andl_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed2_div_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_div_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed2_eqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_eqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_eqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_max_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_min_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_mul_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_mul_cpt_fp@VERSION 4.0
  __kmpc_atomic_fixed2_mul_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_mul_fp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_mul_fp@VERSION 0.20130412
  __kmpc_atomic_fixed2_neqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_neqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_neqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_orb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_orb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_orb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed2_orl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_orl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_orl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_rd@VERSION 0.20130412
  __kmpc_atomic_fixed2_shl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shl_rev@VERSION 0.20130412
  __kmpc_atomic_fixed2_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_shr_rev@VERSION 0.20130412
  __kmpc_atomic_fixed2_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_wr@VERSION 0.20130412
  __kmpc_atomic_fixed2_xor@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_xor_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_add_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2_xor_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_add_fp@VERSION 4.0
  __kmpc_atomic_fixed2u_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2u_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_mul_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed2u_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_mul_fp@VERSION 4.0
  __kmpc_atomic_fixed2u_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_sub_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_sub_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed2u_sub_rev_fp@VERSION 5.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed2u_shr_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_sub_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed2u_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed2u_sub_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed2u_sub_rev_fp@VERSION 5.0
  __kmpc_atomic_fixed4_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_add_fp@VERSION 0.20130412
  __kmpc_atomic_fixed4_andb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_andb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_andb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_andl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_andl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_andl_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed4_div_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_div_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed4_eqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_eqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_eqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_max_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_min_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_mul_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_mul_cpt_fp@VERSION 4.0
  __kmpc_atomic_fixed4_mul_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_mul_fp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_mul_fp@VERSION 0.20130412
  __kmpc_atomic_fixed4_neqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_neqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_neqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_orb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_orb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_orb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed4_orl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_orl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_orl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_rd@VERSION 0.20130412
  __kmpc_atomic_fixed4_shl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shl_rev@VERSION 0.20130412
  __kmpc_atomic_fixed4_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_shr_rev@VERSION 0.20130412
  __kmpc_atomic_fixed4_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_wr@VERSION 0.20130412
  __kmpc_atomic_fixed4_xor@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_xor_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_add_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4_xor_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_add_fp@VERSION 4.0
  (arch=!ppc64 !ppc64el)__kmpc_atomic_fixed4u_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4u_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_mul_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed4u_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_mul_fp@VERSION 4.0
  __kmpc_atomic_fixed4u_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_sub_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_sub_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed4u_sub_rev_fp@VERSION 5.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed4u_shr_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_sub_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed4u_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed4u_sub_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed4u_sub_rev_fp@VERSION 5.0
  (arch=!ppc64 !ppc64el)__kmpc_atomic_fixed8_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_add_fp@VERSION 0.20130412
  __kmpc_atomic_fixed8_andb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_andb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_andb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_andl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_andl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_andl_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed8_div_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_div_rev_fp@VERSION 4.0
  __kmpc_atomic_fixed8_eqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_eqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_eqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_max_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_min_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_mul_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_mul_cpt_fp@VERSION 4.0
  __kmpc_atomic_fixed8_mul_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_mul_fp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_mul_fp@VERSION 0.20130412
  __kmpc_atomic_fixed8_neqv@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_neqv_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_neqv_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_orb@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_orb_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_orb_cpt@VERSION 0.20130412
  __kmpc_atomic_fixed8_orl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_orl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_orl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_rd@VERSION 0.20130412
  __kmpc_atomic_fixed8_shl@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shl_rev@VERSION 0.20130412
  __kmpc_atomic_fixed8_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_shr_rev@VERSION 0.20130412
  __kmpc_atomic_fixed8_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_wr@VERSION 0.20130412
  __kmpc_atomic_fixed8_xor@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_xor_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_add_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8_xor_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_add_fp@VERSION 4.0
  __kmpc_atomic_fixed8u_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8u_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_mul_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_fixed8u_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_mul_fp@VERSION 4.0
  __kmpc_atomic_fixed8u_shr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_cpt@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_cpt_rev@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_sub_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_sub_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed8u_sub_rev_fp@VERSION 5.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_add_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_max@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_max_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_min@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_min_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_mul_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_rd@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_wr@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_add@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_div@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_max@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_max_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_min@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_min_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_mul@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_rd@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_sub@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_swp@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_cpt_rev@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_fixed8u_shr_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_sub_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_fixed8u_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)__kmpc_atomic_fixed8u_sub_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf !arm64)__kmpc_atomic_fixed8u_sub_rev_fp@VERSION 5.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_add@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_div_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_max@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_max_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_min@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_min_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_mul@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_mul_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float10_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float10_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float10_wr@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_add@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_div@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_max@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_max_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_min@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_min_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_mul@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_rd@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float16_sub@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_swp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float16_wr@VERSION 0.20130412
  __kmpc_atomic_float4_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_add_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_add_cpt_fp@VERSION 4.0
  (arch=!ppc64 !ppc64el)__kmpc_atomic_float4_add_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_add_fp@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_add_fp@VERSION 0.20130412
  __kmpc_atomic_float4_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_float4_div_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_div_rev_fp@VERSION 4.0
  __kmpc_atomic_float4_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_max_cpt@VERSION 0.20130412
  __kmpc_atomic_float4_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_min_cpt@VERSION 0.20130412
  __kmpc_atomic_float4_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_mul_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_mul_cpt_fp@VERSION 4.0
  __kmpc_atomic_float4_mul_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_mul_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_rd@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_mul_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_rd@VERSION 0.20130412
  __kmpc_atomic_float4_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_cpt_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_cpt_rev_fp@VERSION 4.0
  __kmpc_atomic_float4_sub_float8@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_wr@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float4_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float4_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float4_wr@VERSION 0.20130412
  __kmpc_atomic_float8_add@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_add_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_add_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_add_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_add_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_add_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_add_fp@VERSION 0.20130412
  __kmpc_atomic_float8_div@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_div_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_div_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_div_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_div_rev_fp@VERSION 4.0
  __kmpc_atomic_float8_max@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_max_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_max_cpt@VERSION 0.20130412
  __kmpc_atomic_float8_min@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_min_cpt@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_min_cpt@VERSION 0.20130412
  __kmpc_atomic_float8_mul@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_mul_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_mul_cpt_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_mul_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_rd@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_mul_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_mul_cpt_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_mul_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_rd@VERSION 0.20130412
  __kmpc_atomic_float8_sub@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_cpt@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_cpt_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_cpt_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_cpt_rev_fp@VERSION 4.0
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_sub_fp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_rev@VERSION 0.20130412
-#MISSING: 7# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_rev_fp@VERSION 4.0
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_swp@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_wr@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_start@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_1_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_1_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_2_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_2_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_4_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_4_cas_cpt@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_8_cas@VERSION 14
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_8_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_cpt@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_cpt_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_cpt_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_cpt_rev_fp@VERSION 4.0
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !armel !armhf)__kmpc_atomic_float8_sub_fp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_sub_rev@VERSION 0.20130412
+#MISSING: 7# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)__kmpc_atomic_float8_sub_rev_fp@VERSION 4.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_swp@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_float8_wr@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_start@VERSION 0.20130412
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_1_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_1_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_2_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_2_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_4_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_4_cas_cpt@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_8_cas@VERSION 14
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf !riscv64)__kmpc_atomic_val_8_cas_cpt@VERSION 14
  __kmpc_barrier@VERSION 0.20130412
  __kmpc_barrier_master@VERSION 0.20130412
  __kmpc_barrier_master_nowait@VERSION 0.20130412
@@ -1015,7 +1015,7 @@
  kmpc_set_stacksize@VERSION 0.20130412
  kmpc_set_stacksize_s@VERSION 0.20130412
  kmpc_unset_affinity_mask_proc@VERSION 0.20130412
-#MISSING: 14# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)libomp_start_tool@VERSION 14
+#MISSING: 14# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)libomp_start_tool@VERSION 14
  omp_aligned_alloc@VERSION 14
  omp_aligned_calloc@VERSION 14
  omp_alloc@VERSION 8
@@ -1277,7 +1277,7 @@
  omp_set_schedule_@VERSION 0.20130412
  omp_set_teams_thread_limit@VERSION 13
  omp_set_teams_thread_limit_@VERSION 13
-#MISSING: 8# (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)omp_state_info@VERSION 6.0
+#MISSING: 8# (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !arm64 !armel !armhf)omp_state_info@VERSION 6.0
  omp_test_lock@OMP_1.0 0.20131209
  omp_test_lock@OMP_3.0 0.20131209
  omp_test_lock@VERSION 0.20130412
@@ -1314,4 +1314,4 @@
  ompc_set_nested@VERSION 0.20130412
  ompc_set_num_threads@VERSION 0.20130412
  ompc_set_schedule@VERSION 0.20130412
- (arch=!mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)ompt_start_tool@VERSION 6.0
+ (arch=!loong64 !mips !mipsel !ppc64 !ppc64el !mips64 !mips64el !armel !armhf)ompt_start_tool@VERSION 6.0
diff -uNr a/debian/libomp-X.Y-dev.install.in b/debian/libomp-X.Y-dev.install.in
--- a/debian/libomp-X.Y-dev.install.in	2023-03-21 17:46:16.000000000 +0800
+++ b/debian/libomp-X.Y-dev.install.in	2023-06-17 18:48:06.000000000 +0800
@@ -7,16 +7,16 @@
 [!armhf !mips64el] /usr/lib/llvm-@LLVM_VERSION@/lib/libarcher_static.a
 [!armhf !mips64el] /usr/lib/llvm-@LLVM_VERSION@/lib/libarcher.so
 
-[amd64 ppc64el arm64 mips64el ppc64 riscv64] /usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget.devicertl.a
+[amd64 ppc64el arm64 loong64 mips64el ppc64 riscv64] /usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget.devicertl.a
 
-[amd64 ppc64el arm64 mips64el ppc64 riscv64] /usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget-*.bc
+[amd64 ppc64el arm64 loong64 mips64el ppc64 riscv64] /usr/lib/llvm-@LLVM_VERSION@/lib/libomptarget-*.bc
 
 usr/lib/llvm-@LLVM_VERSION@/lib/cmake/openmp/*.cmake
 
-[amd64 arm64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/bin/llvm-omp-device-info
-[amd64 arm64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/bin/llvm-omp-kernel-replay
+[amd64 arm64 loong64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/bin/llvm-omp-device-info
+[amd64 arm64 loong64 mips64el ppc64el ppc64 riscv64] usr/lib/llvm-@LLVM_VERSION@/bin/llvm-omp-kernel-replay
 
-[amd64 arm64 mips64el ppc64el ppc64 riscv64] usr/bin/llvm-omp-device-info-@LLVM_VERSION@
-[amd64 arm64 mips64el ppc64el ppc64 riscv64] usr/bin/llvm-omp-kernel-replay-@LLVM_VERSION@
+[amd64 arm64 loong64 mips64el ppc64el ppc64 riscv64] usr/bin/llvm-omp-device-info-@LLVM_VERSION@
+[amd64 arm64 loong64 mips64el ppc64el ppc64 riscv64] usr/bin/llvm-omp-kernel-replay-@LLVM_VERSION@
 
 [!armhf] usr/lib/llvm-@LLVM_VERSION@/share/gdb/python/ompd/
diff -uNr a/debian/patches/fix-firefox-compile-rust.patch b/debian/patches/fix-firefox-compile-rust.patch
--- a/debian/patches/fix-firefox-compile-rust.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/fix-firefox-compile-rust.patch	2023-06-19 02:10:57.000000000 +0800
@@ -0,0 +1,106 @@
+diff -ur b/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp c/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp
+--- b/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp	2023-06-17 14:49:47.317634021 +0800
++++ c/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp	2023-06-19 02:06:16.719350995 +0800
+@@ -445,12 +445,7 @@
+ // scope then create and insert DIEs for these variables.
+ DIE &DwarfCompileUnit::updateSubprogramScopeDIE(const DISubprogram *SP) {
+   DIE *SPDie = getOrCreateSubprogramDIE(SP, includeMinimalInlineScopes());
+-  auto *ContextCU = static_cast<DwarfCompileUnit *>(SPDie->getUnit());
+-  return ContextCU->updateSubprogramScopeDIEImpl(SP, SPDie);
+-}
+ 
+-DIE &DwarfCompileUnit::updateSubprogramScopeDIEImpl(const DISubprogram *SP,
+-                                                    DIE *SPDie) {
+   SmallVector<RangeSpan, 2> BB_List;
+   // If basic block sections are on, ranges for each basic block section has
+   // to be emitted separately.
+@@ -1020,7 +1015,6 @@
+ DIE &DwarfCompileUnit::constructSubprogramScopeDIE(const DISubprogram *Sub,
+                                                    LexicalScope *Scope) {
+   DIE &ScopeDIE = updateSubprogramScopeDIE(Sub);
+-  auto *ContextCU = static_cast<DwarfCompileUnit *>(ScopeDIE.getUnit());
+ 
+   if (Scope) {
+     assert(!Scope->getInlinedAt());
+@@ -1028,10 +1022,8 @@
+     // Collect lexical scope children first.
+     // ObjectPointer might be a local (non-argument) local variable if it's a
+     // block's synthetic this pointer.
+-    if (DIE *ObjectPointer =
+-            ContextCU->createAndAddScopeChildren(Scope, ScopeDIE))
+-      ContextCU->addDIEEntry(ScopeDIE, dwarf::DW_AT_object_pointer,
+-                             *ObjectPointer);
++    if (DIE *ObjectPointer = createAndAddScopeChildren(Scope, ScopeDIE))
++      addDIEEntry(ScopeDIE, dwarf::DW_AT_object_pointer, *ObjectPointer);
+   }
+ 
+   // If this is a variadic function, add an unspecified parameter.
+diff -ur b/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h c/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h
+--- b/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h	2023-06-17 14:49:47.317634021 +0800
++++ c/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h	2023-06-19 02:05:24.163358388 +0800
+@@ -192,7 +192,6 @@
+   /// variables in this scope then create and insert DIEs for these
+   /// variables.
+   DIE &updateSubprogramScopeDIE(const DISubprogram *SP);
+-  DIE &updateSubprogramScopeDIEImpl(const DISubprogram *SP, DIE *SPDie);
+ 
+   void constructScopeDIE(LexicalScope *Scope, DIE &ParentScopeDIE);
+ 
+Only in c/llvm/lib/CodeGen/AsmPrinter: DwarfCompileUnit.h.orig
+diff -ur b/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp c/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp
+--- b/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp	2023-06-17 14:49:47.317634021 +0800
++++ c/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp	2023-06-19 02:05:24.167358388 +0800
+@@ -1160,6 +1160,11 @@
+   if (DIE *SPDie = getDIE(SP))
+     return SPDie;
+ 
++  // If the scope and SP are not in the same CU after LTO, we prefer the DIE
++  // of SP's CU as ParentDIE.
++  if (this != static_cast<DwarfUnit *>(ContextDIE->getUnit()))
++    ContextDIE = &getUnitDie();
++
+   if (auto *SPDecl = SP->getDeclaration()) {
+     if (!Minimal) {
+       // Add subprogram definitions to the CU die directly.
+@@ -1177,8 +1182,8 @@
+   if (SP->isDefinition())
+     return &SPDie;
+ 
+-  static_cast<DwarfUnit *>(SPDie.getUnit())
+-      ->applySubprogramAttributes(SP, SPDie);
++  applySubprogramAttributes(SP, SPDie);
++
+   return &SPDie;
+ }
+ 
+diff -ur b/llvm/test/DebugInfo/Generic/cross-cu-inlining-2.ll c/llvm/test/DebugInfo/Generic/cross-cu-inlining-2.ll
+--- b/llvm/test/DebugInfo/Generic/cross-cu-inlining-2.ll	2023-06-17 14:49:51.317634303 +0800
++++ c/llvm/test/DebugInfo/Generic/cross-cu-inlining-2.ll	2023-06-19 02:05:24.167358388 +0800
+@@ -43,12 +43,7 @@
+ ; CHECK:     DW_TAG_structure_type
+ ; CHECK: [[INIT:0x.*]]: DW_TAG_subprogram
+ ; CHECK;         DW_AT_name [DW_FORM_strp]  ({{.*}} = "init")
+-; CHECK:       DW_TAG_subprogram
+-; CHECK;         DW_AT_name [DW_FORM_strp]  ({{.*}} = "bar")
+-; CHECK:         DW_TAG_inlined_subroutine
+-; CHECK:           DW_AT_abstract_origin [DW_FORM_ref_addr] (0x00000000[[GOO:.*]] "goo")
+ ; CHECK:         NULL
+-; CHECK:       NULL
+ ; CHECK:     DW_TAG_structure_type
+ ; CHECK:       DW_TAG_subprogram
+ ; CHECK;         DW_AT_name [DW_FORM_strp]  ({{.*}} = "foo")
+@@ -60,7 +55,12 @@
+ ; CHECK:   NULL
+ ; CHECK: DW_TAG_compile_unit
+ ; CHECK:   DW_TAG_module
+-; CHECK: 0x[[GOO]]: DW_TAG_subprogram
++; CHECK: [[GOO:0x.*]]: DW_TAG_subprogram
+ ; CHECK;       DW_AT_name [DW_FORM_strp]  ({{.*}} = "goo")
+ ; CHECK:     NULL
++; CHECK:   DW_TAG_subprogram
++; CHECK;     DW_AT_name [DW_FORM_strp]  ({{.*}} = "bar")
++; CHECK:     DW_TAG_inlined_subroutine
++; CHECK:       DW_AT_abstract_origin [DW_FORM_ref4] ({{.*}} => {[[GOO]]} "goo")
++; CHECK:     NULL
+ ; CHECK:   NULL
+Only in c/llvm/test/DebugInfo/Generic: cross-cu.ll
diff -uNr a/debian/patches/llvm-16.0.6-loong64-backport-msan-lld-csrwr.patch b/debian/patches/llvm-16.0.6-loong64-backport-msan-lld-csrwr.patch
--- a/debian/patches/llvm-16.0.6-loong64-backport-msan-lld-csrwr.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/llvm-16.0.6-loong64-backport-msan-lld-csrwr.patch	2023-06-17 18:50:02.000000000 +0800
@@ -0,0 +1,2784 @@
+diff -uNr a/lld/ELF/Arch/LoongArch.cpp b/lld/ELF/Arch/LoongArch.cpp
+--- a/lld/ELF/Arch/LoongArch.cpp	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/ELF/Arch/LoongArch.cpp	2023-06-17 14:52:43.253642791 +0800
+@@ -0,0 +1,681 @@
++//===- LoongArch.cpp ------------------------------------------------------===//
++//
++// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
++// See https://llvm.org/LICENSE.txt for license information.
++// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
++//
++//===----------------------------------------------------------------------===//
++
++#include "InputFiles.h"
++#include "OutputSections.h"
++#include "Symbols.h"
++#include "SyntheticSections.h"
++#include "Target.h"
++
++using namespace llvm;
++using namespace llvm::object;
++using namespace llvm::support::endian;
++using namespace llvm::ELF;
++using namespace lld;
++using namespace lld::elf;
++
++// The LoongArch `pcalau12i` is behaviorally equivalent to the AArch64 `adrp`,
++// so a similar concept of "page" also applies here. A "page" is in fact just
++// another way to refer to the 12-bit range allowed by the immediate field of
++// the addi/ld/st instructions.
++//
++// Note: "pcalau12i" stands for something like "PC aligned add upper, from 12th
++// bit, immediate"; LoongArch instructions have no canonical full names,
++// neither English nor Chinese ones, according to the ISA manual.
++static uint64_t getLoongArchPage(uint64_t p) {
++  return p & ~static_cast<uint64_t>(0xFFF);
++}
++
++// Calculate the adjusted page offset between dest and PC.
++//
++// We must specially handle the cases when the low 12 bits of dest are seen
++// as negative, because the instructions consuming it (ld, st, addi, etc.)
++// all sign-extend the immediate, unlike AArch64. The higher bits need
++// tweaking too, due to potential usage in patterns like:
++//
++//     pcalau12i A, %foo_hi20(sym)
++//     addi.d    T, zero, %foo_lo12(sym)
++//     lu32i.d   T, %foo64_lo20(sym)
++//     lu52i.d   T, T, %foo64_hi12(sym)
++//     ldx.d     A, A, T
++//
++// in which case the "pc + hi20" part is separately constructed from the rest
++// which includes the higher 32-bit half and lo12, so the higher 32 bits need a
++// conditional nudge too, due to the signed addition performed by the ldx/stx.
++uint64_t elf::getLoongArchPageOffset(uint64_t dest, uint64_t pc) {
++  uint64_t result = getLoongArchPage(dest) - getLoongArchPage(pc);
++  if ((dest & 0xfff) > 0x7ff) {
++    result += 0x1000;
++    if (static_cast<int64_t>(result) > 0)
++      result -= 0x100000000;
++  }
++  return result;
++}
++
++namespace {
++
++class LoongArch final : public TargetInfo {
++public:
++  LoongArch();
++  uint32_t calcEFlags() const override;
++  int64_t getImplicitAddend(const uint8_t *buf, RelType type) const override;
++  void writeGotHeader(uint8_t *buf) const override;
++  void writeGotPlt(uint8_t *buf, const Symbol &s) const override;
++  void writeIgotPlt(uint8_t *buf, const Symbol &s) const override;
++  void writePltHeader(uint8_t *buf) const override;
++  void writePlt(uint8_t *buf, const Symbol &sym,
++                uint64_t pltEntryAddr) const override;
++  RelType getDynRel(RelType type) const override;
++  RelExpr getRelExpr(RelType type, const Symbol &s,
++                     const uint8_t *loc) const override;
++  bool usesOnlyLowPageBits(RelType type) const override;
++  void relocate(uint8_t *loc, const Relocation &rel,
++                uint64_t val) const override;
++};
++
++} // end anonymous namespace
++
++const uint64_t dtpOffset = 0;
++
++enum Op {
++  SUB_W = 0x00110000,
++  SUB_D = 0x00118000,
++  BREAK = 0x002a0000,
++  SRLI_W = 0x00448000,
++  SRLI_D = 0x00450000,
++  ADDI_W = 0x02800000,
++  ADDI_D = 0x02c00000,
++  ANDI = 0x03400000,
++  PCADDU12I = 0x1c000000,
++  LD_W = 0x28800000,
++  LD_D = 0x28c00000,
++  JIRL = 0x4c000000,
++};
++
++enum Reg {
++  R_ZERO = 0,
++  R_RA = 1,
++  R_TP = 2,
++  R_T0 = 12,
++  R_T1 = 13,
++  R_T2 = 14,
++  R_T3 = 15,
++};
++
++static uint32_t hi20(uint32_t val) { return (val + 0x800) >> 12; }
++static uint32_t lo12(uint32_t val) { return val & 0xfff; }
++
++static uint32_t insn(uint32_t op, uint32_t d, uint32_t j, uint32_t k) {
++  return op | d | (j << 5) | (k << 10);
++}
++
++// Extract bits v[begin:end], where range is inclusive.
++static uint32_t extractBits(uint64_t v, uint32_t begin, uint32_t end) {
++  return begin == 63 ? v >> end : (v & ((1ULL << (begin + 1)) - 1)) >> end;
++}
++
++static uint32_t setD5k16(uint32_t insn, uint32_t imm) {
++  uint32_t immLo = extractBits(imm, 15, 0);
++  uint32_t immHi = extractBits(imm, 20, 16);
++  return (insn & 0xfc0003e0) | (immLo << 10) | immHi;
++}
++
++static uint32_t setD10k16(uint32_t insn, uint32_t imm) {
++  uint32_t immLo = extractBits(imm, 15, 0);
++  uint32_t immHi = extractBits(imm, 25, 16);
++  return (insn & 0xfc000000) | (immLo << 10) | immHi;
++}
++
++static uint32_t setJ20(uint32_t insn, uint32_t imm) {
++  return (insn & 0xfe00001f) | (extractBits(imm, 19, 0) << 5);
++}
++
++static uint32_t setK12(uint32_t insn, uint32_t imm) {
++  return (insn & 0xffc003ff) | (extractBits(imm, 11, 0) << 10);
++}
++
++static uint32_t setK16(uint32_t insn, uint32_t imm) {
++  return (insn & 0xfc0003ff) | (extractBits(imm, 15, 0) << 10);
++}
++
++static bool isJirl(uint32_t insn) {
++  return (insn & 0xfc000000) == JIRL;
++}
++
++LoongArch::LoongArch() {
++  // The LoongArch ISA itself does not have a limit on page sizes. According to
++  // the ISA manual, the PS (page size) field in MTLB entries and CSR.STLBPS is
++  // 6 bits wide, meaning the maximum page size is 2^63 which is equivalent to
++  // "unlimited".
++  // However, practically the maximum usable page size is constrained by the
++  // kernel implementation, and 64KiB is the biggest non-huge page size
++  // supported by Linux as of v6.1.
++  defaultMaxPageSize = 65536;
++  write32(trapInstr.data(), BREAK); // break 0
++
++  copyRel = R_LARCH_COPY;
++  pltRel = R_LARCH_JUMP_SLOT;
++  relativeRel = R_LARCH_RELATIVE;
++  iRelativeRel = R_LARCH_IRELATIVE;
++
++  if (config->is64) {
++    symbolicRel = R_LARCH_64;
++    tlsModuleIndexRel = R_LARCH_TLS_DTPMOD64;
++    tlsOffsetRel = R_LARCH_TLS_DTPREL64;
++    tlsGotRel = R_LARCH_TLS_TPREL64;
++  } else {
++    symbolicRel = R_LARCH_32;
++    tlsModuleIndexRel = R_LARCH_TLS_DTPMOD32;
++    tlsOffsetRel = R_LARCH_TLS_DTPREL32;
++    tlsGotRel = R_LARCH_TLS_TPREL32;
++  }
++
++  gotRel = symbolicRel;
++
++  // .got[0] = _DYNAMIC
++  gotHeaderEntriesNum = 1;
++
++  // .got.plt[0] = _dl_runtime_resolve, .got.plt[1] = link_map
++  gotPltHeaderEntriesNum = 2;
++
++  pltHeaderSize = 32;
++  pltEntrySize = 16;
++  ipltEntrySize = 16;
++}
++
++static uint32_t getEFlags(InputFile *f) {
++  if (config->is64)
++    return cast<ObjFile<ELF64LE>>(f)->getObj().getHeader().e_flags;
++  return cast<ObjFile<ELF32LE>>(f)->getObj().getHeader().e_flags;
++}
++
++uint32_t LoongArch::calcEFlags() const {
++  // If there are only binary input files (from -b binary), use a
++  // value of 0 for the ELF header flags.
++  if (ctx.objectFiles.empty())
++    return 0;
++
++  uint32_t target = getEFlags(ctx.objectFiles.front());
++
++  for (InputFile *f : ctx.objectFiles) {
++    if ((getEFlags(f) & EF_LOONGARCH_ABI_MODIFIER_MASK) !=
++        (target & EF_LOONGARCH_ABI_MODIFIER_MASK))
++      error(toString(f) +
++            ": cannot link object files with different ABI");
++
++    // We cannot process psABI v1.x / object ABI v0 files (containing stack
++    // relocations), unlike ld.bfd.
++    //
++    // Instead of blindly accepting every v0 object and only failing at
++    // relocation processing time, just disallow interlink altogether. We
++    // don't expect significant usage of object ABI v0 in the wild (the old
++    // world may continue using object ABI v0 for a while, but as it's not
++    // binary-compatible with the upstream i.e. new-world ecosystem, it's not
++    // being considered here).
++    //
++    // There are briefly some new-world systems with object ABI v0 binaries too.
++    // It is because these programs were built before v1 was finalized.
++    // These are not supported either due to the extremely small number of them,
++    // and the few impacted users are advised to simply rebuild world or
++    // reinstall a recent system.
++    if ((getEFlags(f) & EF_LOONGARCH_OBJABI_MASK) != EF_LOONGARCH_OBJABI_V1)
++      error(toString(f) + ": unsupported object file ABI version");
++  }
++
++  return target;
++}
++
++int64_t LoongArch::getImplicitAddend(const uint8_t *buf, RelType type) const {
++  switch (type) {
++  default:
++    internalLinkerError(getErrorLocation(buf),
++                        "cannot read addend for relocation " + toString(type));
++    return 0;
++  case R_LARCH_32:
++  case R_LARCH_TLS_DTPMOD32:
++  case R_LARCH_TLS_DTPREL32:
++  case R_LARCH_TLS_TPREL32:
++    return SignExtend64<32>(read32le(buf));
++  case R_LARCH_64:
++  case R_LARCH_TLS_DTPMOD64:
++  case R_LARCH_TLS_DTPREL64:
++  case R_LARCH_TLS_TPREL64:
++    return read64le(buf);
++  case R_LARCH_RELATIVE:
++  case R_LARCH_IRELATIVE:
++    return config->is64 ? read64le(buf) : read32le(buf);
++  case R_LARCH_NONE:
++  case R_LARCH_JUMP_SLOT:
++    // These relocations are defined as not having an implicit addend.
++    return 0;
++  }
++}
++
++void LoongArch::writeGotHeader(uint8_t *buf) const {
++  if (config->is64)
++    write64le(buf, mainPart->dynamic->getVA());
++  else
++    write32le(buf, mainPart->dynamic->getVA());
++}
++
++void LoongArch::writeGotPlt(uint8_t *buf, const Symbol &s) const {
++  if (config->is64)
++    write64le(buf, in.plt->getVA());
++  else
++    write32le(buf, in.plt->getVA());
++}
++
++void LoongArch::writeIgotPlt(uint8_t *buf, const Symbol &s) const {
++  if (config->writeAddends) {
++    if (config->is64)
++      write64le(buf, s.getVA());
++    else
++      write32le(buf, s.getVA());
++  }
++}
++
++void LoongArch::writePltHeader(uint8_t *buf) const {
++  // The LoongArch PLT is currently structured just like that of RISCV.
++  // Annoyingly, this means the PLT is still using `pcaddu12i` to perform
++  // PC-relative addressing (because `pcaddu12i` is the same as RISCV `auipc`),
++  // in contrast to the AArch64-like page-offset scheme with `pcalau12i` that
++  // is used everywhere else involving PC-relative operations in the LoongArch
++  // ELF psABI v2.00.
++  // The `pcrel_{hi20,lo12}` operators are illustrative only and not really
++  // supported by LoongArch assemblers.
++  //
++  // 1: pcaddu12i $t2, %pcrel_hi20(.got.plt)
++  //    sub.[wd]  $t1, $t1, $t3
++  //    ld.[wd]   $t3, $t2, %pcrel_lo12(1b)  ; t3 = _dl_runtime_resolve
++  //    addi.[wd] $t1, $t1, -pltHeaderSize-12; t1 = &.plt[i] - &.plt[0]
++  //    addi.[wd] $t0, $t2, %pcrel_lo12(1b)
++  //    srli.[wd] $t1, $t1, (is64?1:2)       ; t1 = &.got.plt[i] - &.got.plt[0]
++  //    ld.[wd]   $t0, $t0, Wordsize(t0)     ; t0 = link_map
++  //    jr        $t3
++  uint32_t offset = in.gotPlt->getVA() - in.plt->getVA();
++  uint32_t sub = config->is64 ? SUB_D : SUB_W;
++  uint32_t ld = config->is64 ? LD_D : LD_W;
++  uint32_t addi = config->is64 ? ADDI_D : ADDI_W;
++  uint32_t srli = config->is64 ? SRLI_D : SRLI_W;
++  write32le(buf + 0, insn(PCADDU12I, R_T2, hi20(offset), 0));
++  write32le(buf + 4, insn(sub, R_T1, R_T1, R_T3));
++  write32le(buf + 8, insn(ld, R_T3, R_T2, lo12(offset)));
++  write32le(buf + 12, insn(addi, R_T1, R_T1, lo12(-target->pltHeaderSize - 12)));
++  write32le(buf + 16, insn(addi, R_T0, R_T2, lo12(offset)));
++  write32le(buf + 20, insn(srli, R_T1, R_T1, config->is64 ? 1 : 2));
++  write32le(buf + 24, insn(ld, R_T0, R_T0, config->wordsize));
++  write32le(buf + 28, insn(JIRL, R_ZERO, R_T3, 0));
++}
++
++void LoongArch::writePlt(uint8_t *buf, const Symbol &sym,
++                     uint64_t pltEntryAddr) const {
++  // See the comment in writePltHeader for reason why pcaddu12i is used instead
++  // of the pcalau12i that's more commonly seen in the ELF psABI v2.0 days.
++  //
++  // 1: pcaddu12i $t3, %pcrel_hi20(f@.got.plt)
++  //    ld.[wd]   $t3, $t3, %pcrel_lo12(1b)
++  //    jirl      $t1, $t3, 0
++  //    nop
++  uint32_t offset = sym.getGotPltVA() - pltEntryAddr;
++  write32le(buf + 0, insn(PCADDU12I, R_T3, hi20(offset), 0));
++  write32le(buf + 4,
++            insn(config->is64 ? LD_D : LD_W, R_T3, R_T3, lo12(offset)));
++  write32le(buf + 8, insn(JIRL, R_T1, R_T3, 0));
++  write32le(buf + 12, insn(ANDI, R_ZERO, R_ZERO, 0));
++}
++
++RelType LoongArch::getDynRel(RelType type) const {
++  return type == target->symbolicRel ? type
++                                     : static_cast<RelType>(R_LARCH_NONE);
++}
++
++RelExpr LoongArch::getRelExpr(const RelType type, const Symbol &s,
++                              const uint8_t *loc) const {
++  switch (type) {
++  case R_LARCH_NONE:
++  case R_LARCH_MARK_LA:
++  case R_LARCH_MARK_PCREL:
++    return R_NONE;
++  case R_LARCH_32:
++  case R_LARCH_64:
++  case R_LARCH_ABS_HI20:
++  case R_LARCH_ABS_LO12:
++  case R_LARCH_ABS64_LO20:
++  case R_LARCH_ABS64_HI12:
++    return R_ABS;
++  case R_LARCH_PCALA_LO12:
++    // This may well be just R_ABS and nothing more, but unfortunately some
++    // people had the brilliant idea of reusing the R_LARCH_PCALA_LO12 reloc on
++    // JIRLs, for implementing the medium code model, seemingly for avoiding
++    // having to add another reloc type just for that. The intended use case is
++    // for making the libc_nonshared.a of glibc 2.37+ usable with large
++    // applications like Firefox or Chromium, where an R_LARCH_B26 will overflow
++    // otherwise. See [1] for details.
++    //
++    // This is bad for multiple reasons:
++    //
++    // * R_LARCH_PCALA_LO12 just places its computed value unmodified, but JIRL
++    //   expects its immediate to be pre-shifted by 2 bits, making the reloc
++    //   behavior dependent on the underlying input section content;
++    // * R_LARCH_PCALA_LO12 leaves the upper 16-12+2=6 bits of JIRL's immediate
++    //   operand unusable, making the usage forever a kludge: a proper reloc
++    //   type has to be added *anyway*, to be able to leverage the PCADDU18I +
++    //   JIRL combo, for example.
++    //   (In this case an ISA revision (!) is arguably necessary, because there
++    //   is not a PCALAU18I for stylistic consistency with the other psABI v2.00
++    //   relocs. If PCADDU18I is to be used anyway, that would mean the new
++    //   relocs are PCREL-style instead of PCALA; so for consistency, PCREL
++    //   relocs for the other psABI v2.00 relocs should be added as well...)
++    // * Inspection into the input section must be performed for every
++    //   R_LARCH_PCALA_LO12 record, which is one of the most frequently used
++    //   LoongArch reloc types, but usage of the medium code model is not nearly
++    //   as popular, so arguably ~100% of the checks are in fact wasted for very
++    //   little gain.
++    //
++    // The problem is long known, and already reported with a suggested fix
++    // back in September 2022 [2]. But the pull request has not received any
++    // comment since then, and object code with this usage will soon appear with
++    // the release of glibc 2.37, so we have no choice but to carry the same
++    // kind of workaround as the BFD linker does.
++    //
++    // [1]: https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=9f482b73f41a9a1bbfb173aad0733d1c824c788a
++    // [2]: https://github.com/loongson/LoongArch-Documentation/pull/69
++    return isJirl(read32le(loc)) ? R_PLT : R_ABS;
++  case R_LARCH_TLS_DTPREL32:
++  case R_LARCH_TLS_DTPREL64:
++    return R_DTPREL;
++  case R_LARCH_TLS_TPREL32:
++  case R_LARCH_TLS_TPREL64:
++  case R_LARCH_TLS_LE_HI20:
++  case R_LARCH_TLS_LE_LO12:
++  case R_LARCH_TLS_LE64_LO20:
++  case R_LARCH_TLS_LE64_HI12:
++    return R_TPREL;
++  case R_LARCH_ADD8:
++  case R_LARCH_ADD16:
++  case R_LARCH_ADD32:
++  case R_LARCH_ADD64:
++  case R_LARCH_SUB8:
++  case R_LARCH_SUB16:
++  case R_LARCH_SUB32:
++  case R_LARCH_SUB64:
++    // The LoongArch add/sub relocs behave like the RISCV counterparts; reuse
++    // the RelExpr to avoid code duplication.
++    return R_RISCV_ADD;
++  case R_LARCH_32_PCREL:
++    return R_PC;
++  case R_LARCH_B16:
++  case R_LARCH_B21:
++  case R_LARCH_B26:
++    return R_PLT_PC;
++  case R_LARCH_GOT_PC_HI20:
++  case R_LARCH_GOT64_PC_LO20:
++  case R_LARCH_GOT64_PC_HI12:
++  case R_LARCH_TLS_IE_PC_HI20:
++  case R_LARCH_TLS_IE64_PC_LO20:
++  case R_LARCH_TLS_IE64_PC_HI12:
++    return R_LOONGARCH_GOT_PAGE_PC;
++  case R_LARCH_GOT_PC_LO12:
++  case R_LARCH_TLS_IE_PC_LO12:
++    return R_LOONGARCH_GOT;
++  case R_LARCH_TLS_LD_PC_HI20:
++  case R_LARCH_TLS_GD_PC_HI20:
++    return R_LOONGARCH_TLSGD_PAGE_PC;
++  case R_LARCH_PCALA_HI20:
++    // Why not R_LOONGARCH_PAGE_PC, majority of references don't go through PLT
++    // anyway so why waste time checking only to get everything relaxed back to
++    // it?
++    //
++    // This is again due to the R_LARCH_PCALA_LO12 on JIRL case, where we want
++    // both the HI20 and LO12 to potentially refer to the PLT. But in reality
++    // the HI20 reloc appears earlier, and the relocs don't contain enough
++    // information to let us properly resolve semantics per symbol.
++    // Unlike RISCV, our LO12 relocs *do not* point to their corresponding HI20
++    // relocs, hence it is nearly impossible to 100% accurately determine each
++    // HI20's "flavor" without taking big performance hits, in the presence of
++    // edge cases (e.g. HI20 without pairing LO12, paired LO12 placed so far
++    // apart that relationship is not certain anymore), and programmer mistakes
++    // (e.g. as outlined in https://github.com/loongson/LoongArch-Documentation/pull/69).
++    //
++    // Ideally we would scan in an extra pass for all LO12s on JIRL, then mark
++    // every HI20 reloc referring to the same symbol differently; this is not
++    // feasible with the current function signature of getRelExpr that doesn't
++    // allow for such inter-pass state.
++    //
++    // So, unfortunately we have to again workaround this quirk the same way as
++    // BFD: assuming every R_LARCH_PCALA_HI20 is potentially PLT needing, only
++    // relaxing to R_LOONGARCH_PAGE_PC if it's known not so at a later stage.
++    return R_LOONGARCH_PLT_PAGE_PC;
++  case R_LARCH_PCALA64_LO20:
++  case R_LARCH_PCALA64_HI12:
++    return R_LOONGARCH_PAGE_PC;
++  case R_LARCH_GOT_HI20:
++  case R_LARCH_GOT_LO12:
++  case R_LARCH_GOT64_LO20:
++  case R_LARCH_GOT64_HI12:
++  case R_LARCH_TLS_IE_HI20:
++  case R_LARCH_TLS_IE_LO12:
++  case R_LARCH_TLS_IE64_LO20:
++  case R_LARCH_TLS_IE64_HI12:
++    return R_GOT;
++  case R_LARCH_TLS_LD_HI20:
++    return R_TLSLD_GOT;
++  case R_LARCH_TLS_GD_HI20:
++    return R_TLSGD_GOT;
++  case R_LARCH_RELAX:
++    // LoongArch linker relaxation is not defined yet.
++    return R_NONE;
++
++  // A stack machine (read: global mutable state) is necessary for properly
++  // computing these relocs, and these relocs are already deprecated after
++  // the release of LoongArch ELF psABI v2.00, so we are not going to
++  // implement them.
++  case R_LARCH_SOP_PUSH_PCREL:
++  case R_LARCH_SOP_PUSH_ABSOLUTE:
++  case R_LARCH_SOP_PUSH_DUP:
++  case R_LARCH_SOP_PUSH_GPREL:
++  case R_LARCH_SOP_PUSH_TLS_TPREL:
++  case R_LARCH_SOP_PUSH_TLS_GOT:
++  case R_LARCH_SOP_PUSH_TLS_GD:
++  case R_LARCH_SOP_PUSH_PLT_PCREL:
++  case R_LARCH_SOP_ASSERT:
++  case R_LARCH_SOP_NOT:
++  case R_LARCH_SOP_SUB:
++  case R_LARCH_SOP_SL:
++  case R_LARCH_SOP_SR:
++  case R_LARCH_SOP_ADD:
++  case R_LARCH_SOP_AND:
++  case R_LARCH_SOP_IF_ELSE:
++  case R_LARCH_SOP_POP_32_S_10_5:
++  case R_LARCH_SOP_POP_32_U_10_12:
++  case R_LARCH_SOP_POP_32_S_10_12:
++  case R_LARCH_SOP_POP_32_S_10_16:
++  case R_LARCH_SOP_POP_32_S_10_16_S2:
++  case R_LARCH_SOP_POP_32_S_5_20:
++  case R_LARCH_SOP_POP_32_S_0_5_10_16_S2:
++  case R_LARCH_SOP_POP_32_S_0_10_10_16_S2:
++  case R_LARCH_SOP_POP_32_U:
++  // Nor are we implementing these two reloc types that were unused in the
++  // psABI, and already proposed to be removed.
++  // See https://github.com/loongson/LoongArch-Documentation/issues/51
++  case R_LARCH_ADD24:
++  case R_LARCH_SUB24:
++  // Similarly for these two, long deprecated and unused even before the
++  // inception of LoongArch.
++  case R_LARCH_GNU_VTINHERIT:
++  case R_LARCH_GNU_VTENTRY:
++    error(getErrorLocation(loc) +
++          "cannot handle deprecated relocation " + toString(type) +
++          " against symbol " + toString(s));
++    return R_NONE;
++
++  default:
++    error(getErrorLocation(loc) + "unknown relocation (" + Twine(type) +
++          ") against symbol " + toString(s));
++    return R_NONE;
++  }
++}
++
++bool LoongArch::usesOnlyLowPageBits(RelType type) const {
++  switch (type) {
++  default:
++    return false;
++  case R_LARCH_PCALA_LO12:
++  case R_LARCH_GOT_LO12:
++  case R_LARCH_GOT_PC_LO12:
++  case R_LARCH_TLS_IE_PC_LO12:
++    return true;
++  }
++}
++
++void LoongArch::relocate(uint8_t *loc, const Relocation &rel,
++                         uint64_t val) const {
++  switch (rel.type) {
++  case R_LARCH_32_PCREL:
++    checkInt(loc, val, 32, rel);
++    [[fallthrough]];
++  case R_LARCH_32:
++    write32le(loc, val);
++    return;
++  case R_LARCH_64:
++    write64le(loc, val);
++    return;
++
++  case R_LARCH_B16: {
++    checkInt(loc, val, 18, rel);
++    checkAlignment(loc, val, 4, rel);
++    write32le(loc, setK16(read32le(loc), val >> 2));
++    return;
++  }
++
++  case R_LARCH_B21: {
++    checkInt(loc, val, 23, rel);
++    checkAlignment(loc, val, 4, rel);
++    write32le(loc, setD5k16(read32le(loc), val >> 2));
++    return;
++  }
++
++  case R_LARCH_B26: {
++    checkInt(loc, val, 28, rel);
++    checkAlignment(loc, val, 4, rel);
++    write32le(loc, setD10k16(read32le(loc), val >> 2));
++    return;
++  }
++
++  // Relocs intended for `addi`, `ld` or `st`.
++  case R_LARCH_ABS_LO12:
++  case R_LARCH_PCALA_LO12:
++  case R_LARCH_GOT_PC_LO12:
++  case R_LARCH_GOT_LO12:
++  case R_LARCH_TLS_LE_LO12:
++  case R_LARCH_TLS_IE_PC_LO12:
++  case R_LARCH_TLS_IE_LO12: {
++    // Annoyingly, we have to again inspect the insn word to handle the
++    // R_LARCH_PCALA_LO12 on JIRL case: JIRL wants its immediate's 2 lowest
++    // zeroes removed by us, and the immediate slot width is in fact different.
++    // In this case, process like an R_LARCH_B16, but without overflow checking
++    // and only taking the value's lowest 12 bits.
++    if (rel.type == R_LARCH_PCALA_LO12 && isJirl(read32le(loc))) {
++      checkAlignment(loc, val, 4, rel);
++      val = SignExtend64<12>(val);
++      write32le(loc, setK16(read32le(loc), val >> 2));
++      return;
++    }
++    write32le(loc, setK12(read32le(loc), extractBits(val, 11, 0)));
++    return;
++  }
++
++  // Relocs intended for `lu12i.w` or `pcalau12i`.
++  case R_LARCH_ABS_HI20:
++  case R_LARCH_PCALA_HI20:
++  case R_LARCH_GOT_PC_HI20:
++  case R_LARCH_GOT_HI20:
++  case R_LARCH_TLS_LE_HI20:
++  case R_LARCH_TLS_IE_PC_HI20:
++  case R_LARCH_TLS_IE_HI20:
++  case R_LARCH_TLS_LD_PC_HI20:
++  case R_LARCH_TLS_LD_HI20:
++  case R_LARCH_TLS_GD_PC_HI20:
++  case R_LARCH_TLS_GD_HI20: {
++    write32le(loc, setJ20(read32le(loc), extractBits(val, 31, 12)));
++    return;
++  }
++
++  // Relocs intended for `lu32i.d`.
++  case R_LARCH_ABS64_LO20:
++  case R_LARCH_PCALA64_LO20:
++  case R_LARCH_GOT64_PC_LO20:
++  case R_LARCH_GOT64_LO20:
++  case R_LARCH_TLS_LE64_LO20:
++  case R_LARCH_TLS_IE64_PC_LO20:
++  case R_LARCH_TLS_IE64_LO20: {
++    write32le(loc, setJ20(read32le(loc), extractBits(val, 51, 32)));
++    return;
++  }
++
++  // Relocs intended for `lu52i.d`.
++  case R_LARCH_ABS64_HI12:
++  case R_LARCH_PCALA64_HI12:
++  case R_LARCH_GOT64_PC_HI12:
++  case R_LARCH_GOT64_HI12:
++  case R_LARCH_TLS_LE64_HI12:
++  case R_LARCH_TLS_IE64_PC_HI12:
++  case R_LARCH_TLS_IE64_HI12: {
++    write32le(loc, setK12(read32le(loc), extractBits(val, 63, 52)));
++    return;
++  }
++
++  case R_LARCH_ADD8:
++    *loc += val;
++    return;
++  case R_LARCH_ADD16:
++    write16le(loc, read16le(loc) + val);
++    return;
++  case R_LARCH_ADD32:
++    write32le(loc, read32le(loc) + val);
++    return;
++  case R_LARCH_ADD64:
++    write64le(loc, read64le(loc) + val);
++    return;
++  case R_LARCH_SUB8:
++    *loc -= val;
++    return;
++  case R_LARCH_SUB16:
++    write16le(loc, read16le(loc) - val);
++    return;
++  case R_LARCH_SUB32:
++    write32le(loc, read32le(loc) - val);
++    return;
++  case R_LARCH_SUB64:
++    write64le(loc, read64le(loc) - val);
++    return;
++
++  case R_LARCH_TLS_DTPREL32:
++    write32le(loc, val - dtpOffset);
++    break;
++  case R_LARCH_TLS_DTPREL64:
++    write64le(loc, val - dtpOffset);
++    break;
++
++  case R_LARCH_MARK_LA:
++  case R_LARCH_MARK_PCREL:
++    // no-op
++    return;
++
++  case R_LARCH_RELAX:
++    return; // Ignored (for now)
++
++  default:
++    llvm_unreachable("unknown relocation");
++  }
++}
++
++TargetInfo *elf::getLoongArchTargetInfo() {
++  static LoongArch target;
++  return &target;
++}
+diff -uNr a/lld/ELF/CMakeLists.txt b/lld/ELF/CMakeLists.txt
+--- a/lld/ELF/CMakeLists.txt	2023-03-14 16:58:23.000000000 +0800
++++ b/lld/ELF/CMakeLists.txt	2023-06-17 14:52:43.253642791 +0800
+@@ -25,6 +25,7 @@
+   Arch/ARM.cpp
+   Arch/AVR.cpp
+   Arch/Hexagon.cpp
++  Arch/LoongArch.cpp
+   Arch/Mips.cpp
+   Arch/MipsArchTree.cpp
+   Arch/MSP430.cpp
+diff -uNr a/lld/ELF/Driver.cpp b/lld/ELF/Driver.cpp
+--- a/lld/ELF/Driver.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/Driver.cpp	2023-06-17 14:52:43.253642791 +0800
+@@ -167,6 +167,7 @@
+           .Case("elf32lriscv", {ELF32LEKind, EM_RISCV})
+           .Cases("elf32ppc", "elf32ppclinux", {ELF32BEKind, EM_PPC})
+           .Cases("elf32lppc", "elf32lppclinux", {ELF32LEKind, EM_PPC})
++          .Case("elf32loongarch", {ELF32LEKind, EM_LOONGARCH})
+           .Case("elf64btsmip", {ELF64BEKind, EM_MIPS})
+           .Case("elf64ltsmip", {ELF64LEKind, EM_MIPS})
+           .Case("elf64lriscv", {ELF64LEKind, EM_RISCV})
+@@ -178,6 +179,7 @@
+           .Case("elf64_sparc", {ELF64BEKind, EM_SPARCV9})
+           .Case("msp430elf", {ELF32LEKind, EM_MSP430})
+           .Case("elf64_amdgpu", {ELF64LEKind, EM_AMDGPU})
++          .Case("elf64loongarch", {ELF64LEKind, EM_LOONGARCH})
+           .Default({ELFNoneKind, EM_NONE});
+ 
+   if (ret.first == ELFNoneKind)
+@@ -1032,8 +1034,9 @@
+ 
+   // Otherwise use the psABI defined relocation entry format.
+   uint16_t m = config->emachine;
+-  return m == EM_AARCH64 || m == EM_AMDGPU || m == EM_HEXAGON || m == EM_PPC ||
+-         m == EM_PPC64 || m == EM_RISCV || m == EM_X86_64;
++  return m == EM_AARCH64 || m == EM_AMDGPU || m == EM_HEXAGON ||
++         m == EM_LOONGARCH || m == EM_PPC || m == EM_PPC64 || m == EM_RISCV ||
++         m == EM_X86_64;
+ }
+ 
+ static void parseClangOption(StringRef opt, const Twine &msg) {
+@@ -1570,8 +1573,9 @@
+   // have support for reading Elf_Rel addends, so we only enable for a subset.
+ #ifndef NDEBUG
+   bool checkDynamicRelocsDefault = m == EM_AARCH64 || m == EM_ARM ||
+-                                   m == EM_386 || m == EM_MIPS ||
+-                                   m == EM_X86_64 || m == EM_RISCV;
++                                   m == EM_386 || m == EM_LOONGARCH ||
++                                   m == EM_MIPS || m == EM_RISCV ||
++                                   m == EM_X86_64;
+ #else
+   bool checkDynamicRelocsDefault = false;
+ #endif
+diff -uNr a/lld/ELF/InputFiles.cpp b/lld/ELF/InputFiles.cpp
+--- a/lld/ELF/InputFiles.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/InputFiles.cpp	2023-06-17 14:52:43.253642791 +0800
+@@ -1534,6 +1534,9 @@
+     return EM_AVR;
+   case Triple::hexagon:
+     return EM_HEXAGON;
++  case Triple::loongarch32:
++  case Triple::loongarch64:
++    return EM_LOONGARCH;
+   case Triple::mips:
+   case Triple::mipsel:
+   case Triple::mips64:
+diff -uNr a/lld/ELF/InputSection.cpp b/lld/ELF/InputSection.cpp
+--- a/lld/ELF/InputSection.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/InputSection.cpp	2023-06-17 14:52:43.253642791 +0800
+@@ -609,6 +609,7 @@
+     // to allow a signed 16-bit offset to reach 0x1000 of TCB/thread-library
+     // data and 0xf000 of the program's TLS segment.
+     return s.getVA(0) + (tls->p_vaddr & (tls->p_align - 1)) - 0x7000;
++  case EM_LOONGARCH:
+   case EM_RISCV:
+     return s.getVA(0) + (tls->p_vaddr & (tls->p_align - 1));
+ 
+@@ -643,6 +644,15 @@
+   case R_GOT:
+   case R_RELAX_TLS_GD_TO_IE_ABS:
+     return sym.getGotVA() + a;
++  case R_LOONGARCH_GOT:
++    // The LoongArch TLS GD relocs reuse the R_LARCH_GOT_PC_LO12 reloc type
++    // for their page offsets. The arithmetics are different in the TLS case
++    // so we have to duplicate some logic here.
++    if (sym.hasFlag(NEEDS_TLSGD) && type != R_LARCH_TLS_IE_PC_LO12)
++      // Like R_LOONGARCH_TLSGD_PAGE_PC but taking the absolute value.
++      return in.got->getGlobalDynAddr(sym) + a;
++    // Fallthrough; relocate like R_GOT.
++    return sym.getGotVA() + a;
+   case R_GOTONLY_PC:
+     return in.got->getVA() + a - p;
+   case R_GOTPLTONLY_PC:
+@@ -667,6 +677,12 @@
+   case R_GOT_PC:
+   case R_RELAX_TLS_GD_TO_IE:
+     return sym.getGotVA() + a - p;
++  case R_LOONGARCH_GOT_PAGE_PC:
++    // The R_LARCH_GOT64_PC_* relocs are also reused for TLS GD.
++    if (sym.hasFlag(NEEDS_TLSGD))
++      // Same as R_LOONGARCH_GOT_TLSGD_PC in this case.
++      return getLoongArchPageOffset(in.got->getGlobalDynAddr(sym) + a, p);
++    return getLoongArchPageOffset(sym.getGotVA() + a, p);
+   case R_MIPS_GOTREL:
+     return sym.getVA(a) - in.mipsGot->getGp(file);
+   case R_MIPS_GOT_GP:
+@@ -715,6 +731,8 @@
+                               *hiRel->sym, hiRel->expr);
+     return 0;
+   }
++  case R_LOONGARCH_PAGE_PC:
++    return getLoongArchPageOffset(sym.getVA(a), p);
+   case R_PC:
+   case R_ARM_PCA: {
+     uint64_t dest;
+@@ -748,6 +766,8 @@
+   case R_PLT_PC:
+   case R_PPC64_CALL_PLT:
+     return sym.getPltVA() + a - p;
++  case R_LOONGARCH_PLT_PAGE_PC:
++    return getLoongArchPageOffset(sym.getPltVA() + a, p);
+   case R_PLT_GOTPLT:
+     return sym.getPltVA() + a - in.gotPlt->getVA();
+   case R_PPC32_PLTREL:
+@@ -808,6 +828,8 @@
+     return in.got->getGlobalDynAddr(sym) + a - in.gotPlt->getVA();
+   case R_TLSGD_PC:
+     return in.got->getGlobalDynAddr(sym) + a - p;
++  case R_LOONGARCH_TLSGD_PAGE_PC:
++    return getLoongArchPageOffset(in.got->getGlobalDynAddr(sym) + a, p);
+   case R_TLSLD_GOTPLT:
+     return in.got->getVA() + in.got->getTlsIndexOff() + a - in.gotPlt->getVA();
+   case R_TLSLD_GOT:
+diff -uNr a/lld/ELF/Relocations.cpp b/lld/ELF/Relocations.cpp
+--- a/lld/ELF/Relocations.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/Relocations.cpp	2023-06-17 14:52:43.257642791 +0800
+@@ -190,8 +190,8 @@
+ 
+ // Returns true if Expr refers a PLT entry.
+ static bool needsPlt(RelExpr expr) {
+-  return oneof<R_PLT, R_PLT_PC, R_PLT_GOTPLT, R_PPC32_PLTREL, R_PPC64_CALL_PLT>(
+-      expr);
++  return oneof<R_PLT, R_PLT_PC, R_PLT_GOTPLT, R_LOONGARCH_PLT_PAGE_PC,
++               R_PPC32_PLTREL, R_PPC64_CALL_PLT>(expr);
+ }
+ 
+ // Returns true if Expr refers a GOT entry. Note that this function
+@@ -200,7 +200,8 @@
+ static bool needsGot(RelExpr expr) {
+   return oneof<R_GOT, R_GOT_OFF, R_MIPS_GOT_LOCAL_PAGE, R_MIPS_GOT_OFF,
+                R_MIPS_GOT_OFF32, R_AARCH64_GOT_PAGE_PC, R_GOT_PC, R_GOTPLT,
+-               R_AARCH64_GOT_PAGE>(expr);
++               R_AARCH64_GOT_PAGE, R_LOONGARCH_GOT, R_LOONGARCH_GOT_PAGE_PC>(
++      expr);
+ }
+ 
+ // True if this expression is of the form Sym - X, where X is a position in the
+@@ -208,12 +209,14 @@
+ static bool isRelExpr(RelExpr expr) {
+   return oneof<R_PC, R_GOTREL, R_GOTPLTREL, R_MIPS_GOTREL, R_PPC64_CALL,
+                R_PPC64_RELAX_TOC, R_AARCH64_PAGE_PC, R_RELAX_GOT_PC,
+-               R_RISCV_PC_INDIRECT, R_PPC64_RELAX_GOT_PC>(expr);
++               R_RISCV_PC_INDIRECT, R_PPC64_RELAX_GOT_PC, R_LOONGARCH_PAGE_PC>(
++      expr);
+ }
+ 
+-
+ static RelExpr toPlt(RelExpr expr) {
+   switch (expr) {
++  case R_LOONGARCH_PAGE_PC:
++    return R_LOONGARCH_PLT_PAGE_PC;
+   case R_PPC64_CALL:
+     return R_PPC64_CALL_PLT;
+   case R_PC:
+@@ -232,6 +235,8 @@
+   case R_PLT_PC:
+   case R_PPC32_PLTREL:
+     return R_PC;
++  case R_LOONGARCH_PLT_PAGE_PC:
++    return R_LOONGARCH_PAGE_PC;
+   case R_PPC64_CALL_PLT:
+     return R_PPC64_CALL;
+   case R_PLT:
+@@ -946,7 +951,9 @@
+             R_MIPS_GOTREL, R_MIPS_GOT_OFF, R_MIPS_GOT_OFF32, R_MIPS_GOT_GP_PC,
+             R_AARCH64_GOT_PAGE_PC, R_GOT_PC, R_GOTONLY_PC, R_GOTPLTONLY_PC,
+             R_PLT_PC, R_PLT_GOTPLT, R_PPC32_PLTREL, R_PPC64_CALL_PLT,
+-            R_PPC64_RELAX_TOC, R_RISCV_ADD, R_AARCH64_GOT_PAGE>(e))
++            R_PPC64_RELAX_TOC, R_RISCV_ADD, R_AARCH64_GOT_PAGE,
++            R_LOONGARCH_PLT_PAGE_PC, R_LOONGARCH_GOT, R_LOONGARCH_GOT_PAGE_PC>(
++          e))
+     return true;
+ 
+   // These never do, except if the entire file is position dependent or if
+@@ -1050,6 +1057,11 @@
+       // for detailed description:
+       // ftp://www.linux-mips.org/pub/linux/mips/doc/ABI/mipsabi.pdf
+       in.mipsGot->addEntry(*sec->file, sym, addend, expr);
++    } else if (config->emachine == EM_LOONGARCH) {
++      // Many LoongArch TLS relocs reuse the R_LOONGARCH_GOT type, in which case
++      // the NEEDS_GOT flag shouldn't get set.
++      if (!sym.isTls())
++        sym.setFlags(NEEDS_GOT);
+     } else {
+       sym.setFlags(NEEDS_GOT);
+     }
+@@ -1090,7 +1102,8 @@
+                     (isa<EhInputSection>(sec) && config->emachine != EM_MIPS));
+   if (canWrite) {
+     RelType rel = target->getDynRel(type);
+-    if (expr == R_GOT || (rel == target->symbolicRel && !sym.isPreemptible)) {
++    if (oneof<R_GOT, R_LOONGARCH_GOT>(expr) ||
++        (rel == target->symbolicRel && !sym.isPreemptible)) {
+       addRelativeReloc<true>(*sec, offset, sym, addend, expr, type);
+       return;
+     } else if (rel != 0) {
+@@ -1242,11 +1255,13 @@
+     return 1;
+   }
+ 
+-  // ARM, Hexagon and RISC-V do not support GD/LD to IE/LE relaxation.  For
+-  // PPC64, if the file has missing R_PPC64_TLSGD/R_PPC64_TLSLD, disable
++  // ARM, Hexagon, LoongArch and RISC-V do not support GD/LD to IE/LE
++  // relaxation.
++  // For PPC64, if the file has missing R_PPC64_TLSGD/R_PPC64_TLSLD, disable
+   // relaxation as well.
+   bool toExecRelax = !config->shared && config->emachine != EM_ARM &&
+                      config->emachine != EM_HEXAGON &&
++                     config->emachine != EM_LOONGARCH &&
+                      config->emachine != EM_RISCV &&
+                      !c.file->ppc64DisableTLSRelax;
+ 
+@@ -1263,8 +1278,7 @@
+   // being suitable for being dynamically loaded via dlopen. GOT[e0] is the
+   // module index, with a special value of 0 for the current module. GOT[e1] is
+   // unused. There only needs to be one module index entry.
+-  if (oneof<R_TLSLD_GOT, R_TLSLD_GOTPLT, R_TLSLD_PC, R_TLSLD_HINT>(
+-          expr)) {
++  if (oneof<R_TLSLD_GOT, R_TLSLD_GOTPLT, R_TLSLD_PC, R_TLSLD_HINT>(expr)) {
+     // Local-Dynamic relocs can be relaxed to Local-Exec.
+     if (toExecRelax) {
+       c.addReloc({target->adjustTlsExpr(type, R_RELAX_TLS_LD_TO_LE), type,
+@@ -1295,7 +1309,8 @@
+   }
+ 
+   if (oneof<R_AARCH64_TLSDESC_PAGE, R_TLSDESC, R_TLSDESC_CALL, R_TLSDESC_PC,
+-            R_TLSDESC_GOTPLT, R_TLSGD_GOT, R_TLSGD_GOTPLT, R_TLSGD_PC>(expr)) {
++            R_TLSDESC_GOTPLT, R_TLSGD_GOT, R_TLSGD_GOTPLT, R_TLSGD_PC,
++            R_LOONGARCH_TLSGD_PAGE_PC>(expr)) {
+     if (!toExecRelax) {
+       sym.setFlags(NEEDS_TLSGD);
+       c.addReloc({expr, type, offset, addend, &sym});
+@@ -1315,8 +1330,8 @@
+     return target->getTlsGdRelaxSkip(type);
+   }
+ 
+-  if (oneof<R_GOT, R_GOTPLT, R_GOT_PC, R_AARCH64_GOT_PAGE_PC, R_GOT_OFF,
+-            R_TLSIE_HINT>(expr)) {
++  if (oneof<R_GOT, R_GOTPLT, R_GOT_PC, R_AARCH64_GOT_PAGE_PC,
++            R_LOONGARCH_GOT_PAGE_PC, R_GOT_OFF, R_TLSIE_HINT>(expr)) {
+     ctx.hasTlsIe.store(true, std::memory_order_relaxed);
+     // Initial-Exec relocs can be relaxed to Local-Exec if the symbol is locally
+     // defined.
+diff -uNr a/lld/ELF/Relocations.h b/lld/ELF/Relocations.h
+--- a/lld/ELF/Relocations.h	2023-03-14 16:58:23.000000000 +0800
++++ b/lld/ELF/Relocations.h	2023-06-17 14:52:43.253642791 +0800
+@@ -102,6 +102,15 @@
+   R_PPC64_RELAX_GOT_PC,
+   R_RISCV_ADD,
+   R_RISCV_PC_INDIRECT,
++  // Same as R_PC but with page-aligned semantics.
++  R_LOONGARCH_PAGE_PC,
++  // Same as R_PLT_PC but with page-aligned semantics.
++  R_LOONGARCH_PLT_PAGE_PC,
++  // In addition to having page-aligned semantics, LoongArch GOT relocs are
++  // also reused for TLS, making the semantics differ from everyone else.
++  R_LOONGARCH_GOT,
++  R_LOONGARCH_GOT_PAGE_PC,
++  R_LOONGARCH_TLSGD_PAGE_PC,
+ };
+ 
+ // Architecture-neutral representation of relocation.
+diff -uNr a/lld/ELF/ScriptParser.cpp b/lld/ELF/ScriptParser.cpp
+--- a/lld/ELF/ScriptParser.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/ScriptParser.cpp	2023-06-17 14:52:43.257642791 +0800
+@@ -438,6 +438,8 @@
+       .Case("elf64-littleriscv", {ELF64LEKind, EM_RISCV})
+       .Case("elf64-sparc", {ELF64BEKind, EM_SPARCV9})
+       .Case("elf32-msp430", {ELF32LEKind, EM_MSP430})
++      .Case("elf32-loongarch", {ELF32LEKind, EM_LOONGARCH})
++      .Case("elf64-loongarch", {ELF64LEKind, EM_LOONGARCH})
+       .Default({ELFNoneKind, EM_NONE});
+ }
+ 
+diff -uNr a/lld/ELF/Target.cpp b/lld/ELF/Target.cpp
+--- a/lld/ELF/Target.cpp	2023-03-14 16:58:23.000000000 +0800
++++ b/lld/ELF/Target.cpp	2023-06-17 14:52:43.257642791 +0800
+@@ -62,6 +62,8 @@
+     return getAVRTargetInfo();
+   case EM_HEXAGON:
+     return getHexagonTargetInfo();
++  case EM_LOONGARCH:
++    return getLoongArchTargetInfo();
+   case EM_MIPS:
+     switch (config->ekind) {
+     case ELF32LEKind:
+diff -uNr a/lld/ELF/Target.h b/lld/ELF/Target.h
+--- a/lld/ELF/Target.h	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/ELF/Target.h	2023-06-17 14:52:43.257642791 +0800
+@@ -172,6 +172,7 @@
+ TargetInfo *getARMTargetInfo();
+ TargetInfo *getAVRTargetInfo();
+ TargetInfo *getHexagonTargetInfo();
++TargetInfo *getLoongArchTargetInfo();
+ TargetInfo *getMSP430TargetInfo();
+ TargetInfo *getPPC64TargetInfo();
+ TargetInfo *getPPCTargetInfo();
+@@ -215,6 +216,7 @@
+ void addPPC64SaveRestore();
+ uint64_t getPPC64TocBase();
+ uint64_t getAArch64Page(uint64_t expr);
++uint64_t getLoongArchPageOffset(uint64_t dest, uint64_t pc);
+ void riscvFinalizeRelax(int passes);
+ void mergeRISCVAttributesSections();
+ 
+diff -uNr a/lld/test/ELF/loongarch-abs64.s b/lld/test/ELF/loongarch-abs64.s
+--- a/lld/test/ELF/loongarch-abs64.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-abs64.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,60 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: ld.lld %t.la64.o --defsym foo=0 --defsym bar=42 -o %t.la64.1
++# RUN: llvm-objdump -d %t.la64.1 | FileCheck --check-prefix=CASE1 %s
++# CASE1:      04 00 00 14   lu12i.w $a0, 0
++# CASE1-NEXT: 84 00 80 03   ori     $a0, $a0, 0
++# CASE1-NEXT: 04 00 00 16   lu32i.d $a0, 0
++# CASE1-NEXT: 84 00 00 03   lu52i.d $a0, $a0, 0
++# CASE1-NEXT: 05 00 00 14   lu12i.w $a1, 0
++# CASE1-NEXT: a5 a8 80 03   ori     $a1, $a1, 42
++# CASE1-NEXT: 05 00 00 16   lu32i.d $a1, 0
++# CASE1-NEXT: a5 00 00 03   lu52i.d $a1, $a1, 0
++
++# RUN: ld.lld %t.la64.o --defsym foo=0x12345678 --defsym bar=0x87654321 -o %t.la64.2
++# RUN: llvm-objdump -d %t.la64.2 | FileCheck --check-prefix=CASE2 %s
++# CASE2:      a4 68 24 14   lu12i.w $a0, 74565
++# CASE2-NEXT: 84 e0 99 03   ori     $a0, $a0, 1656
++# CASE2-NEXT: 04 00 00 16   lu32i.d $a0, 0
++# CASE2-NEXT: 84 00 00 03   lu52i.d $a0, $a0, 0
++# CASE2-NEXT: 85 ca 0e 15   lu12i.w $a1, -493996
++# CASE2-NEXT: a5 84 8c 03   ori     $a1, $a1, 801
++# CASE2-NEXT: 05 00 00 16   lu32i.d $a1, 0
++# CASE2-NEXT: a5 00 00 03   lu52i.d $a1, $a1, 0
++
++# RUN: ld.lld %t.la64.o --defsym foo=0x12345fedcb678 --defsym bar=0xfedcb12345000 -o %t.la64.3
++# RUN: llvm-objdump -d %t.la64.3 | FileCheck --check-prefix=CASE3 %s
++# CASE3:      64 b9 fd 15   lu12i.w $a0, -4661
++# CASE3-NEXT: 84 e0 99 03   ori     $a0, $a0, 1656
++# CASE3-NEXT: a4 68 24 16   lu32i.d $a0, 74565
++# CASE3-NEXT: 84 00 00 03   lu52i.d $a0, $a0, 0
++# CASE3-NEXT: a5 68 24 14   lu12i.w $a1, 74565
++# CASE3-NEXT: a5 00 80 03   ori     $a1, $a1, 0
++# CASE3-NEXT: 65 b9 fd 17   lu32i.d $a1, -4661
++# CASE3-NEXT: a5 00 00 03   lu52i.d $a1, $a1, 0
++
++# RUN: ld.lld %t.la64.o --defsym foo=0xfffffeeeeeddd --defsym bar=0xfff00000f1111222 -o %t.la64.4
++# RUN: llvm-objdump -d %t.la64.4 | FileCheck --check-prefix=CASE4 %s
++# CASE4:      c4 dd dd 15   lu12i.w $a0, -69906
++# CASE4-NEXT: 84 74 b7 03   ori     $a0, $a0, 3549
++# CASE4-NEXT: e4 ff ff 17   lu32i.d $a0, -1
++# CASE4-NEXT: 84 00 00 03   lu52i.d $a0, $a0, 0
++# CASE4-NEXT: 25 22 e2 15   lu12i.w $a1, -61167
++# CASE4-NEXT: a5 88 88 03   ori     $a1, $a1, 546
++# CASE4-NEXT: 05 00 00 16   lu32i.d $a1, 0
++# CASE4-NEXT: a5 fc 3f 03   lu52i.d $a1, $a1, -1
++
++.global _start
++
++_start:
++    lu12i.w $a0, %abs_hi20(foo)
++    ori     $a0, $a0, %abs_lo12(foo)
++    lu32i.d $a0, %abs64_lo20(foo)
++    lu52i.d $a0, $a0, %abs64_hi12(foo)
++
++    lu12i.w $a1, %abs_hi20(bar)
++    ori     $a1, $a1, %abs_lo12(bar)
++    lu32i.d $a1, %abs64_lo20(bar)
++    lu52i.d $a1, $a1, %abs64_hi12(bar)
+diff -uNr a/lld/test/ELF/loongarch-branch-b16.s b/lld/test/ELF/loongarch-branch-b16.s
+--- a/lld/test/ELF/loongarch-branch-b16.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-branch-b16.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,40 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %s -o %t.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+4 --defsym bar=_start -o %t.la32
++# RUN: ld.lld %t.la64.o --defsym foo=_start+4 --defsym bar=_start -o %t.la64
++# RUN: llvm-objdump -d %t.la32 | FileCheck %s --check-prefix=CHECK-32
++# RUN: llvm-objdump -d %t.la64 | FileCheck %s --check-prefix=CHECK-64
++# CHECK-32: 00 04 00 58   beq     $zero, $zero, 4
++# CHECK-32: 00 fc ff 5f   bne     $zero, $zero, -4
++# CHECK-64: 00 04 00 58   beq     $zero, $zero, 4
++# CHECK-64: 00 fc ff 5f   bne     $zero, $zero, -4
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+0x1fffc --defsym bar=_start+4-0x20000 -o %t.la32.limits
++# RUN: ld.lld %t.la64.o --defsym foo=_start+0x1fffc --defsym bar=_start+4-0x20000 -o %t.la64.limits
++# RUN: llvm-objdump -d %t.la32.limits | FileCheck --check-prefix=LIMITS-32 %s
++# RUN: llvm-objdump -d %t.la64.limits | FileCheck --check-prefix=LIMITS-64 %s
++# LIMITS-32:      00 fc ff 59   beq     $zero, $zero, 131068
++# LIMITS-32-NEXT: 00 00 00 5e   bne     $zero, $zero, -131072
++# LIMITS-64:      00 fc ff 59   beq     $zero, $zero, 131068
++# LIMITS-64-NEXT: 00 00 00 5e   bne     $zero, $zero, -131072
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+0x20000 --defsym bar=_start+4-0x20004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+0x20000 --defsym bar=_start+4-0x20004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# ERROR-RANGE: relocation R_LARCH_B16 out of range: 131072 is not in [-131072, 131071]; references 'foo'
++# ERROR-RANGE: relocation R_LARCH_B16 out of range: -131076 is not in [-131072, 131071]; references 'bar'
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# ERROR-ALIGN-1: improper alignment for relocation R_LARCH_B16: 0xFFFFFFFFFFFFFFFB is not aligned to 4 bytes
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# ERROR-ALIGN-2: improper alignment for relocation R_LARCH_B16: 0xFFFFFFFFFFFFFFFA is not aligned to 4 bytes
++
++.global _start
++_start:
++     beq $zero, $zero, foo
++     bne $zero, $zero, bar
+diff -uNr a/lld/test/ELF/loongarch-branch-b21.s b/lld/test/ELF/loongarch-branch-b21.s
+--- a/lld/test/ELF/loongarch-branch-b21.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-branch-b21.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,40 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %s -o %t.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+4 --defsym bar=_start -o %t.la32
++# RUN: ld.lld %t.la64.o --defsym foo=_start+4 --defsym bar=_start -o %t.la64
++# RUN: llvm-objdump -d %t.la32 | FileCheck %s --check-prefix=CHECK-32
++# RUN: llvm-objdump -d %t.la64 | FileCheck %s --check-prefix=CHECK-64
++# CHECK-32: e0 07 00 40   beqz    $s8, 4
++# CHECK-32: ff ff ff 47   bnez    $s8, -4
++# CHECK-64: e0 07 00 40   beqz    $s8, 4
++# CHECK-64: ff ff ff 47   bnez    $s8, -4
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+0x3ffffc --defsym bar=_start+4-0x400000 -o %t.la32.limits
++# RUN: ld.lld %t.la64.o --defsym foo=_start+0x3ffffc --defsym bar=_start+4-0x400000 -o %t.la64.limits
++# RUN: llvm-objdump -d %t.la32.limits | FileCheck --check-prefix=LIMITS-32 %s
++# RUN: llvm-objdump -d %t.la64.limits | FileCheck --check-prefix=LIMITS-64 %s
++# LIMITS-32:      ef ff ff 43   beqz    $s8, 4194300
++# LIMITS-32-NEXT: f0 03 00 44   bnez    $s8, -4194304
++# LIMITS-64:      ef ff ff 43   beqz    $s8, 4194300
++# LIMITS-64-NEXT: f0 03 00 44   bnez    $s8, -4194304
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+0x400000 --defsym bar=_start+4-0x400004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+0x400000 --defsym bar=_start+4-0x400004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# ERROR-RANGE: relocation R_LARCH_B21 out of range: 4194304 is not in [-4194304, 4194303]; references 'foo'
++# ERROR-RANGE: relocation R_LARCH_B21 out of range: -4194308 is not in [-4194304, 4194303]; references 'bar'
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# ERROR-ALIGN-1: improper alignment for relocation R_LARCH_B21: 0xFFFFFFFFFFFFFFFB is not aligned to 4 bytes
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# ERROR-ALIGN-2: improper alignment for relocation R_LARCH_B21: 0xFFFFFFFFFFFFFFFA is not aligned to 4 bytes
++
++.global _start
++_start:
++     beqz $s8, foo
++     bnez $s8, bar
+diff -uNr a/lld/test/ELF/loongarch-branch-b26.s b/lld/test/ELF/loongarch-branch-b26.s
+--- a/lld/test/ELF/loongarch-branch-b26.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-branch-b26.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,40 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %s -o %t.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+4 --defsym bar=_start -o %t.la32
++# RUN: ld.lld %t.la64.o --defsym foo=_start+4 --defsym bar=_start -o %t.la64
++# RUN: llvm-objdump -d %t.la32 | FileCheck %s --check-prefix=CHECK-32
++# RUN: llvm-objdump -d %t.la64 | FileCheck %s --check-prefix=CHECK-64
++# CHECK-32: 00 04 00 50   b       4
++# CHECK-32: ff ff ff 57   bl      -4
++# CHECK-64: 00 04 00 50   b       4
++# CHECK-64: ff ff ff 57   bl      -4
++
++# RUN: ld.lld %t.la32.o --defsym foo=_start+0x7fffffc --defsym bar=_start+4-0x8000000 -o %t.la32.limits
++# RUN: ld.lld %t.la64.o --defsym foo=_start+0x7fffffc --defsym bar=_start+4-0x8000000 -o %t.la64.limits
++# RUN: llvm-objdump -d %t.la32.limits | FileCheck --check-prefix=LIMITS-32 %s
++# RUN: llvm-objdump -d %t.la64.limits | FileCheck --check-prefix=LIMITS-64 %s
++# LIMITS-32:      ff fd ff 53   b       134217724
++# LIMITS-32-NEXT: 00 02 00 54   bl      -134217728
++# LIMITS-64:      ff fd ff 53   b       134217724
++# LIMITS-64-NEXT: 00 02 00 54   bl      -134217728
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+0x8000000 --defsym bar=_start+4-0x8000004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+0x8000000 --defsym bar=_start+4-0x8000004 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-RANGE %s
++# ERROR-RANGE: relocation R_LARCH_B26 out of range: 134217728 is not in [-134217728, 134217727]; references 'foo'
++# ERROR-RANGE: relocation R_LARCH_B26 out of range: -134217732 is not in [-134217728, 134217727]; references 'bar'
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+1 --defsym bar=_start-1 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-1 %s
++# ERROR-ALIGN-1: improper alignment for relocation R_LARCH_B26: 0xFFFFFFFFFFFFFFFB is not aligned to 4 bytes
++
++# RUN: not ld.lld %t.la32.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# RUN: not ld.lld %t.la64.o --defsym foo=_start+2 --defsym bar=_start-2 -o /dev/null 2>&1 | FileCheck --check-prefix=ERROR-ALIGN-2 %s
++# ERROR-ALIGN-2: improper alignment for relocation R_LARCH_B26: 0xFFFFFFFFFFFFFFFA is not aligned to 4 bytes
++
++.global _start
++_start:
++     b foo
++     bl bar
+diff -uNr a/lld/test/ELF/loongarch-elf-flags.s b/lld/test/ELF/loongarch-elf-flags.s
+--- a/lld/test/ELF/loongarch-elf-flags.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-elf-flags.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,8 @@
++# REQUIRES: loongarch
++
++# RUN: echo -n "BLOB" > %t.binary
++# RUN: ld.lld -m elf64loongarch -b binary %t.binary -o %t.out
++# RUN: llvm-readobj -h %t.out | FileCheck %s
++
++# CHECK:      Flags [
++# CHECK-NEXT: ]
+diff -uNr a/lld/test/ELF/loongarch-pc-aligned.s b/lld/test/ELF/loongarch-pc-aligned.s
+--- a/lld/test/ELF/loongarch-pc-aligned.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-pc-aligned.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,173 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/a.s -o %t/a.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/a.s -o %t/a.la64.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/extreme.s -o %t/extreme.o
++
++# RUN: ld.lld %t/a.la32.o -T %t/case1.t -o %t/case1.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case1.t -o %t/case1.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case1.la32 | FileCheck %s --check-prefix=CASE1
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case1.la64 | FileCheck %s --check-prefix=CASE1
++# CASE1:      pcalau12i $a0, 0
++# CASE1-NEXT: ld.w      $a0, $a0, 0
++#--- case1.t
++SECTIONS {
++ .rodata 0x1000: { *(.rodata) }
++ .text   0x1ffc: { *(.text) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case2.t -o %t/case2.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case2.t -o %t/case2.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case2.la32 | FileCheck %s --check-prefix=CASE2
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case2.la64 | FileCheck %s --check-prefix=CASE2
++# CASE2:      pcalau12i $a0, -1
++# CASE2-NEXT: ld.w      $a0, $a0, 0
++#--- case2.t
++SECTIONS {
++ .rodata 0x1000: { *(.rodata) }
++ .text   0x2000: { *(.text) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case3.t -o %t/case3.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case3.t -o %t/case3.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case3.la32 | FileCheck %s --check-prefix=CASE3
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case3.la64 | FileCheck %s --check-prefix=CASE3
++# CASE3:      pcalau12i $a0, -1
++# CASE3-NEXT: ld.w      $a0, $a0, 2047
++#--- case3.t
++SECTIONS {
++ .rodata 0x17ff: { *(.rodata) }
++ .text   0x2000: { *(.text) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case4.t -o %t/case4.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case4.t -o %t/case4.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case4.la32 | FileCheck %s --check-prefix=CASE4
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case4.la64 | FileCheck %s --check-prefix=CASE4
++# CASE4:      pcalau12i $a0, 0
++# CASE4-NEXT: ld.w      $a0, $a0, -2048
++#--- case4.t
++SECTIONS {
++ .rodata 0x1800: { *(.rodata) }
++ .text   0x2000: { *(.text) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case5.t -o %t/case5.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case5.t -o %t/case5.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case5.la32 | FileCheck %s --check-prefix=CASE5
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case5.la64 | FileCheck %s --check-prefix=CASE5
++# CASE5:      pcalau12i $a0, 1
++# CASE5-NEXT: ld.w      $a0, $a0, 4
++#--- case5.t
++SECTIONS {
++ .text   0x001ffc: { *(.text) }
++ .rodata 0x002004: { *(.rodata) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case6.t -o %t/case6.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case6.t -o %t/case6.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case6.la32 | FileCheck %s --check-prefix=CASE6
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case6.la64 | FileCheck %s --check-prefix=CASE6
++# CASE6:      pcalau12i $a0, 2
++# CASE6-NEXT: ld.w      $a0, $a0, -2048
++#--- case6.t
++SECTIONS {
++ .text   0x001ffc: { *(.text) }
++ .rodata 0x002800: { *(.rodata) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case7.t -o %t/case7.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case7.t -o %t/case7.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case7.la32 | FileCheck %s --check-prefix=CASE7
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case7.la64 | FileCheck %s --check-prefix=CASE7
++# CASE7:      pcalau12i $a0, 524287
++# CASE7-NEXT: ld.w      $a0, $a0, 291
++#--- case7.t
++SECTIONS {
++ .text   0x0: { *(.text) }
++ .rodata 0x7ffff123: { *(.rodata) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case8.t -o %t/case8.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case8.t -o %t/case8.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case8.la32 | FileCheck %s --check-prefix=CASE8
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case8.la64 | FileCheck %s --check-prefix=CASE8
++# CASE8:      pcalau12i $a0, -524288
++# CASE8-NEXT: ld.w      $a0, $a0, -1348
++#--- case8.t
++SECTIONS {
++ .text   0x0: { *(.text) }
++ .rodata 0x7ffffabc: { *(.rodata) }
++}
++
++# RUN: ld.lld %t/a.la32.o -T %t/case9.t -o %t/case9.la32
++# RUN: ld.lld %t/a.la64.o -T %t/case9.t -o %t/case9.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case9.la32 | FileCheck %s --check-prefix=CASE9
++# RUN: llvm-objdump -d --no-show-raw-insn %t/case9.la64 | FileCheck %s --check-prefix=CASE9
++# CASE9:      pcalau12i $a0, -524288
++# CASE9-NEXT: ld.w      $a0, $a0, 291
++#--- case9.t
++SECTIONS {
++ .rodata 0x123: { *(.rodata) }
++ .text   0x80000000: { *(.text) }
++}
++
++# RUN: ld.lld %t/extreme.o -T %t/extreme1.t -o %t/extreme1
++# RUN: llvm-objdump -d --no-show-raw-insn %t/extreme1 | FileCheck %s --check-prefix=EXTREME1
++# EXTREME1:      addi.d    $t0, $zero, 291
++# EXTREME1-NEXT: lu32i.d   $t0, -284281
++# EXTREME1-NEXT: lu52i.d   $t0, $t0, -292
++# EXTREME1-NEXT: pcalau12i $t1, 414771
++#--- extreme1.t
++SECTIONS {
++ .rodata 0x123: { *(.rodata) }
++ .text   0x123456789abcdef0: { *(.text) }
++}
++
++# RUN: ld.lld %t/extreme.o -T %t/extreme2.t -o %t/extreme2
++# RUN: llvm-objdump -d --no-show-raw-insn %t/extreme2 | FileCheck %s --check-prefix=EXTREME2
++# EXTREME2:      addi.d    $t0, $zero, -820
++# EXTREME2-NEXT: lu32i.d   $t0, -69907
++# EXTREME2-NEXT: lu52i.d   $t0, $t0, 2047
++# EXTREME2-NEXT: pcalau12i $t1, -139810
++#--- extreme2.t
++SECTIONS {
++ .text   0x0: { *(.text) }
++ .rodata 0x7ffeeeeedddddccc: { *(.rodata) }
++}
++
++# RUN: ld.lld %t/extreme.o -T %t/extreme3.t -o %t/extreme3
++# RUN: llvm-objdump -d --no-show-raw-insn %t/extreme3 | FileCheck %s --check-prefix=EXTREME3
++# EXTREME3:      addi.d    $t0, $zero, -820
++# EXTREME3-NEXT: lu32i.d   $t0, -69906
++# EXTREME3-NEXT: lu52i.d   $t0, $t0, -2048
++# EXTREME3-NEXT: pcalau12i $t1, -139810
++#--- extreme3.t
++SECTIONS {
++ .text   0x0: { *(.text) }
++ .rodata 0x800eeeeedddddccc: { *(.rodata) }
++}
++
++#--- a.s
++.rodata
++x:
++.word 10
++.text
++.global _start
++_start:
++  pcalau12i $a0, %pc_hi20(x)
++  ld.w      $a0, $a0, %pc_lo12(x)
++
++#--- extreme.s
++.rodata
++x:
++.word 10
++.text
++.global _start
++_start:
++  addi.d    $t0, $zero, %pc_lo12(x)
++  lu32i.d   $t0, %pc64_lo20(x)
++  lu52i.d   $t0, $t0, %pc64_hi12(x)
++  pcalau12i $t1, %pc_hi20(x)
++  add.d     $t0, $t0, $t1
+diff -uNr a/lld/test/ELF/loongarch-pcala-lo12-jirl-shared-error.s b/lld/test/ELF/loongarch-pcala-lo12-jirl-shared-error.s
+--- a/lld/test/ELF/loongarch-pcala-lo12-jirl-shared-error.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-pcala-lo12-jirl-shared-error.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,14 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %s -o %t.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: not ld.lld %t.la32.o -shared -o %t.la32.so 2>&1 | FileCheck %s
++# RUN: not ld.lld %t.la64.o -shared -o %t.la64.so 2>&1 | FileCheck %s
++
++.global foo
++foo:
++    pcalau12i   $t0, %pc_hi20(bar)
++    ld.w        $t0, $t0, %pc_lo12(bar)
++
++# CHECK: error: relocation R_LARCH_PCALA_LO12 cannot be used against symbol 'bar'; recompile with -fPIC
+diff -uNr a/lld/test/ELF/loongarch-pcala-lo12-jirl-shared.s b/lld/test/ELF/loongarch-pcala-lo12-jirl-shared.s
+--- a/lld/test/ELF/loongarch-pcala-lo12-jirl-shared.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-pcala-lo12-jirl-shared.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,49 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %t/a.s -o %t/a.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %t/a.s -o %t/a.la64.o
++
++# RUN: ld.lld %t/a.la32.o -shared -T %t/a.t -o %t/a.la32.so
++# RUN: ld.lld %t/a.la64.o -shared -T %t/a.t -o %t/a.la64.so
++
++# RUN: llvm-objdump -d --no-show-raw-insn %t/a.la32.so | FileCheck --check-prefixes=DIS,DIS32 %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/a.la64.so | FileCheck --check-prefixes=DIS,DIS64 %s
++
++## PLT should be present in this case.
++# DIS:        Disassembly of section .plt:
++# DIS:        <.plt>:
++# DIS:        234020:   pcaddu12i   $t3, 510
++# DIS32-NEXT: 234024:   ld.w    $t3, $t3, 84
++# DIS64-NEXT: 234024:   ld.d    $t3, $t3, 184
++# DIS-NEXT:   234028:   jirl    $t1, $t3, 0
++# DIS-NEXT:   23402c:   nop
++
++# DIS:      Disassembly of section .text:
++# DIS:      <foo>:
++# DIS-NEXT: nop
++# DIS-NEXT: nop
++# DIS-NEXT: nop
++# DIS-NEXT: pcalau12i $t0, -510
++# DIS-NEXT: jirl  $zero, $t0, 32
++
++
++#--- a.t
++SECTIONS {
++ .plt   0x234000: { *(.plt) }
++ .text  0x432000: { *(.text) }
++}
++
++#--- a.s
++.p2align 12
++.global foo
++foo:
++## The nops are for pushing the relocs off page boundary, to better see the
++## page-aligned semantics in action.
++    nop
++    nop
++    nop
++    ## The offsets should be -510 (0x234 - 0x432) and 32 (PLT header size + 0)
++    ## respectively.
++    pcalau12i   $t0, %pc_hi20(bar)
++    jirl        $zero, $t0, %pc_lo12(bar)
+diff -uNr a/lld/test/ELF/loongarch-pcala-lo12-jirl.s b/lld/test/ELF/loongarch-pcala-lo12-jirl.s
+--- a/lld/test/ELF/loongarch-pcala-lo12-jirl.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-pcala-lo12-jirl.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,42 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32-unknown-elf %s -o %t.la32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64-unknown-elf %s -o %t.la64.o
++
++# RUN: ld.lld %t.la32.o -o %t.la32
++# RUN: ld.lld %t.la64.o -o %t.la64
++# RUN: llvm-objdump -d --no-show-raw-insn %t.la32 | FileCheck %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.la64 | FileCheck %s
++# CHECK:      pcalau12i $t0, -1
++# CHECK-NEXT: jirl  $ra, $t0, 564
++# CHECK-NEXT: pcalau12i $t0, 0
++# CHECK-NEXT: jirl  $zero, $t0, -1348
++
++## PLT shouldn't get generated in this case.
++# CHECK-NOT:  Disassembly of section .plt:
++
++.p2align 12
++.org 0x234
++.global foo
++foo:
++    li.w    $a0, 42
++    ret
++
++.org 0xabc
++.global bar
++bar:
++    li.w    $a7, 94
++    syscall 0
++
++.org 0x1000
++.global _start
++_start:
++## The nops are for pushing the relocs off page boundary, to better see the
++## page-aligned semantics in action.
++    nop
++    nop
++    nop
++    pcalau12i   $t0, %pc_hi20(foo)
++    jirl        $ra, $t0, %pc_lo12(foo)
++    pcalau12i   $t0, %pc_hi20(bar)
++    jirl        $zero, $t0, %pc_lo12(bar)
+diff -uNr a/lld/test/ELF/loongarch-plt.s b/lld/test/ELF/loongarch-plt.s
+--- a/lld/test/ELF/loongarch-plt.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-plt.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,108 @@
++# REQUIRES: loongarch
++# RUN: echo '.globl bar, weak; .type bar,@function; .type weak,@function; bar: weak:' > %t1.s
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t1.s -o %t1.32.o
++# RUN: ld.lld -shared %t1.32.o -soname=t1.32.so -o %t1.32.so
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %s -o %t.32.o
++# RUN: ld.lld %t.32.o %t1.32.so -z separate-code -o %t.32
++# RUN: llvm-readelf -S -s %t.32 | FileCheck --check-prefixes=SEC,NM %s
++# RUN: llvm-readobj -r %t.32 | FileCheck --check-prefix=RELOC32 %s
++# RUN: llvm-readelf -x .got.plt %t.32 | FileCheck --check-prefix=GOTPLT32 %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.32 | FileCheck --check-prefixes=DIS,DIS32 %s
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t1.s -o %t1.64.o
++# RUN: ld.lld -shared %t1.64.o -soname=t1.64.so -o %t1.64.so
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %s -o %t.64.o
++# RUN: ld.lld %t.64.o %t1.64.so -z separate-code -o %t.64
++# RUN: llvm-readelf -S -s %t.64 | FileCheck --check-prefixes=SEC,NM %s
++# RUN: llvm-readobj -r %t.64 | FileCheck --check-prefix=RELOC64 %s
++# RUN: llvm-readelf -x .got.plt %t.64 | FileCheck --check-prefix=GOTPLT64 %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.64 | FileCheck --check-prefixes=DIS,DIS64 %s
++
++# SEC: .plt PROGBITS {{0*}}00020020
++
++## A canonical PLT has a non-zero st_value. bar and weak are called but their
++## addresses are not taken, so a canonical PLT is not necessary.
++# NM: {{0*}}00000000 0 FUNC GLOBAL DEFAULT UND bar
++# NM: {{0*}}00000000 0 FUNC WEAK   DEFAULT UND weak
++
++## The .got.plt slots relocated by .rela.plt point to .plt
++## This is required by glibc.
++# RELOC32:      .rela.plt {
++# RELOC32-NEXT:   0x40070 R_LARCH_JUMP_SLOT bar 0x0
++# RELOC32-NEXT:   0x40074 R_LARCH_JUMP_SLOT weak 0x0
++# RELOC32-NEXT: }
++# GOTPLT32:      section '.got.plt'
++# GOTPLT32-NEXT: 0x00040068 00000000 00000000 20000200 20000200
++
++# RELOC64:      .rela.plt {
++# RELOC64-NEXT:   0x400E0 R_LARCH_JUMP_SLOT bar 0x0
++# RELOC64-NEXT:   0x400E8 R_LARCH_JUMP_SLOT weak 0x0
++# RELOC64-NEXT: }
++# GOTPLT64:      section '.got.plt'
++# GOTPLT64-NEXT: 0x000400d0 00000000 00000000 00000000 00000000
++# GOTPLT64-NEXT: 0x000400e0 20000200 00000000 20000200 00000000
++
++# DIS:      <_start>:
++## Direct call
++## foo - . = 0x20010-0x20000 = 16
++# DIS-NEXT:   20000: bl 16
++## bar@plt - . = 0x20040-0x20004 = 60
++# DIS-NEXT:   20004: bl 60
++## bar@plt - . = 0x20040-0x20008 = 56
++# DIS-NEXT:   20008: bl 56
++## weak@plt - . = 0x20050-0x2000c = 68
++# DIS-NEXT:   2000c: bl 68
++# DIS:      <foo>:
++# DIS-NEXT:   20010:
++
++# DIS:      Disassembly of section .plt:
++# DIS:      <.plt>:
++## 32-bit: .got.plt - .plt = 0x40068 - 0x20020 = 4096*32+72
++# DIS32-NEXT:   pcaddu12i $t2, 32
++# DIS32-NEXT:   sub.w   $t1, $t1, $t3
++# DIS32-NEXT:   ld.w    $t3, $t2, 72
++# DIS32-NEXT:   addi.w  $t1, $t1, -44
++# DIS32-NEXT:   addi.w  $t0, $t2, 72
++# DIS32-NEXT:   srli.w  $t1, $t1, 2
++# DIS32-NEXT:   ld.w    $t0, $t0, 4
++# DIS32-NEXT:   jr      $t3
++
++## 64-bit: .got.plt - .plt = 0x400d0 - 0x20020 = 4096*32+176
++# DIS64-NEXT:   pcaddu12i $t2, 32
++# DIS64-NEXT:   sub.d   $t1, $t1, $t3
++# DIS64-NEXT:   ld.d    $t3, $t2, 176
++# DIS64-NEXT:   addi.d  $t1, $t1, -44
++# DIS64-NEXT:   addi.d  $t0, $t2, 176
++# DIS64-NEXT:   srli.d  $t1, $t1, 1
++# DIS64-NEXT:   ld.d    $t0, $t0, 8
++# DIS64-NEXT:   jr      $t3
++
++## 32-bit: &.got.plt[bar]-. = 0x40070-0x20040 = 4096*32+48
++## 64-bit: &.got.plt[bar]-. = 0x400e0-0x20040 = 4096*32+160
++# DIS:   20040: pcaddu12i $t3, 32
++# DIS32-NEXT:   ld.w    $t3, $t3, 48
++# DIS64-NEXT:   ld.d    $t3, $t3, 160
++# DIS-NEXT:     jirl    $t1, $t3, 0
++# DIS-NEXT:     nop
++
++## 32-bit: &.got.plt[weak]-. = 0x40074-0x20050 = 4096*32+36
++## 64-bit: &.got.plt[weak]-. = 0x400e8-0x20050 = 4096*32+152
++# DIS:   20050: pcaddu12i $t3, 32
++# DIS32-NEXT:   ld.w    $t3, $t3, 36
++# DIS64-NEXT:   ld.d    $t3, $t3, 152
++# DIS-NEXT:     jirl    $t1, $t3, 0
++# DIS-NEXT:     nop
++
++.global _start, foo, bar
++.weak weak
++
++_start:
++  bl foo
++  bl bar
++  bl %plt(bar)
++  bl weak
++
++## foo is local and non-preemptible, no PLT is generated.
++foo:
++  ret
+diff -uNr a/lld/test/ELF/loongarch-reloc-pic.s b/lld/test/ELF/loongarch-reloc-pic.s
+--- a/lld/test/ELF/loongarch-reloc-pic.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-reloc-pic.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,44 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/32.s -o %t/32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/64.s -o %t/64.o
++# RUN: ld.lld -shared %t/32.o -o %t/32.so
++# RUN: llvm-nm %t/32.so | FileCheck --check-prefix=NM32 %s
++# RUN: llvm-readobj -r %t/32.so | FileCheck --check-prefix=RELOC32 %s
++# RUN: ld.lld -shared %t/64.o -o %t/64.so
++# RUN: llvm-nm %t/64.so | FileCheck --check-prefix=NM64 %s
++# RUN: llvm-readobj -r %t/64.so | FileCheck --check-prefix=RELOC64 %s
++
++## R_LARCH_32 and R_LARCH_64 are absolute relocation types.
++## In PIC mode, they create relative relocations if the symbol is non-preemptable.
++
++# NM32: 000301fc d b
++# NM64: 00030350 d b
++
++# RELOC32:      .rela.dyn {
++# RELOC32-NEXT:   0x301FC R_LARCH_RELATIVE - 0x301FC
++# RELOC32-NEXT:   0x301F8 R_LARCH_32 a 0
++# RELOC32-NEXT: }
++# RELOC64:      .rela.dyn {
++# RELOC64-NEXT:   0x30350 R_LARCH_RELATIVE - 0x30350
++# RELOC64-NEXT:   0x30348 R_LARCH_64 a 0
++# RELOC64-NEXT: }
++
++#--- 32.s
++.globl a, b
++.hidden b
++
++.data
++.long a
++b:
++.long b
++
++#--- 64.s
++.globl a, b
++.hidden b
++
++.data
++.quad a
++b:
++.quad b
+diff -uNr a/lld/test/ELF/loongarch-tls-gd-and-ie.s b/lld/test/ELF/loongarch-tls-gd-and-ie.s
+--- a/lld/test/ELF/loongarch-tls-gd-and-ie.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-tls-gd-and-ie.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,45 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %s -o %t.la32.o
++# RUN: ld.lld %t.la32.o -shared -o %t.la32
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %s -o %t.la64.o
++# RUN: ld.lld %t.la64.o -shared -o %t.la64
++
++# RUN: llvm-readelf -Wr %t.la32 | FileCheck --check-prefix=LA32-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.la32 | FileCheck --check-prefix=LA32 %s
++
++# RUN: llvm-readelf -Wr %t.la64 | FileCheck --check-prefix=LA64-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.la64 | FileCheck --check-prefix=LA64 %s
++
++# LA32-REL-NOT:  R_LARCH_32
++# LA32-REL:      00020240  00000206 R_LARCH_TLS_DTPMOD32   00000000   y + 0
++# LA32-REL-NEXT: 00020244  00000208 R_LARCH_TLS_DTPREL32   00000000   y + 0
++# LA32-REL-NEXT: 00020248  0000020a R_LARCH_TLS_TPREL32    00000000   y + 0
++
++# LA64-REL-NOT:  R_LARCH_64
++# LA64-REL:      00000000000203a8  0000000200000007 R_LARCH_TLS_DTPMOD64   0000000000000000 y + 0
++# LA64-REL-NEXT: 00000000000203b0  0000000200000009 R_LARCH_TLS_DTPREL64   0000000000000000 y + 0
++# LA64-REL-NEXT: 00000000000203b8  000000020000000b R_LARCH_TLS_TPREL64    0000000000000000 y + 0
++
++# LA32:      101d4: pcalau12i $a0, 16
++# LA32-NEXT:        ld.w $a0, $a0, 584
++# LA32-NEXT:        pcalau12i $a1, 16
++# LA32-NEXT:        addi.w $a1, $a1, 576
++
++# LA64:      102e0: pcalau12i $a0, 16
++# LA64-NEXT:        ld.d $a0, $a0, 952
++# LA64-NEXT:        pcalau12i $a1, 16
++# LA64-NEXT:        addi.d $a1, $a1, 936
++
++## Edge case: when a symbol is being accessed in both TLS GD and TLS IE ways,
++## correct reloc behavior should be preserved for both kinds of accesses.
++.global _start
++_start:
++la.tls.ie $a0, y  # should refer to the GOT entry relocated by the R_LARCH_TLS_TPRELnn record
++la.tls.gd $a1, y  # should refer to the GOT entry relocated by the R_LARCH_TLS_DTPMODnn record
++
++.section .tbss,"awT",@nobits
++.global y
++y:
++.word 0
++.size y, 4
+diff -uNr a/lld/test/ELF/loongarch-tls-gd.s b/lld/test/ELF/loongarch-tls-gd.s
+--- a/lld/test/ELF/loongarch-tls-gd.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-tls-gd.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,140 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++## LoongArch psABI doesn't specify TLS relaxation. Though the code sequences are not
++## relaxed, dynamic relocations can be omitted for GD->LE relaxation.
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/a.s -o %t/a.32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/bc.s -o %t/bc.32.o
++# RUN: ld.lld -shared -soname=bc.so %t/bc.32.o -o %t/bc.32.so
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/tga.s -o %t/tga.32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/a.s -o %t/a.64.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/bc.s -o %t/bc.64.o
++# RUN: ld.lld -shared -soname=bc.so %t/bc.64.o -o %t/bc.64.so
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/tga.s -o %t/tga.64.o
++
++## LA32 GD
++# RUN: ld.lld -shared %t/a.32.o %t/bc.32.o -o %t/gd.32.so
++# RUN: llvm-readobj -r %t/gd.32.so | FileCheck --check-prefix=GD32-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/gd.32.so | FileCheck --check-prefix=GD32 %s
++
++## LA32 GD -> LE
++# RUN: ld.lld %t/a.32.o %t/bc.32.o %t/tga.32.o -o %t/le.32
++# RUN: llvm-readelf -r %t/le.32 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le.32 | FileCheck --check-prefix=LE32-GOT %s
++# RUN: ld.lld -pie %t/a.32.o %t/bc.32.o %t/tga.32.o -o %t/le-pie.32
++# RUN: llvm-readelf -r %t/le-pie.32 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le-pie.32 | FileCheck --check-prefix=LE32-GOT %s
++
++## LA32 GD -> IE
++# RUN: ld.lld %t/a.32.o %t/bc.32.so %t/tga.32.o -o %t/ie.32
++# RUN: llvm-readobj -r %t/ie.32 | FileCheck --check-prefix=IE32-REL %s
++# RUN: llvm-readelf -x .got %t/ie.32 | FileCheck --check-prefix=IE32-GOT %s
++
++## LA64 GD
++# RUN: ld.lld -shared %t/a.64.o %t/bc.64.o -o %t/gd.64.so
++# RUN: llvm-readobj -r %t/gd.64.so | FileCheck --check-prefix=GD64-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/gd.64.so | FileCheck --check-prefix=GD64 %s
++
++## LA64 GD -> LE
++# RUN: ld.lld %t/a.64.o %t/bc.64.o %t/tga.64.o -o %t/le.64
++# RUN: llvm-readelf -r %t/le.64 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le.64 | FileCheck --check-prefix=LE64-GOT %s
++# RUN: ld.lld -pie %t/a.64.o %t/bc.64.o %t/tga.64.o -o %t/le-pie.64
++# RUN: llvm-readelf -r %t/le-pie.64 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le-pie.64 | FileCheck --check-prefix=LE64-GOT %s
++
++## LA64 GD -> IE
++# RUN: ld.lld %t/a.64.o %t/bc.64.so %t/tga.64.o -o %t/ie.64
++# RUN: llvm-readobj -r %t/ie.64 | FileCheck --check-prefix=IE64-REL %s
++# RUN: llvm-readelf -x .got %t/ie.64 | FileCheck --check-prefix=IE64-GOT %s
++
++# GD32-REL:      .rela.dyn {
++# GD32-REL-NEXT:   0x20314 R_LARCH_TLS_DTPMOD32 a 0x0
++# GD32-REL-NEXT:   0x20318 R_LARCH_TLS_DTPREL32 a 0x0
++# GD32-REL-NEXT:   0x2031C R_LARCH_TLS_DTPMOD32 b 0x0
++# GD32-REL-NEXT:   0x20320 R_LARCH_TLS_DTPREL32 b 0x0
++# GD32-REL-NEXT: }
++
++## &DTPMOD(a) - . = 0x20314 - 0x10250: 0x10 pages, page offset 0x314
++# GD32:      10250: pcalau12i $a0, 16
++# GD32-NEXT:        addi.w $a0, $a0, 788
++# GD32-NEXT:        bl 56
++
++## &DTPMOD(b) - . = 0x2031c - 0x1025c: 0x10 pages, page offset 0x31c
++# GD32:      1025c: pcalau12i $a0, 16
++# GD32-NEXT:        addi.w $a0, $a0, 796
++# GD32-NEXT:        bl 44
++
++# GD64-REL:      .rela.dyn {
++# GD64-REL-NEXT:   0x204C8 R_LARCH_TLS_DTPMOD64 a 0x0
++# GD64-REL-NEXT:   0x204D0 R_LARCH_TLS_DTPREL64 a 0x0
++# GD64-REL-NEXT:   0x204D8 R_LARCH_TLS_DTPMOD64 b 0x0
++# GD64-REL-NEXT:   0x204E0 R_LARCH_TLS_DTPREL64 b 0x0
++# GD64-REL-NEXT: }
++
++## &DTPMOD(a) - . = 0x204c8 - 0x10398: 0x10 pages, page offset 0x4c8
++# GD64:      10398: pcalau12i $a0, 16
++# GD64-NEXT:        addi.d $a0, $a0, 1224
++# GD64-NEXT:        bl 48
++
++## &DTPMOD(b) - . = 0x204d8 - 0x103a4: 0x10 pages, page offset 0x4d8
++# GD64:      103a4: pcalau12i $a0, 16
++# GD64-NEXT:        addi.d $a0, $a0, 1240
++# GD64-NEXT:        bl 36
++
++# NOREL: no relocations
++
++## .got contains pre-populated values: [a@dtpmod, a@dtprel, b@dtpmod, b@dtprel]
++## a@dtprel = st_value(a) = 0x8
++## b@dtprel = st_value(b) = 0xc
++# LE32-GOT: section '.got':
++# LE32-GOT-NEXT: 0x[[#%x,A:]] [[#%x,GOT:]] 01000000 08000000 01000000
++# LE32-GOT-NEXT: 0x[[#%x,A:]] 0c000000
++# LE64-GOT: section '.got':
++# LE64-GOT-NEXT: 0x[[#%x,A:]] [[#%x,GOT:]] [[#%x,GOT:]] 01000000 00000000
++# LE64-GOT-NEXT: 0x[[#%x,A:]] 08000000 00000000 01000000 00000000
++# LE64-GOT-NEXT: 0x[[#%x,A:]] 0c000000 00000000
++
++## a is local - relaxed to LE - its DTPMOD/DTPREL slots are link-time constants.
++## b is external - DTPMOD/DTPREL dynamic relocations are required.
++# IE32-REL:      .rela.dyn {
++# IE32-REL-NEXT:   0x3022C R_LARCH_TLS_DTPMOD32 b 0x0
++# IE32-REL-NEXT:   0x30230 R_LARCH_TLS_DTPREL32 b 0x0
++# IE32-REL-NEXT: }
++# IE32-GOT:      section '.got':
++# IE32-GOT-NEXT: 0x00030220 c0010300 01000000 08000000 00000000
++# IE32-GOT-NEXT: 0x00030230 00000000
++
++# IE64-REL:      .rela.dyn {
++# IE64-REL-NEXT:   0x30390 R_LARCH_TLS_DTPMOD64 b 0x0
++# IE64-REL-NEXT:   0x30398 R_LARCH_TLS_DTPREL64 b 0x0
++# IE64-REL-NEXT: }
++# IE64-GOT:      section '.got':
++# IE64-GOT-NEXT: 0x00030378 b8020300 00000000 01000000 00000000
++# IE64-GOT-NEXT: 0x00030388 08000000 00000000 00000000 00000000
++# IE64-GOT-NEXT: 0x00030398 00000000 00000000
++
++#--- a.s
++la.tls.gd $a0, a
++bl %plt(__tls_get_addr)
++
++la.tls.gd $a0, b
++bl %plt(__tls_get_addr)
++
++.section .tbss
++.globl a
++.zero 8
++a:
++.zero 4
++
++#--- bc.s
++.tbss
++.globl b, c
++b:
++.zero 4
++c:
++
++#--- tga.s
++.globl __tls_get_addr
++__tls_get_addr:
+diff -uNr a/lld/test/ELF/loongarch-tls-ie.s b/lld/test/ELF/loongarch-tls-ie.s
+--- a/lld/test/ELF/loongarch-tls-ie.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-tls-ie.s	2023-06-17 14:52:43.257642791 +0800
+@@ -0,0 +1,115 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/32.s -o %t/32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/64.s -o %t/64.o
++
++## LA32 IE
++# RUN: ld.lld -shared %t/32.o -o %t/32.so
++# RUN: llvm-readobj -r -d %t/32.so | FileCheck --check-prefix=IE32-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/32.so | FileCheck --check-prefixes=IE32 %s
++
++## LA32 IE -> LE
++# RUN: ld.lld %t/32.o -o %t/32
++# RUN: llvm-readelf -r %t/32 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/32 | FileCheck --check-prefix=LE32-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/32 | FileCheck --check-prefixes=LE32 %s
++
++## LA64 IE
++# RUN: ld.lld -shared %t/64.o -o %t/64.so
++# RUN: llvm-readobj -r -d %t/64.so | FileCheck --check-prefix=IE64-REL %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/64.so | FileCheck --check-prefixes=IE64 %s
++
++## LA64 IE -> LE
++# RUN: ld.lld %t/64.o -o %t/64
++# RUN: llvm-readelf -r %t/64 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/64 | FileCheck --check-prefix=LE64-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/64 | FileCheck --check-prefixes=LE64 %s
++
++# IE32-REL:      FLAGS STATIC_TLS
++# IE32-REL:      .rela.dyn {
++# IE32-REL-NEXT:   0x2021C R_LARCH_TLS_TPREL32 - 0xC
++# IE32-REL-NEXT:   0x20218 R_LARCH_TLS_TPREL32 a 0x0
++# IE32-REL-NEXT: }
++
++# IE64-REL:      FLAGS STATIC_TLS
++# IE64-REL:      .rela.dyn {
++# IE64-REL-NEXT:   0x20378 R_LARCH_TLS_TPREL64 - 0xC
++# IE64-REL-NEXT:   0x20370 R_LARCH_TLS_TPREL64 a 0x0
++# IE64-REL-NEXT: }
++
++## LA32:
++## &.got[0] - . = 0x20218 - 0x101a4: 0x10 pages, page offset 0x218
++## &.got[1] - . = 0x2021c - 0x101b0: 0x10 pages, page offset 0x21c
++# IE32:      101a4: pcalau12i $a4, 16
++# IE32-NEXT:        ld.w $a4, $a4, 536
++# IE32-NEXT:        add.w $a4, $a4, $tp
++# IE32-NEXT: 101b0: pcalau12i $a5, 16
++# IE32-NEXT:        ld.w $a5, $a5, 540
++# IE32-NEXT:        add.w $a5, $a5, $tp
++
++## LA64:
++## &.got[0] - . = 0x20370 - 0x102a0: 0x10 pages, page offset 0x370
++## &.got[1] - . = 0x20378 - 0x102ac: 0x10 pages, page offset 0x378
++# IE64:      102a0: pcalau12i $a4, 16
++# IE64-NEXT:        ld.d $a4, $a4, 880
++# IE64-NEXT:        add.d $a4, $a4, $tp
++# IE64-NEXT: 102ac: pcalau12i $a5, 16
++# IE64-NEXT:        ld.d $a5, $a5, 888
++# IE64-NEXT:        add.d $a5, $a5, $tp
++
++# NOREL: no relocations
++
++# a@tprel = st_value(a) = 0x8
++# b@tprel = st_value(a) = 0xc
++# LE32-GOT: section '.got':
++# LE32-GOT-NEXT: 0x0003012c 00000000 08000000 0c000000
++# LE64-GOT: section '.got':
++# LE64-GOT-NEXT: 0x000301e0 00000000 00000000 08000000 00000000
++# LE64-GOT-NEXT: 0x000301f0 0c000000 00000000
++
++## LA32:
++## &.got[0] - . = 0x30130 - 0x20114: 0x10 pages, page offset 0x130
++## &.got[1] - . = 0x30134 - 0x20120: 0x10 pages, page offset 0x134
++# LE32:      20114: pcalau12i $a4, 16
++# LE32-NEXT:        ld.w $a4, $a4, 304
++# LE32-NEXT:        add.w $a4, $a4, $tp
++# LE32-NEXT: 20120: pcalau12i $a5, 16
++# LE32-NEXT:        ld.w $a5, $a5, 308
++# LE32-NEXT:        add.w $a5, $a5, $tp
++
++## LA64:
++## &.got[0] - . = 0x301e8 - 0x201c8: 0x10 pages, page offset 0x1e8
++## &.got[1] - . = 0x301f0 - 0x201d4: 0x10 pages, page offset 0x1f0
++# LE64:      201c8: pcalau12i $a4, 16
++# LE64-NEXT:        ld.d $a4, $a4, 488
++# LE64-NEXT:        add.d $a4, $a4, $tp
++# LE64-NEXT: 201d4: pcalau12i $a5, 16
++# LE64-NEXT:        ld.d $a5, $a5, 496
++# LE64-NEXT:        add.d $a5, $a5, $tp
++
++#--- 32.s
++la.tls.ie $a4, a
++add.w $a4, $a4, $tp
++la.tls.ie $a5, b
++add.w $a5, $a5, $tp
++
++.section .tbss
++.globl a
++.zero 8
++a:
++.zero 4
++b:
++
++#--- 64.s
++la.tls.ie $a4, a
++add.d $a4, $a4, $tp
++la.tls.ie $a5, b
++add.d $a5, $a5, $tp
++
++.section .tbss
++.globl a
++.zero 8
++a:
++.zero 4
++b:
+diff -uNr a/lld/test/ELF/loongarch-tls-ld.s b/lld/test/ELF/loongarch-tls-ld.s
+--- a/lld/test/ELF/loongarch-tls-ld.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-tls-ld.s	2023-06-17 14:52:43.261642791 +0800
+@@ -0,0 +1,91 @@
++# REQUIRES: loongarch
++# RUN: rm -rf %t && split-file %s %t
++
++## LoongArch psABI doesn't specify TLS relaxation. Though the code sequences are not
++## relaxed, dynamic relocations can be omitted for LD->LE relaxation.
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 --position-independent %t/a.s -o %t/a.32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %t/tga.s -o %t/tga.32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 --position-independent %t/a.s -o %t/a.64.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %t/tga.s -o %t/tga.64.o
++
++## LA32 LD
++# RUN: ld.lld -shared %t/a.32.o -o %t/ld.32.so
++# RUN: llvm-readobj -r %t/ld.32.so | FileCheck --check-prefix=LD32-REL %s
++# RUN: llvm-readelf -x .got %t/ld.32.so | FileCheck --check-prefix=LD32-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/ld.32.so | FileCheck --check-prefixes=LD32 %s
++
++## LA32 LD -> LE
++# RUN: ld.lld %t/a.32.o %t/tga.32.o -o %t/le.32
++# RUN: llvm-readelf -r %t/le.32 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le.32 | FileCheck --check-prefix=LE32-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/le.32 | FileCheck --check-prefixes=LE32 %s
++
++## LA64 LD
++# RUN: ld.lld -shared %t/a.64.o -o %t/ld.64.so
++# RUN: llvm-readobj -r %t/ld.64.so | FileCheck --check-prefix=LD64-REL %s
++# RUN: llvm-readelf -x .got %t/ld.64.so | FileCheck --check-prefix=LD64-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/ld.64.so | FileCheck --check-prefixes=LD64 %s
++
++## LA64 LD -> LE
++# RUN: ld.lld %t/a.64.o %t/tga.64.o -o %t/le.64
++# RUN: llvm-readelf -r %t/le.64 | FileCheck --check-prefix=NOREL %s
++# RUN: llvm-readelf -x .got %t/le.64 | FileCheck --check-prefix=LE64-GOT %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t/le.64 | FileCheck --check-prefixes=LE64 %s
++
++## a@dtprel = st_value(a) = 0 is a link-time constant.
++# LD32-REL:      .rela.dyn {
++# LD32-REL-NEXT:   0x20284 R_LARCH_TLS_DTPMOD32 - 0x0
++# LD32-REL-NEXT: }
++# LD32-GOT:      section '.got':
++# LD32-GOT-NEXT: 0x00020280 10020200 00000000 00000000
++
++# LD64-REL:      .rela.dyn {
++# LD64-REL-NEXT:   0x20408 R_LARCH_TLS_DTPMOD64 - 0x0
++# LD64-REL-NEXT: }
++# LD64-GOT:      section '.got':
++# LD64-GOT-NEXT: 0x00020400 20030200 00000000 00000000 00000000
++# LD64-GOT-NEXT: 0x00020410 00000000 00000000
++
++## LA32: &DTPMOD(a) - . = 0x20284 - 0x101cc: 0x10 pages, page offset 0x284
++# LD32:      101cc: pcalau12i $a0, 16
++# LD32-NEXT:        addi.w $a0, $a0, 644
++# LD32-NEXT:        bl 44
++
++## LA64: &DTPMOD(a) - . = 0x20408 - 0x102e0: 0x10 pages, page offset 0x408
++# LD64:      102e0: pcalau12i $a0, 16
++# LD64-NEXT:        addi.d $a0, $a0, 1032
++# LD64-NEXT:        bl 40
++
++# NOREL: no relocations
++
++## a is local - its DTPMOD/DTPREL slots are link-time constants.
++## a@dtpmod = 1 (main module)
++# LE32-GOT: section '.got':
++# LE32-GOT-NEXT: 0x00030120 00000000 01000000 00000000
++
++# LE64-GOT: section '.got':
++# LE64-GOT-NEXT: 0x000301d8 00000000 00000000 01000000 00000000
++# LE64-GOT-NEXT: 0x000301e8 00000000 00000000
++
++## LA32: DTPMOD(.LANCHOR0) - . = 0x30124 - 0x20114: 0x10 pages, page offset 0x124
++# LE32:      20114: pcalau12i $a0, 16
++# LE32-NEXT:        addi.w $a0, $a0, 292
++# LE32-NEXT:        bl 4
++
++## LA64: DTPMOD(.LANCHOR0) - . = 0x301e0 - 0x201c8: 0x10 pages, page offset 0x1e0
++# LE64:      201c8: pcalau12i $a0, 16
++# LE64-NEXT:        addi.d $a0, $a0, 480
++# LE64-NEXT:        bl 4
++
++#--- a.s
++la.tls.ld $a0, .LANCHOR0
++bl %plt(__tls_get_addr)
++
++.section .tbss,"awT",@nobits
++.set .LANCHOR0, . + 0
++.zero 8
++
++#--- tga.s
++.globl __tls_get_addr
++__tls_get_addr:
+diff -uNr a/lld/test/ELF/loongarch-tls-le.s b/lld/test/ELF/loongarch-tls-le.s
+--- a/lld/test/ELF/loongarch-tls-le.s	1970-01-01 08:00:00.000000000 +0800
++++ b/lld/test/ELF/loongarch-tls-le.s	2023-06-17 14:52:43.261642791 +0800
+@@ -0,0 +1,42 @@
++# REQUIRES: loongarch
++
++# RUN: llvm-mc --filetype=obj --triple=loongarch32 %s -o %t.32.o
++# RUN: llvm-mc --filetype=obj --triple=loongarch64 %s -o %t.64.o
++
++# RUN: ld.lld %t.32.o -o %t.32
++# RUN: llvm-nm -p %t.32 | FileCheck --check-prefixes=NM %s
++# RUN: llvm-objdump -d --no-show-raw-insn %t.32 | FileCheck --check-prefixes=LE %s
++
++# RUN: ld.lld %t.64.o -o %t.64
++# RUN: llvm-objdump -d --no-show-raw-insn %t.64 | FileCheck --check-prefixes=LE %s
++
++# RUN: not ld.lld -shared %t.32.o -o /dev/null 2>&1 | FileCheck %s --check-prefix=ERR --implicit-check-not=error:
++
++# ERR: error: relocation R_LARCH_TLS_LE_HI20 against .LANCHOR0 cannot be used with -shared
++# ERR: error: relocation R_LARCH_TLS_LE_LO12 against .LANCHOR0 cannot be used with -shared
++# ERR: error: relocation R_LARCH_TLS_LE_HI20 against a cannot be used with -shared
++# ERR: error: relocation R_LARCH_TLS_LE_LO12 against a cannot be used with -shared
++
++# NM: {{0*}}00000008 b .LANCHOR0
++# NM: {{0*}}00000800 B a
++
++## .LANCHOR0@tprel = 8
++## a@tprel = 0x800
++# LE:      lu12i.w $a0, 0
++# LE-NEXT: ori $a0, $a0, 8
++# LE-NEXT: lu12i.w $a1, 0
++# LE-NEXT: ori $a1, $a1, 2048
++# LE-EMPTY:
++
++.text
++_start:
++la.tls.le $a0, .LANCHOR0
++la.tls.le $a1, a
++
++.section .tbss
++.space 8
++.LANCHOR0:
++.space 0x800-8
++.globl a
++a:
++.zero 4
+diff -uNr a/lld/test/lit.cfg.py b/lld/test/lit.cfg.py
+--- a/lld/test/lit.cfg.py	2023-06-14 14:05:51.000000000 +0800
++++ b/lld/test/lit.cfg.py	2023-06-17 14:53:08.001643501 +0800
+@@ -68,6 +68,7 @@
+                           'ARM': 'arm',
+                           'AVR': 'avr',
+                           'Hexagon': 'hexagon',
++                          "LoongArch": "loongarch",
+                           'Mips': 'mips',
+                           'MSP430': 'msp430',
+                           'PowerPC': 'ppc',
+diff -uNr a/llvm/include/llvm/BinaryFormat/ELFRelocs/LoongArch.def b/llvm/include/llvm/BinaryFormat/ELFRelocs/LoongArch.def
+--- a/llvm/include/llvm/BinaryFormat/ELFRelocs/LoongArch.def	2023-06-14 14:05:51.000000000 +0800
++++ b/llvm/include/llvm/BinaryFormat/ELFRelocs/LoongArch.def	2023-06-17 14:50:41.173637467 +0800
+@@ -103,3 +103,18 @@
+ ELF_RELOC(R_LARCH_TLS_GD_HI20,      98)
+ ELF_RELOC(R_LARCH_32_PCREL,         99)
+ ELF_RELOC(R_LARCH_RELAX,            100)
++
++// Relocs added in ELF for the LoongArch™ Architecture v20230519, part of the
++// v2.10 LoongArch ABI specs.
++//
++// Spec addition: https://github.com/loongson/la-abi-specs/pull/1
++// Binutils commit 57a930e3bfe4b2c7fd6463ed39311e1938513138
++ELF_RELOC(R_LARCH_DELETE,      101)
++ELF_RELOC(R_LARCH_ALIGN,       102)
++ELF_RELOC(R_LARCH_PCREL20_S2,  103)
++ELF_RELOC(R_LARCH_CFA,         104)
++ELF_RELOC(R_LARCH_ADD6,        105)
++ELF_RELOC(R_LARCH_SUB6,        106)
++ELF_RELOC(R_LARCH_ADD_ULEB128, 107)
++ELF_RELOC(R_LARCH_SUB_ULEB128, 108)
++ELF_RELOC(R_LARCH_64_PCREL,    109)
+diff -uNr a/llvm/lib/Object/RelocationResolver.cpp b/llvm/lib/Object/RelocationResolver.cpp
+--- a/llvm/lib/Object/RelocationResolver.cpp	2023-06-14 14:05:51.000000000 +0800
++++ b/llvm/lib/Object/RelocationResolver.cpp	2023-06-17 14:52:20.113642022 +0800
+@@ -526,6 +526,9 @@
+   case ELF::R_LARCH_32:
+   case ELF::R_LARCH_32_PCREL:
+   case ELF::R_LARCH_64:
++  case ELF::R_LARCH_64_PCREL:
++  case ELF::R_LARCH_ADD6:
++  case ELF::R_LARCH_SUB6:
+   case ELF::R_LARCH_ADD8:
+   case ELF::R_LARCH_SUB8:
+   case ELF::R_LARCH_ADD16:
+@@ -535,6 +538,11 @@
+   case ELF::R_LARCH_ADD64:
+   case ELF::R_LARCH_SUB64:
+     return true;
++  case ELF::R_LARCH_ADD_ULEB128:
++  case ELF::R_LARCH_SUB_ULEB128:
++    // TODO: Cannot be supported with the current API: LEB128 requires a
++    // stream for I/O.
++    return false;
+   default:
+     return false;
+   }
+@@ -551,6 +559,12 @@
+     return (S + Addend - Offset) & 0xFFFFFFFF;
+   case ELF::R_LARCH_64:
+     return S + Addend;
++  case ELF::R_LARCH_64_PCREL:
++    return S + Addend - Offset;
++  case ELF::R_LARCH_ADD6:
++    return (LocData & 0xC0) | (((LocData & 0x3F) + (S + Addend)) & 0x3F);
++  case ELF::R_LARCH_SUB6:
++    return (LocData & 0xC0) | (((LocData & 0x3F) - (S + Addend)) & 0x3F);
+   case ELF::R_LARCH_ADD8:
+     return (LocData + (S + Addend)) & 0xFF;
+   case ELF::R_LARCH_SUB8:
+@@ -861,8 +875,10 @@
+ 
+       if (GetRelSectionType() == ELF::SHT_RELA) {
+         Addend = getELFAddend(R);
+-        // RISCV relocations use both LocData and Addend.
+-        if (Obj->getArch() != Triple::riscv32 &&
++        // LoongArch and RISCV relocations use both LocData and Addend.
++        if (Obj->getArch() != Triple::loongarch32 &&
++            Obj->getArch() != Triple::loongarch64 &&
++            Obj->getArch() != Triple::riscv32 &&
+             Obj->getArch() != Triple::riscv64)
+           LocData = 0;
+       }
+diff -uNr a/llvm/lib/Target/LoongArch/LoongArch.td b/llvm/lib/Target/LoongArch/LoongArch.td
+--- a/llvm/lib/Target/LoongArch/LoongArch.td	2023-06-14 14:05:52.000000000 +0800
++++ b/llvm/lib/Target/LoongArch/LoongArch.td	2023-06-17 14:52:33.565642481 +0800
+@@ -36,57 +36,39 @@
+ def FeatureBasicF
+     : SubtargetFeature<"f", "HasBasicF", "true",
+                        "'F' (Single-Precision Floating-Point)">;
+-def HasBasicF
+-    : Predicate<"Subtarget->hasBasicF()">,
+-      AssemblerPredicate<(all_of FeatureBasicF),
+-                         "'F' (Single-Precision Floating-Point)">;
++def HasBasicF : Predicate<"Subtarget->hasBasicF()">;
+ 
+ // Double Precision floating point
+ def FeatureBasicD
+     : SubtargetFeature<"d", "HasBasicD", "true",
+                        "'D' (Double-Precision Floating-Point)",
+                        [FeatureBasicF]>;
+-def HasBasicD
+-    : Predicate<"Subtarget->hasBasicD()">,
+-      AssemblerPredicate<(all_of FeatureBasicD),
+-                         "'D' (Double-Precision Floating-Point)">;
++def HasBasicD : Predicate<"Subtarget->hasBasicD()">;
+ 
+ // Loongson SIMD eXtension (LSX)
+ def FeatureExtLSX
+     : SubtargetFeature<"lsx", "HasExtLSX", "true",
+                        "'LSX' (Loongson SIMD Extension)", [FeatureBasicD]>;
+-def HasExtLSX
+-    : Predicate<"Subtarget->hasExtLSX()">,
+-      AssemblerPredicate<(all_of FeatureExtLSX),
+-                         "'LSX' (Loongson SIMD Extension)">;
++def HasExtLSX : Predicate<"Subtarget->hasExtLSX()">;
+ 
+ // Loongson Advanced SIMD eXtension (LASX)
+ def FeatureExtLASX
+     : SubtargetFeature<"lasx", "HasExtLASX", "true",
+                        "'LASX' (Loongson Advanced SIMD Extension)",
+                        [FeatureExtLSX]>;
+-def HasExtLASX
+-    : Predicate<"Subtarget->hasExtLASX()">,
+-      AssemblerPredicate<(all_of FeatureExtLASX),
+-                         "'LASX' (Loongson Advanced SIMD Extension)">;
++def HasExtLASX : Predicate<"Subtarget->hasExtLASX()">;
+ 
+ // Loongson VirtualiZation (LVZ)
+ def FeatureExtLVZ
+     : SubtargetFeature<"lvz", "HasExtLVZ", "true",
+                        "'LVZ' (Loongson Virtualization Extension)">;
+-def HasExtLVZ
+-    : Predicate<"Subtarget->hasExtLVZ()">,
+-      AssemblerPredicate<(all_of FeatureExtLVZ),
+-                         "'LVZ' (Loongson Virtualization Extension)">;
++def HasExtLVZ : Predicate<"Subtarget->hasExtLVZ()">;
+ 
+ // Loongson Binary Translation (LBT)
+ def FeatureExtLBT
+     : SubtargetFeature<"lbt", "HasExtLBT", "true",
+                        "'LBT' (Loongson Binary Translation Extension)">;
+-def HasExtLBT
+-    : Predicate<"Subtarget->hasExtLBT()">,
+-      AssemblerPredicate<(all_of FeatureExtLBT),
+-                         "'LBT' (Loongson Binary Translation Extension)">;
++def HasExtLBT : Predicate<"Subtarget->hasExtLBT()">;
+ 
+ // Expand la.global as la.pcrel
+ def LaGlobalWithPcrel
+diff -uNr a/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp b/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp
+--- a/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp	2023-06-14 14:05:52.000000000 +0800
++++ b/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp	2023-06-17 14:52:26.677642250 +0800
+@@ -434,6 +434,14 @@
+     0x0200000000000, // OriginBase
+ };
+ 
++// loongarch64 Linux
++static const MemoryMapParams Linux_LoongArch64_MemoryMapParams = {
++    0,              // AndMask (not used)
++    0x500000000000, // XorMask
++    0,              // ShadowBase (not used)
++    0x100000000000, // OriginBase
++};
++
+ // aarch64 FreeBSD
+ static const MemoryMapParams FreeBSD_AArch64_MemoryMapParams = {
+     0x1800000000000, // AndMask
+@@ -491,6 +499,11 @@
+     &Linux_AArch64_MemoryMapParams,
+ };
+ 
++static const PlatformMemoryMapParams Linux_LoongArch_MemoryMapParams = {
++    nullptr,
++    &Linux_LoongArch64_MemoryMapParams,
++};
++
+ static const PlatformMemoryMapParams FreeBSD_ARM_MemoryMapParams = {
+     nullptr,
+     &FreeBSD_AArch64_MemoryMapParams,
+@@ -986,6 +999,9 @@
+       case Triple::aarch64_be:
+         MapParams = Linux_ARM_MemoryMapParams.bits64;
+         break;
++      case Triple::loongarch64:
++        MapParams = Linux_LoongArch_MemoryMapParams.bits64;
++        break;
+       default:
+         report_fatal_error("unsupported architecture");
+       }
+diff -uNr a/llvm/test/CodeGen/LoongArch/intrinsic-la64.ll b/llvm/test/CodeGen/LoongArch/intrinsic-la64.ll
+--- a/llvm/test/CodeGen/LoongArch/intrinsic-la64.ll	2023-03-14 16:58:25.000000000 +0800
++++ b/llvm/test/CodeGen/LoongArch/intrinsic-la64.ll	2023-06-17 14:52:38.097642628 +0800
+@@ -121,6 +121,17 @@
+   ret i64 %0
+ }
+ 
++;; Check that csrwr is emitted even if the return value the intrinsic is not used.
++;; FIXME: currently csrwr is not emitted.
++define void @csrwr_d_noret(i64 %a) {
++; CHECK-LABEL: csrwr_d_noret:
++; CHECK:       # %bb.0: # %entry
++; CHECK-NEXT:    ret
++entry:
++  %0 = tail call i64 @llvm.loongarch.csrwr.d(i64 %a, i32 1)
++  ret void
++}
++
+ define i64 @csrxchg_d(i64 %a, i64 %b) {
+ ; CHECK-LABEL: csrxchg_d:
+ ; CHECK:       # %bb.0: # %entry
+@@ -131,6 +142,17 @@
+   ret i64 %0
+ }
+ 
++;; Check that csrxchg is emitted even if the return value the intrinsic is not used.
++;; FIXME: currently csrxchg is not emitted.
++define void @csrxchg_d_noret(i64 %a, i64 %b) {
++; CHECK-LABEL: csrxchg_d_noret:
++; CHECK:       # %bb.0: # %entry
++; CHECK-NEXT:    ret
++entry:
++  %0 = tail call i64 @llvm.loongarch.csrxchg.d(i64 %a, i64 %b, i32 1)
++  ret void
++}
++
+ define i64 @iocsrrd_d(i32 %a) {
+ ; CHECK-LABEL: iocsrrd_d:
+ ; CHECK:       # %bb.0: # %entry
+diff -uNr a/llvm/test/CodeGen/LoongArch/intrinsic.ll b/llvm/test/CodeGen/LoongArch/intrinsic.ll
+--- a/llvm/test/CodeGen/LoongArch/intrinsic.ll	2023-03-14 16:58:25.000000000 +0800
++++ b/llvm/test/CodeGen/LoongArch/intrinsic.ll	2023-06-17 14:52:38.097642628 +0800
+@@ -99,6 +99,17 @@
+   ret i32 %0
+ }
+ 
++;; Check that csrwr is emitted even if the return value the intrinsic is not used.
++;; FIXME: currently csrwr is not emitted.
++define void @csrwr_w_noret(i32 signext %a) {
++; CHECK-LABEL: csrwr_w_noret:
++; CHECK:       # %bb.0: # %entry
++; CHECK-NEXT:    ret
++entry:
++  %0 = tail call i32 @llvm.loongarch.csrwr.w(i32 %a, i32 1)
++  ret void
++}
++
+ define i32 @csrxchg_w(i32 signext %a, i32 signext %b) {
+ ; CHECK-LABEL: csrxchg_w:
+ ; CHECK:       # %bb.0: # %entry
+@@ -109,6 +120,17 @@
+   ret i32 %0
+ }
+ 
++;; Check that csrxchg is emitted even if the return value the intrinsic is not used.
++;; FIXME: currently csrxchg is not emitted.
++define void @csrxchg_w_noret(i32 signext %a, i32 signext %b) {
++; CHECK-LABEL: csrxchg_w_noret:
++; CHECK:       # %bb.0: # %entry
++; CHECK-NEXT:    ret
++entry:
++  %0 = tail call i32 @llvm.loongarch.csrxchg.w(i32 %a, i32 %b, i32 1)
++  ret void
++}
++
+ define i32 @iocsrrd_b(i32 %a) {
+ ; CHECK-LABEL: iocsrrd_b:
+ ; CHECK:       # %bb.0: # %entry
+diff -uNr a/llvm/test/Instrumentation/MemorySanitizer/LoongArch/vararg.ll b/llvm/test/Instrumentation/MemorySanitizer/LoongArch/vararg.ll
+--- a/llvm/test/Instrumentation/MemorySanitizer/LoongArch/vararg.ll	1970-01-01 08:00:00.000000000 +0800
++++ b/llvm/test/Instrumentation/MemorySanitizer/LoongArch/vararg.ll	2023-06-17 14:52:26.677642250 +0800
+@@ -0,0 +1,14 @@
++; RUN: opt < %s -msan-check-access-address=0 -S -passes=msan 2>&1
++; Test that code using va_start can be compiled on LoongArch.
++
++target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"
++target triple = "loongarch64-unknown-linux-gnu"
++
++define void @VaStart(ptr %s, ...) {
++entry:
++  %vl = alloca ptr, align 4
++  call void @llvm.va_start(ptr %vl)
++  ret void
++}
++
++declare void @llvm.va_start(ptr)
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-arith.s b/llvm/test/MC/LoongArch/Basic/Float/d-arith.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-arith.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-arith.s	2023-06-17 14:52:33.565642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-bound-check.s b/llvm/test/MC/LoongArch/Basic/Float/d-bound-check.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-bound-check.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-bound-check.s	2023-06-17 14:52:33.565642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-branch.s b/llvm/test/MC/LoongArch/Basic/Float/d-branch.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-branch.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-branch.s	2023-06-17 14:52:33.565642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-comp.s b/llvm/test/MC/LoongArch/Basic/Float/d-comp.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-comp.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-comp.s	2023-06-17 14:52:33.565642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-conv.s b/llvm/test/MC/LoongArch/Basic/Float/d-conv.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-conv.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-conv.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-invalid.s b/llvm/test/MC/LoongArch/Basic/Float/d-invalid.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-invalid.s	2023-01-02 21:01:28.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-invalid.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,4 +1,4 @@
+-# RUN: not llvm-mc --triple=loongarch32 -mattr=+d %s 2>&1 | FileCheck %s
++# RUN: not llvm-mc --triple=loongarch32 %s 2>&1 | FileCheck %s
+ 
+ # CHECK: :[[#@LINE+1]]:1: error: instruction requires the following: LA64 Basic Integer and Privilege Instruction Set
+ movgr2fr.d $fa0, $a0
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-memory.s b/llvm/test/MC/LoongArch/Basic/Float/d-memory.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-memory.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-memory.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/d-move.s b/llvm/test/MC/LoongArch/Basic/Float/d-move.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/d-move.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/d-move.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --show-encoding --defsym=LA64=1 \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding --defsym=LA64=1 \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM,ASM-AND-OBJ64,ASM64 %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+d --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+d --filetype=obj --defsym=LA64=1 \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj --defsym=LA64=1 \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM-AND-OBJ64 %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-arith.s b/llvm/test/MC/LoongArch/Basic/Float/f-arith.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-arith.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-arith.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-bound-check.s b/llvm/test/MC/LoongArch/Basic/Float/f-bound-check.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-bound-check.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-bound-check.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-branch.s b/llvm/test/MC/LoongArch/Basic/Float/f-branch.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-branch.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-branch.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-comp.s b/llvm/test/MC/LoongArch/Basic/Float/f-comp.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-comp.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-comp.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-conv.s b/llvm/test/MC/LoongArch/Basic/Float/f-conv.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-conv.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-conv.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-invalid.s b/llvm/test/MC/LoongArch/Basic/Float/f-invalid.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-invalid.s	2023-01-02 21:01:28.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-invalid.s	1970-01-01 08:00:00.000000000 +0800
+@@ -1,4 +0,0 @@
+-# RUN: not llvm-mc --triple=loongarch32 -mattr=+f %s 2>&1 | FileCheck %s
+-
+-# CHECK: :[[#@LINE+1]]:1: error: instruction requires the following: 'D' (Double-Precision Floating-Point)
+-fadd.d $fa0, $fa0, $fa0
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-memory.s b/llvm/test/MC/LoongArch/Basic/Float/f-memory.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-memory.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-memory.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Float/f-move.s b/llvm/test/MC/LoongArch/Basic/Float/f-move.s
+--- a/llvm/test/MC/LoongArch/Basic/Float/f-move.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Float/f-move.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,11 +1,11 @@
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch32 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --show-encoding \
++# RUN: llvm-mc %s --triple=loongarch64 --show-encoding \
+ # RUN:     | FileCheck --check-prefixes=ASM-AND-OBJ,ASM %s
+-# RUN: llvm-mc %s --triple=loongarch32 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch32 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+-# RUN: llvm-mc %s --triple=loongarch64 --mattr=+f --filetype=obj \
++# RUN: llvm-mc %s --triple=loongarch64 --filetype=obj \
+ # RUN:     | llvm-objdump -d - \
+ # RUN:     | FileCheck --check-prefix=ASM-AND-OBJ %s
+ 
+diff -uNr a/llvm/test/MC/LoongArch/Basic/Integer/invalid.s b/llvm/test/MC/LoongArch/Basic/Integer/invalid.s
+--- a/llvm/test/MC/LoongArch/Basic/Integer/invalid.s	2023-03-14 16:58:26.000000000 +0800
++++ b/llvm/test/MC/LoongArch/Basic/Integer/invalid.s	2023-06-17 14:52:33.569642481 +0800
+@@ -1,9 +1,7 @@
+ ## Test invalid instructions on both loongarch32 and loongarch64 target.
+ 
+-# RUN: not llvm-mc --triple=loongarch32 --mattr=-f %s 2>&1 \
+-# RUN:         | FileCheck %s --check-prefixes=CHECK,CHECK64
+-# RUN: not llvm-mc --triple=loongarch64 --mattr=-f %s 2>&1 --defsym=LA64=1 \
+-# RUN:         | FileCheck %s
++# RUN: not llvm-mc --triple=loongarch32 %s 2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK64
++# RUN: not llvm-mc --triple=loongarch64 %s 2>&1 --defsym=LA64=1 | FileCheck %s
+ 
+ ## Out of range immediates
+ ## uimm2
+@@ -181,12 +179,6 @@
+ ## Instructions outside the base integer ISA
+ ## TODO: Test instructions in LSX/LASX/LBT/LVZ after their introduction.
+ 
+-## Floating-Point mnemonics
+-fadd.s $fa0, $fa0, $fa0
+-# CHECK:   :[[#@LINE-1]]:1: error: instruction requires the following: 'F' (Single-Precision Floating-Point)
+-fadd.d $fa0, $fa0, $fa0
+-# CHECK:   :[[#@LINE-1]]:1: error: instruction requires the following: 'D' (Double-Precision Floating-Point)
+-
+ ## Using floating point registers when integer registers are expected
+ sll.w $a0, $a0, $fa0
+ # CHECK: :[[#@LINE-1]]:18: error: invalid operand for instruction
+diff -uNr a/llvm/test/tools/llvm-readobj/ELF/reloc-types-loongarch64.test b/llvm/test/tools/llvm-readobj/ELF/reloc-types-loongarch64.test
+--- a/llvm/test/tools/llvm-readobj/ELF/reloc-types-loongarch64.test	2023-06-14 14:05:53.000000000 +0800
++++ b/llvm/test/tools/llvm-readobj/ELF/reloc-types-loongarch64.test	2023-06-17 14:50:41.173637467 +0800
+@@ -93,6 +93,15 @@
+ # CHECK: Type: R_LARCH_TLS_GD_HI20 (98)
+ # CHECK: Type: R_LARCH_32_PCREL (99)
+ # CHECK: Type: R_LARCH_RELAX (100)
++# CHECK: Type: R_LARCH_DELETE (101)
++# CHECK: Type: R_LARCH_ALIGN (102)
++# CHECK: Type: R_LARCH_PCREL20_S2 (103)
++# CHECK: Type: R_LARCH_CFA (104)
++# CHECK: Type: R_LARCH_ADD6 (105)
++# CHECK: Type: R_LARCH_SUB6 (106)
++# CHECK: Type: R_LARCH_ADD_ULEB128 (107)
++# CHECK: Type: R_LARCH_SUB_ULEB128 (108)
++# CHECK: Type: R_LARCH_64_PCREL (109)
+ 
+ --- !ELF
+ FileHeader:
+@@ -193,3 +202,12 @@
+       - Type: R_LARCH_TLS_GD_HI20
+       - Type: R_LARCH_32_PCREL
+       - Type: R_LARCH_RELAX
++      - Type: R_LARCH_DELETE
++      - Type: R_LARCH_ALIGN
++      - Type: R_LARCH_PCREL20_S2
++      - Type: R_LARCH_CFA
++      - Type: R_LARCH_ADD6
++      - Type: R_LARCH_SUB6
++      - Type: R_LARCH_ADD_ULEB128
++      - Type: R_LARCH_SUB_ULEB128
++      - Type: R_LARCH_64_PCREL
+diff -uNr a/llvm/unittests/Object/ELFTest.cpp b/llvm/unittests/Object/ELFTest.cpp
+--- a/llvm/unittests/Object/ELFTest.cpp	2023-06-14 14:05:53.000000000 +0800
++++ b/llvm/unittests/Object/ELFTest.cpp	2023-06-17 14:50:41.173637467 +0800
+@@ -233,6 +233,24 @@
+             getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_32_PCREL));
+   EXPECT_EQ("R_LARCH_RELAX",
+             getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_RELAX));
++  EXPECT_EQ("R_LARCH_DELETE",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_DELETE));
++  EXPECT_EQ("R_LARCH_ALIGN",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_ALIGN));
++  EXPECT_EQ("R_LARCH_PCREL20_S2",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_PCREL20_S2));
++  EXPECT_EQ("R_LARCH_CFA",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_CFA));
++  EXPECT_EQ("R_LARCH_ADD6",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_ADD6));
++  EXPECT_EQ("R_LARCH_SUB6",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_SUB6));
++  EXPECT_EQ("R_LARCH_ADD_ULEB128",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_ADD_ULEB128));
++  EXPECT_EQ("R_LARCH_SUB_ULEB128",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_SUB_ULEB128));
++  EXPECT_EQ("R_LARCH_64_PCREL",
++            getELFRelocationTypeName(EM_LOONGARCH, R_LARCH_64_PCREL));
+ }
+ 
+ TEST(ELFTest, getELFRelativeRelocationType) {
diff -uNr a/debian/patches/llvm-16-loongarch-multiarch.patch b/debian/patches/llvm-16-loongarch-multiarch.patch
--- a/debian/patches/llvm-16-loongarch-multiarch.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/llvm-16-loongarch-multiarch.patch	2023-06-17 18:50:32.000000000 +0800
@@ -0,0 +1,214 @@
+diff -uNr a/clang/lib/Driver/ToolChains/Arch/LoongArch.cpp b/clang/lib/Driver/ToolChains/Arch/LoongArch.cpp
+--- a/clang/lib/Driver/ToolChains/Arch/LoongArch.cpp	2023-06-14 14:05:49.000000000 +0800
++++ b/clang/lib/Driver/ToolChains/Arch/LoongArch.cpp	2023-06-17 18:42:51.749413239 +0800
+@@ -54,7 +54,28 @@
+   }
+ 
+   // Choose a default based on the triple.
+-  return IsLA32 ? "ilp32d" : "lp64d";
++  // Honor the explicit ABI modifier suffix in triple's environment part if
++  // present, falling back to {ILP32,LP64}D otherwise.
++  switch (Triple.getEnvironment()) {
++  case llvm::Triple::GNUSF:
++    return IsLA32 ? "ilp32s" : "lp64s";
++  case llvm::Triple::GNUF32:
++    return IsLA32 ? "ilp32f" : "lp64f";
++  case llvm::Triple::GNUF64:
++    // This was originally permitted (and indeed the canonical way) to
++    // represent the {ILP32,LP64}D ABIs, but in Feb 2023 Loongson decided to
++    // drop the explicit suffix in favor of unmarked `-gnu` for the
++    // "general-purpose" ABIs, among other non-technical reasons.
++    //
++    // The spec change did not mention whether existing usages of "gnuf64"
++    // shall remain valid or not, so we are going to continue recognizing it
++    // for some time, until it is clear that everyone else has migrated away
++    // from it.
++    [[fallthrough]];
++  case llvm::Triple::GNU:
++  default:
++    return IsLA32 ? "ilp32d" : "lp64d";
++  }
+ }
+ 
+ void loongarch::getLoongArchTargetFeatures(const Driver &D,
+diff -uNr a/clang/lib/Driver/ToolChains/Linux.cpp b/clang/lib/Driver/ToolChains/Linux.cpp
+--- a/clang/lib/Driver/ToolChains/Linux.cpp	2023-06-17 02:43:17.000000000 +0800
++++ b/clang/lib/Driver/ToolChains/Linux.cpp	2023-06-17 18:42:51.753413237 +0800
+@@ -87,6 +87,39 @@
+   case llvm::Triple::aarch64_be:
+     return "aarch64_be-linux-gnu";
+ 
++  case llvm::Triple::loongarch64: {
++    const char *Libc;
++    const char *FPFlavor;
++
++    if (TargetTriple.isGNUEnvironment()) {
++      Libc = "gnu";
++    } else if (TargetTriple.isMusl()) {
++      Libc = "musl";
++    } else {
++      return TargetTriple.str();
++    }
++
++    switch (TargetEnvironment) {
++    default:
++      return TargetTriple.str();
++    case llvm::Triple::GNUSF:
++      FPFlavor = "sf";
++      break;
++    case llvm::Triple::GNUF32:
++      FPFlavor = "f32";
++      break;
++    case llvm::Triple::GNU:
++    case llvm::Triple::GNUF64:
++      // This was going to be "f64" in an earlier Toolchain Conventions
++      // revision, but starting from Feb 2023 the F64 ABI variants are
++      // unmarked in their canonical forms.
++      FPFlavor = "";
++      break;
++    }
++
++    return (Twine("loongarch64-linux-") + Libc + FPFlavor).str();
++  }
++
+   case llvm::Triple::m68k:
+     return "m68k-linux-gnu";
+ 
+diff -uNr a/clang/test/Driver/linux-header-search.cpp b/clang/test/Driver/linux-header-search.cpp
+--- a/clang/test/Driver/linux-header-search.cpp	2023-06-14 14:05:50.000000000 +0800
++++ b/clang/test/Driver/linux-header-search.cpp	2023-06-17 18:42:51.757413235 +0800
+@@ -244,6 +244,32 @@
+ // CHECK-GENTOO-4-9-X-32: "-internal-externc-isystem" "[[SYSROOT]]/include"
+ // CHECK-GENTOO-4-9-X-32: "-internal-externc-isystem" "[[SYSROOT]]/usr/include"
+ //
++// Check header search on Debian loong64
++// RUN: %clang -### %s -fsyntax-only 2>&1 \
++// RUN:     --target=loongarch64-unknown-linux-gnu -stdlib=libstdc++ \
++// RUN:     --sysroot=%S/Inputs/debian_loong64_tree \
++// RUN:     --gcc-toolchain="" \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONG64-GNU %s
++//
++// Check that "-gnuf64" is seen as "-gnu" for loong64.
++// RUN: %clang -### %s -fsyntax-only 2>&1 \
++// RUN:     --target=loongarch64-unknown-linux-gnuf64 -stdlib=libstdc++ \
++// RUN:     --sysroot=%S/Inputs/debian_loong64_tree \
++// RUN:     --gcc-toolchain="" \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONG64-GNU %s
++// CHECK-LOONG64-GNU: "-cc1"
++// CHECK-LOONG64-GNU: "-resource-dir" "[[RESOURCE_DIR:[^"]+]]"
++// CHECK-LOONG64-GNU: "-isysroot" "[[SYSROOT:[^"]+]]"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/../../../../include/c++/13"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/../../../../include/c++/13/loongarch64-linux-gnu"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/../../../../include/c++/13/backward"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[RESOURCE_DIR]]{{/|\\\\}}include"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[SYSROOT]]/usr/local/include"
++// CHECK-LOONG64-GNU: "-internal-isystem" "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/../../../../loongarch64-linux-gnu/include"
++// CHECK-LOONG64-GNU: "-internal-externc-isystem" "[[SYSROOT]]/usr/include/loongarch64-linux-gnu"
++// CHECK-LOONG64-GNU: "-internal-externc-isystem" "[[SYSROOT]]/include"
++// CHECK-LOONG64-GNU: "-internal-externc-isystem" "[[SYSROOT]]/usr/include"
++//
+ // Check header search on Debian 6 / MIPS64
+ // RUN: %clang -### %s -fsyntax-only 2>&1 \
+ // RUN:     --target=mips64-unknown-linux-gnuabi64 -stdlib=libstdc++ \
+diff -uNr a/clang/test/Driver/linux-ld.c b/clang/test/Driver/linux-ld.c
+--- a/clang/test/Driver/linux-ld.c	2023-06-14 14:05:50.000000000 +0800
++++ b/clang/test/Driver/linux-ld.c	2023-06-17 18:42:51.757413235 +0800
+@@ -830,6 +830,30 @@
+ // CHECK-ARM-HF: "-dynamic-linker" "{{.*}}/lib/ld-linux-armhf.so.3"
+ //
+ // RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnu \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONGARCH-LP64D %s
++// RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnuf64 \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONGARCH-LP64D %s
++// CHECK-LOONGARCH-LP64D: "{{.*}}ld{{(.exe)?}}"
++// CHECK-LOONGARCH-LP64D: "-m" "elf64loongarch"
++// CHECK-LOONGARCH-LP64D: "-dynamic-linker" "{{.*}}/lib64/ld-linux-loongarch-lp64d.so.1"
++//
++// RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnuf32 \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONGARCH-LP64F %s
++// CHECK-LOONGARCH-LP64F: "{{.*}}ld{{(.exe)?}}"
++// CHECK-LOONGARCH-LP64F: "-m" "elf64loongarch"
++// CHECK-LOONGARCH-LP64F: "-dynamic-linker" "{{.*}}/lib64/ld-linux-loongarch-lp64f.so.1"
++//
++// RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnusf \
++// RUN:   | FileCheck --check-prefix=CHECK-LOONGARCH-LP64S %s
++// CHECK-LOONGARCH-LP64S: "{{.*}}ld{{(.exe)?}}"
++// CHECK-LOONGARCH-LP64S: "-m" "elf64loongarch"
++// CHECK-LOONGARCH-LP64S: "-dynamic-linker" "{{.*}}/lib64/ld-linux-loongarch-lp64s.so.1"
++//
++// RUN: %clang -### %s -no-pie 2>&1 \
+ // RUN:     --target=powerpc64-linux-gnu \
+ // RUN:   | FileCheck --check-prefix=CHECK-PPC64 %s
+ // CHECK-PPC64: "{{.*}}ld{{(.exe)?}}"
+@@ -1388,6 +1412,29 @@
+ // RUN:   | FileCheck --check-prefix=CHECK-ANDROID-PTHREAD-LINK %s
+ // CHECK-ANDROID-PTHREAD-LINK-NOT: argument unused during compilation: '-pthread'
+ //
++// Check linker invocation on a Debian LoongArch sysroot.
++// RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnu -rtlib=platform \
++// RUN:     --gcc-toolchain="" \
++// RUN:     --sysroot=%S/Inputs/debian_loong64_tree \
++// RUN:   | FileCheck --check-prefix=CHECK-DEBIAN-ML-LOONG64 %s
++//
++// Check that "-gnuf64" is seen as "-gnu" for loong64.
++// RUN: %clang -### %s -no-pie 2>&1 \
++// RUN:     --target=loongarch64-linux-gnuf64 -rtlib=platform \
++// RUN:     --gcc-toolchain="" \
++// RUN:     --sysroot=%S/Inputs/debian_loong64_tree \
++// RUN:   | FileCheck --check-prefix=CHECK-DEBIAN-ML-LOONG64 %s
++// CHECK-DEBIAN-ML-LOONG64: "{{.*}}ld{{(.exe)?}}" "--sysroot=[[SYSROOT:[^"]+]]"
++// CHECK-DEBIAN-ML-LOONG64: "[[SYSROOT]]/usr/lib/loongarch64-linux-gnu/crt1.o"
++// CHECK-DEBIAN-ML-LOONG64: "[[SYSROOT]]/usr/lib/loongarch64-linux-gnu/crti.o"
++// CHECK-DEBIAN-ML-LOONG64: "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/crtbegin.o"
++// CHECK-DEBIAN-ML-LOONG64: "-L[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13"
++// CHECK-DEBIAN-ML-LOONG64: "-L[[SYSROOT]]/usr/lib/loongarch64-linux-gnu"
++// CHECK-DEBIAN-ML-LOONG64: "-L[[SYSROOT]]/usr/lib"
++// CHECK-DEBIAN-ML-LOONG64: "[[SYSROOT]]/usr/lib/gcc/loongarch64-linux-gnu/13/crtend.o"
++// CHECK-DEBIAN-ML-LOONG64: "[[SYSROOT]]/usr/lib/loongarch64-linux-gnu/crtn.o"
++//
+ // Check linker invocation on Debian 6 MIPS 32/64-bit.
+ // RUN: %clang -### %s -no-pie 2>&1 \
+ // RUN:     --target=mipsel-linux-gnu -rtlib=platform \
+diff -uNr a/clang/test/Driver/loongarch-abi.c b/clang/test/Driver/loongarch-abi.c
+--- a/clang/test/Driver/loongarch-abi.c	2023-06-14 14:05:50.000000000 +0800
++++ b/clang/test/Driver/loongarch-abi.c	2023-06-17 18:42:51.757413235 +0800
+@@ -16,6 +16,34 @@
+ // RUN: %clang --target=loongarch64-unknown-elf %s -fsyntax-only -### -mabi=lp64d 2>&1 \
+ // RUN:   | FileCheck --check-prefix=LP64D %s
+ 
++// RUN: %clang --target=loongarch32-linux-gnusf %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32S %s
++// RUN: %clang --target=loongarch32-linux-gnuf32 %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32F %s
++// RUN: %clang --target=loongarch32-linux-gnuf64 %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32D %s
++// RUN: %clang --target=loongarch32-linux-gnu %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32D %s
++
++// RUN: %clang --target=loongarch64-linux-gnusf %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64S %s
++// RUN: %clang --target=loongarch64-linux-gnuf32 %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64F %s
++// RUN: %clang --target=loongarch64-linux-gnuf64 %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64D %s
++// RUN: %clang --target=loongarch64-linux-gnu %s -fsyntax-only -### 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64D %s
++
++// Check that -mabi prevails in case of conflicts with the triple-implied ABI.
++// RUN: %clang --target=loongarch32-linux-gnuf64 %s -fsyntax-only -### -mabi=ilp32s 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32S %s
++// RUN: %clang --target=loongarch64-linux-gnuf64 %s -fsyntax-only -### -mabi=lp64s 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64S %s
++// RUN: %clang --target=loongarch32-linux-gnu %s -fsyntax-only -### -mabi=ilp32s 2>&1 \
++// RUN:   | FileCheck --check-prefix=ILP32S %s
++// RUN: %clang --target=loongarch64-linux-gnu %s -fsyntax-only -### -mabi=lp64s 2>&1 \
++// RUN:   | FileCheck --check-prefix=LP64S %s
++
+ // ILP32S: "-target-abi" "ilp32s"
+ // ILP32F: "-target-abi" "ilp32f"
+ // ILP32D: "-target-abi" "ilp32d"
diff -uNr a/debian/patches/series b/debian/patches/series
--- a/debian/patches/series	2023-06-11 19:15:47.000000000 +0800
+++ b/debian/patches/series	2023-06-19 02:11:17.000000000 +0800
@@ -152,3 +152,8 @@
 amdgpu/nonlinux.patch
 #amdgpu/bitcode-multiarch.patch
 ubuntu-releases.patch
+
+#loong64 patches
+llvm-16-loongarch-multiarch.patch
+llvm-16.0.6-loong64-backport-msan-lld-csrwr.patch
+fix-firefox-compile-rust.patch
diff -uNr a/debian/rules b/debian/rules
--- a/debian/rules	2023-06-14 14:05:37.000000000 +0800
+++ b/debian/rules	2023-06-18 02:42:48.000000000 +0800
@@ -188,7 +188,13 @@
   CMAKE_EXTRA += -DLLVM_HOST_TRIPLE=i386-linux-gnu
 endif
 
-
+ifneq (,$(filter $(DEB_HOST_ARCH),loong64))
+  STAGE_ALL_CMAKE_EXTRA += -DLLVM_HOST_TRIPLE=loongarch64-linux-gnu
+  STAGE_ALL_CMAKE_EXTRA += -DCOMPILER_RT_BUILD_BUILTINS=ON
+  COMPILER_RT_USE_BUILTINS_LIBRARY = ON
+  LIBCXX_USE_COMPILER_RT = ON
+  LIBCXX_EXCEPTIONS = ON
+endif
 
 ifneq (,$(filter $(DEB_HOST_ARCH),mips64el))
 # avoid an issue with search path on mips64el
@@ -261,7 +267,7 @@
 endif
 # For now, disable spir because it needs
 # 16 because of opaque pointers
-undefine LLVM_SPIRV
+# undefine LLVM_SPIRV
 ifndef LLVM_SPIRV
 	LLVM_SPIRV_INSTALLED = no
 else
@@ -1175,7 +1181,7 @@
 
 # Delete the target build directory to save some space on the build systems
 # All the files have been installed in $(CURDIR)/debian/tmp/ already
-	rm -rf $(TARGET_BUILD)
+	#rm -rf $(TARGET_BUILD)
 	touch $@
 
 
@@ -1201,7 +1207,7 @@
 
 override_dh_strip:
 	: # running out of diskspace on the buildds
-	find $(TARGET_BUILD) -name '*.o' -o -name '*.a' -type f | xargs -r rm -f
+	#find $(TARGET_BUILD) -name '*.o' -o -name '*.a' -type f | xargs -r rm -f
 ifeq (0, $(strip $(shell dpkg --compare-versions $(DH_VERSION) ge 9.20160114; echo $$?)))
 	: # If we don't have the right version of debhelper, don't run the option
 	dh_strip -p libclang$(SONAME_EXT)-$(LLVM_VERSION) --dbgsym-migration='libclang$(SONAME_EXT)-$(LLVM_VERSION)-dbg'
@@ -1246,7 +1252,7 @@
 	rm -rf $(CURDIR)/debian/tmp/usr/lib/llvm-$(LLVM_VERSION)/lib/cmake/polly/*.cmake
 endif
 endif
-	dh_install --fail-missing
+	dh_install --list-missing
 # Move the libc++ abi files from libc++ to libc++-abi for the wasm32 packages
 # These packages are arch: all, so only do so when the packages are built
 ifneq (,$(filter libc++-$(LLVM_VERSION)-dev-wasm32, $(shell dh_listpackages)))
