diff -uNr a/debian/patches/series b/debian/patches/series
--- a/debian/patches/series	2023-06-08 15:37:43.000000000 +0800
+++ b/debian/patches/series	2023-05-02 23:14:07.000000000 +0800
@@ -35,3 +30,4 @@
 cast_types_for_egl_x11_test.diff
 revert_startBlocking_removal.diff
 a11y_root.diff
+support-loongarch-qt5.patch
diff -uNr a/debian/patches/support-loongarch-qt5.patch b/debian/patches/support-loongarch-qt5.patch
--- a/debian/patches/support-loongarch-qt5.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/support-loongarch-qt5.patch	2023-05-02 23:14:07.000000000 +0800
@@ -0,0 +1,80 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ qtbase-opensource-src (5.15.8+dfsg-7) unstable; urgency=medium
+ .
+   * Update a11y_root.diff. This time the code waits for Qt loop to process the
+     check (Closes: #1033995, #1034160, #1034271).
+Author: Lisandro Damián Nicanor Pérez Meyer <lisandro@debian.org>
+Bug-Debian: https://bugs.debian.org/1033995
+Bug-Debian: https://bugs.debian.org/1034160
+Bug-Debian: https://bugs.debian.org/1034271
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-05-02
+
+--- qtbase-opensource-src-5.15.8+dfsg.orig/src/3rdparty/forkfd/forkfd_linux.c
++++ qtbase-opensource-src-5.15.8+dfsg/src/3rdparty/forkfd/forkfd_linux.c
+@@ -82,7 +82,8 @@ static int sys_clone(unsigned long clone
+     return syscall(__NR_clone, cloneflags, child_stack, stack_size, ptid, newtls, ctid);
+ #elif defined(__arc__) || defined(__arm__) || defined(__aarch64__) || defined(__mips__) || \
+     defined(__nds32__) || defined(__hppa__) || defined(__powerpc__) || defined(__i386__) || \
+-    defined(__x86_64__) || defined(__xtensa__) || defined(__alpha__) || defined(__riscv)
++    defined(__x86_64__) || defined(__xtensa__) || defined(__alpha__) || defined(__riscv) || \
++    defined(__loongarch__)
+     /* ctid and newtls are inverted on CONFIG_CLONE_BACKWARDS architectures,
+      * but since both values are 0, there's no harm. */
+     return syscall(__NR_clone, cloneflags, child_stack, ptid, ctid, newtls);
+--- qtbase-opensource-src-5.15.8+dfsg.orig/src/corelib/global/archdetect.cpp
++++ qtbase-opensource-src-5.15.8+dfsg/src/corelib/global/archdetect.cpp
+@@ -59,6 +59,10 @@
+ #  define ARCH_PROCESSOR "x86_64"
+ #elif defined(Q_PROCESSOR_IA64)
+ #  define ARCH_PROCESSOR "ia64"
++#elif defined(Q_PROCESSOR_LOONGARCH_32)
++#  define ARCH_PROCESSOR "loongarch32"
++#elif defined(Q_PROCESSOR_LOONGARCH_64)
++#  define ARCH_PROCESSOR "loongarch64"
+ #elif defined(Q_PROCESSOR_MIPS_64)
+ #  define ARCH_PROCESSOR "mips64"
+ #elif defined(Q_PROCESSOR_MIPS)
+--- qtbase-opensource-src-5.15.8+dfsg.orig/src/corelib/global/qprocessordetection.h
++++ qtbase-opensource-src-5.15.8+dfsg/src/corelib/global/qprocessordetection.h
+@@ -229,6 +229,22 @@
+ // Q_BYTE_ORDER not defined, use endianness auto-detection
+ 
+ /*
+++    LoongArch family, known variants: 32- and 64-bit
+++
+++    LoongArch is little-endian.
+++*/
++#elif defined(__loongarch__)
++#  define Q_PROCESSOR_LOONGARCH
++#  if __loongarch_grlen == 64
++#    define Q_PROCESSOR_LOONGARCH_64
++#  else
++#    define Q_PROCESSOR_LOONGARCH_32
++#  endif
++#  define Q_BYTE_ORDER Q_LITTLE_ENDIAN
++
++
++/*
++
+     MIPS family, known revisions: I, II, III, IV, 32, 64
+ 
+     MIPS is bi-endian, use endianness auto-detection implemented below.
