diff -uNr a/debian/patches/series b/debian/patches/series
--- a/debian/patches/series	2023-06-08 03:52:50.000000000 +0800
+++ b/debian/patches/series	2023-04-30 10:01:54.000000000 +0800
@@ -20,3 +13,4 @@
 
 # Don't use yield on CPUs that might not support it
 armel-noyield.patch
+support-loongarch.patch
diff -uNr a/debian/patches/support-loongarch.patch b/debian/patches/support-loongarch.patch
--- a/debian/patches/support-loongarch.patch	1970-01-01 08:00:00.000000000 +0800
+++ b/debian/patches/support-loongarch.patch	2023-04-30 10:01:54.000000000 +0800
@@ -0,0 +1,96 @@
+Description: <short summary of the patch>
+ TODO: Put a short summary on the line above and replace this paragraph
+ with a longer explanation of this change. Complete the meta-information
+ with other relevant fields (see below for details). To make it easier, the
+ information below has been extracted from the changelog. Adjust it or drop
+ it.
+ .
+ qt6-base (6.4.2+dfsg-7) unstable; urgency=medium
+ .
+   [ Patrick Franz ]
+   * Update patch for CVE-2023-24607.
+Author: Patrick Franz <deltaone@debian.org>
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2023-04-30
+
+--- qt6-base-6.4.2+dfsg.orig/src/3rdparty/forkfd/forkfd_linux.c
++++ qt6-base-6.4.2+dfsg/src/3rdparty/forkfd/forkfd_linux.c
+@@ -84,7 +84,8 @@ static int sys_clone(unsigned long clone
+     return syscall(__NR_clone, cloneflags, child_stack, stack_size, ptid, newtls, ctid);
+ #elif defined(__arc__) || defined(__arm__) || defined(__aarch64__) || defined(__mips__) || \
+     defined(__nds32__) || defined(__hppa__) || defined(__powerpc__) || defined(__i386__) || \
+-    defined(__x86_64__) || defined(__xtensa__) || defined(__alpha__) || defined(__riscv)
++    defined(__x86_64__) || defined(__xtensa__) || defined(__alpha__) || defined(__riscv) || \
++    defined(__loongarch__)
+     /* ctid and newtls are inverted on CONFIG_CLONE_BACKWARDS architectures,
+      * but since both values are 0, there's no harm. */
+     return syscall(__NR_clone, cloneflags, child_stack, ptid, ctid, newtls);
+--- qt6-base-6.4.2+dfsg.orig/src/corelib/global/archdetect.cpp
++++ qt6-base-6.4.2+dfsg/src/corelib/global/archdetect.cpp
+@@ -25,6 +25,10 @@
+ #  define ARCH_PROCESSOR "x86_64"
+ #elif defined(Q_PROCESSOR_IA64)
+ #  define ARCH_PROCESSOR "ia64"
++#elif defined(Q_PROCESSOR_LOONGARCH_32)
++#  define ARCH_PROCESSOR "loongarch32"
++#elif defined(Q_PROCESSOR_LOONGARCH_64)
++#  define ARCH_PROCESSOR "loongarch64"
+ #elif defined(Q_PROCESSOR_M68K)
+ #  define ARCH_PROCESSOR "m68k"
+ #elif defined(Q_PROCESSOR_MIPS_64)
+--- qt6-base-6.4.2+dfsg.orig/src/corelib/global/qprocessordetection.h
++++ qt6-base-6.4.2+dfsg/src/corelib/global/qprocessordetection.h
+@@ -197,6 +197,20 @@
+ // Q_BYTE_ORDER not defined, use endianness auto-detection
+ 
+ /*
++    LoongArch family, known variants: 32- and 64-bit
++
++    LoongArch is little-endian.
++*/
++#elif defined(__loongarch__)
++#  define Q_PROCESSOR_LOONGARCH
++#  if __loongarch_grlen == 64
++#    define Q_PROCESSOR_LOONGARCH_64
++#  else
++#    define Q_PROCESSOR_LOONGARCH_32
++#  endif
++#  define Q_BYTE_ORDER Q_LITTLE_ENDIAN
++
++/*
+     Motorola 68000 family, no revisions or variants
+ 
+     M68K is big-endian.
+--- qt6-base-6.4.2+dfsg.orig/src/corelib/plugin/qelfparser_p.cpp
++++ qt6-base-6.4.2+dfsg/src/corelib/plugin/qelfparser_p.cpp
+@@ -122,6 +122,8 @@ struct ElfMachineCheck
+             EM_PARISC
+ #elif defined(Q_PROCESSOR_IA64)
+             EM_IA_64
++#elif defined(Q_PROCESSOR_LOONGARCH)
++            EM_LOONGARCH
+ #elif defined(Q_PROCESSOR_M68K)
+             EM_68K
+ #elif defined(Q_PROCESSOR_MIPS)
+@@ -387,6 +389,9 @@ Q_DECL_UNUSED Q_DECL_COLD_FUNCTION stati
+     case EM_BLACKFIN:   d << ", Blackfin"; break;
+ #endif
+     case EM_IA_64:      d << ", IA-64"; break;
++#ifdef EM_LOONGARCH
++    case EM_LOONGARCH:  d << ", LoongArch"; break;
++#endif
+     case EM_MIPS:       d << ", MIPS"; break;
+     case EM_PARISC:     d << ", HPPA"; break;
+     case EM_PPC:        d << ", PowerPC"; break;